<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>返回流文件进行下载</title>
    <link href="/2023/04/25/%E8%BF%94%E5%9B%9E%E6%B5%81%E6%96%87%E4%BB%B6%E8%BF%9B%E8%A1%8C%E4%B8%8B%E8%BD%BD/"/>
    <url>/2023/04/25/%E8%BF%94%E5%9B%9E%E6%B5%81%E6%96%87%E4%BB%B6%E8%BF%9B%E8%A1%8C%E4%B8%8B%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<h3 id="返回流文件进行下载"><a href="#返回流文件进行下载" class="headerlink" title="返回流文件进行下载"></a>返回流文件进行下载</h3><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(response);<span class="hljs-comment">// response为返回的流文件</span><span class="hljs-keyword">const</span> blob = <span class="hljs-keyword">new</span> Blob([response.data],  &#123;<span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;application/pdf&#x27;</span>&#125;)<span class="hljs-keyword">const</span> objectUrl = URL.createObjectURL(blob);<span class="hljs-keyword">const</span> elink = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;a&quot;</span>);elink.download =<span class="hljs-string">&#x27;资源附件&#x27;</span><span class="hljs-comment">// 下载文件名称，</span>elink.style.display = <span class="hljs-string">&#x27;none&#x27;</span>elink.href = objectUrl<span class="hljs-built_in">document</span>.body.appendChild(elink)elink.click()URL.revokeObjectURL(elink.href)<span class="hljs-comment">// 释放URL 对象</span><span class="hljs-built_in">document</span>.body.removeChild(elink)</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>返回流文件进行下载</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git命令</title>
    <link href="/2023/03/25/git%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/03/25/git%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="git命令"><a href="#git命令" class="headerlink" title="git命令:"></a>git命令:</h3><pre><code class="hljs js"><span class="hljs-comment">//查看分支 git branch -a</span><span class="hljs-comment">//删除分支 git branch -d self-charger-dev</span><span class="hljs-comment">//切换分支 git checkout -b charger-shanxiang origin/charger-shanxiang</span><span class="hljs-comment">//拉取分支 git fetch</span><span class="hljs-comment">//拉取在其他分支上暂存区提交的代码 git cherry-pick (在当前分支commit之后,切换(到需要上传的)分支,使用gitcherry-pick命令,复制暂存区的内容,如果新分支有冲突就解决,没有可以提交</span><span class="hljs-comment">//合并新分支 git merge country6_test(新建的分支)</span>git add .git commit -am <span class="hljs-string">&quot;feature(login):登录功能联调&quot;</span>git pullgit pushgit checkout releasegit merge develop<span class="hljs-comment">//合并分支到当前（release）分支</span>git pushgit checkout develop</code></pre><h3 id="提交规范："><a href="#提交规范：" class="headerlink" title="提交规范："></a>提交规范：</h3><p>git commit 格式如下：<br><type>(&lt;scope›): <subject><br>各个部分的说明如下：</p><p><strong>•type类型，提交的关别</strong><br>。feat:新功能<br>。fix：修复 bug<br>。docs:文档变动<br>。style:格式谓整，对代码实际运行没有改动，例如添加空行、格式化等<br>。refactor:bug 修复和添加新功能之外的代码改动<br>。 perf：提升性能的改动<br>。test:添加或修正测试代码<br>。chore：构建过程或辅助工具和库（如文档生成）的更改</p><p><strong>•scope 修改范围</strong></p><p>主要是这次修改涉及到的部分，简单概括，例如口 login、 train-order</p><p><strong>• subject 修改的描述</strong><br>具体的修改描述信息<br><strong>•范例</strong></p><pre><code class="hljs js">feat(detai1)：详情页修改样式fix(<span class="hljs-number">1</span>ogin)：登录页面错误处理test(list)：列表页添加测试代码</code></pre><p><strong>这里对提交规范加几点说明：</strong></p><p>1.type + scope 能够控制每笔提交改动的文件尽可能少且集中，避免一次很多文件改动或者客个改动合成一笔。<br>2.subject 对于大部分国内项目市己，如果团队整体英文不是较高水平，比较推荐使用中文，方便阅读和检菜。<br>3.避免重复的提交信息，如果发现上一笔提交没政完整，可以使用 git commit –amend 指令追加改动，尽量避免重复的提交信息。</p>]]></content>
    
    
    <categories>
      
      <category>个人收藏</category>
      
    </categories>
    
    
    <tags>
      
      <tag>个人收藏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>moment.js常用操作-备忘</title>
    <link href="/2023/03/08/moment.js%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C-%E5%A4%87%E5%BF%98/"/>
    <url>/2023/03/08/moment.js%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C-%E5%A4%87%E5%BF%98/</url>
    
    <content type="html"><![CDATA[<h2 id="moment-js常用操作-备忘"><a href="#moment-js常用操作-备忘" class="headerlink" title="moment.js常用操作-备忘"></a>moment.js常用操作-备忘</h2><pre><code class="hljs js"><span class="hljs-comment">// 官网  http://momentjs.cn/</span><span class="hljs-comment">// moment格式时间</span>moment()<span class="hljs-comment">//此刻时间</span>moment(<span class="hljs-string">&quot;1995-12-25&quot;</span>)moment(<span class="hljs-string">&quot;1995-12-25&quot;</span>,<span class="hljs-string">&quot;YYYY-MM-DD&quot;</span>) <span class="hljs-comment">// 设置moment</span>moment().set(&#123;<span class="hljs-string">&#x27;year&#x27;</span>: <span class="hljs-number">2013</span>, <span class="hljs-string">&#x27;month&#x27;</span>: <span class="hljs-number">3</span>&#125;);<span class="hljs-comment">// 一天前</span>moment().subtract(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;day&#x27;</span>).format(<span class="hljs-string">&#x27;YYYY-MM-DD&#x27;</span>)<span class="hljs-comment">// 一月前</span>moment().subtract(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;month&#x27;</span>).format(<span class="hljs-string">&#x27;YYYY-MM-DD&#x27;</span>)<span class="hljs-comment">// 一年前</span>moment().subtract(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;year&#x27;</span>).format(<span class="hljs-string">&#x27;YYYY-MM-DD&#x27;</span>)<span class="hljs-comment">// 一天后/month/year</span>moment(<span class="hljs-string">&quot;1995-12-25&quot;</span>).add(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;days&quot;</span>).format(<span class="hljs-string">&quot;YYYY-MM-DD&quot;</span>);<span class="hljs-comment">// 是否在某日期前</span>moment(<span class="hljs-string">&#x27;2010-10-20&#x27;</span>).isBefore(<span class="hljs-string">&#x27;2010-10-21&#x27;</span>); <span class="hljs-comment">// true</span><span class="hljs-comment">// 是否相等</span>isSame()<span class="hljs-comment">// 是否在某日期之后</span>isAfter()</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>备忘录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网站收藏</title>
    <link href="/2023/02/25/%E7%BD%91%E7%AB%99%E6%94%B6%E8%97%8F/"/>
    <url>/2023/02/25/%E7%BD%91%E7%AB%99%E6%94%B6%E8%97%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="网站收藏"><a href="#网站收藏" class="headerlink" title="网站收藏:"></a><strong>网站收藏:</strong></h3><p>生成二维码      <a href="https://cli.im/">https://cli.im/</a></p><p>阿里矢量图      <a href="https://www.iconfont.cn/manage/index?spm=a313x.7781069.1998910419.12&amp;manage_type=myprojects&amp;projectId=2302652">https://www.iconfont.cn/manage/index?spm=a313x.7781069.1998910419.12&amp;manage_type=myprojects&amp;projectId=2302652</a></p><p>js文件压缩     <a href="https://c.runoob.com/front-end/51">https://c.runoob.com/front-end/51</a></p><p>moment.js(时间格式转换)      <a href="http://momentjs.cn/">http://momentjs.cn/</a></p><p>postman大全     <a href="https://www.jianshu.com/p/97ba64888894">https://www.jianshu.com/p/97ba64888894</a></p><p>VScode常用插件     <a href="https://www.jianshu.com/p/fc4dcb2043f6">https://www.jianshu.com/p/fc4dcb2043f6</a></p><p>RGB和16进制颜色转换     <a href="https://www.sioe.cn/yingyong/yanse-rgb-16/">https://www.sioe.cn/yingyong/yanse-rgb-16/</a></p><p>小火柴前端小站     <a href="https://www.xiaohuochai.cc/">https://www.xiaohuochai.cc/</a></p><p>nvm的安装和使用(切换node版本工具)     <a href="https://www.cnblogs.com/gaozejie/p/10689742.html">https://www.cnblogs.com/gaozejie/p/10689742.html</a></p><p>nvm不是内部或外部命令     <a href="https://blog.csdn.net/zsm4623/article/details/105954168/?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-0&amp;spm=1001.2101.3001.4242">https://blog.csdn.net/zsm4623/article/details/105954168/?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-0&amp;spm=1001.2101.3001.4242</a></p><p>svn安装和使用手册     <a href="https://blog.csdn.net/sinat_37812785/article/details/80243207">https://blog.csdn.net/sinat_37812785/article/details/80243207</a></p><p>Mint UI     <a href="https://mint-ui.github.io/docs/#/zh-cn2/indicator">https://mint-ui.github.io/docs/#/zh-cn2/indicator</a></p><p>鲁班H5     <a href="https://ly525.github.io/luban-h5/zh/getting-started/introduction.html">https://ly525.github.io/luban-h5/zh/getting-started/introduction.html</a></p><p>博客园    <a href="https://www.cnblogs.com/">https://www.cnblogs.com/</a></p>]]></content>
    
    
    <categories>
      
      <category>个人收藏</category>
      
    </categories>
    
    
    <tags>
      
      <tag>个人收藏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小程序上传手机本地文件</title>
    <link href="/2022/09/26/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%8A%E4%BC%A0%E6%89%8B%E6%9C%BA%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6/"/>
    <url>/2022/09/26/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%8A%E4%BC%A0%E6%89%8B%E6%9C%BA%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="小程序上传手机本地文件"><a href="#小程序上传手机本地文件" class="headerlink" title="小程序上传手机本地文件"></a>小程序上传手机本地文件</h3><p><strong>需求：</strong></p><p>上传操作，两种tap，一种是调取微信api方法，就不用赘述了，主要是第二种：调取手机文件管理，上传文件，文件包含.word，.doc，.docx，.xls，.xlsx，.excel，.pdf，.ofd这些文件</p><p><strong>具体实现：</strong></p><p>使用的微信原生api，通过webview标签实现，外链一个h5页面，h5通过input的属性进行上传文件，文件上传逻辑及接口在h5进行书写（这里很关键，），上传完成，只需要将上传成功的文件id和name（需要的参数）传入小程序，就可以实现此功能了。</p><p><strong>注意事项：</strong></p><p>1，webview的src链接需要配置域名，不然没法调试，而且只对企业用户开放</p><p>2，上传逻辑及接口在h5进行书写，如果在小程序端写，上传后的文件需要转成base64，通过wx.miniProgram.postMessage({data: myData });传给小程序，再进行接口对接，内存会炸掉，可能这个文件转base64后的大小有几M大小，比原文件还大，开发的时候遇到了，后来又统一改了一遍</p><p><strong>遇到问题：</strong></p><p>刚开始做的时候，还是打开了百度，毕竟没有做过，了解到webView标签可以实现此功能：</p><p>附链接：<a href="https://developers.weixin.qq.com/miniprogram/dev/component/web-view.html">https://developers.weixin.qq.com/miniprogram/dev/component/web-view.html</a></p><p>过程中：</p><p>看到了很多人遇到的问题，当然自己也同样遇到很多问题，感兴趣可以看一下，当然本人也是在此得到一些启发：</p><p>1，<a href="https://blog.csdn.net/EEstefan/article/details/121588424">https://blog.csdn.net/EEstefan/article/details/121588424</a></p><p>2，<a href="https://blog.csdn.net/qq_37970097/article/details/115793051">https://blog.csdn.net/qq_37970097/article/details/115793051</a></p><p>过程中的心酸不再赘述，可能在做此功能的你也很苦恼，在此我也是做一下记录，希望能给你一点启发，话不多说，看看具体代码吧，具体逻辑具体分析吧，看需要上传什么类型的文件，可以进行修改</p><p><strong>具体代码：</strong></p><p><strong>1，小程序内新建的webview页面</strong>，作为点击上传跳转的页面，打开h5链接</p><pre><code class="hljs wxml">&lt;web-view src&#x3D;&quot;&#123;&#123;url&#125;&#125;&quot; bindmessage&#x3D;&quot;handleMessage&quot;&gt;&lt;&#x2F;web-view&gt;</code></pre><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; host, imgHost &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../../../utils/config&quot;</span><span class="hljs-keyword">var</span> app = getApp()Page(&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 页面的初始数据</span><span class="hljs-comment">     */</span>    data: &#123;        url:<span class="hljs-string">&#x27;&#x27;</span>,        token:wx.getStorageSync(<span class="hljs-string">&#x27;token&#x27;</span>),    &#125;,    handleMessage(data)&#123;        <span class="hljs-keyword">let</span> toolsUploadType = wx.getStorageSync(<span class="hljs-string">&#x27;toolsUploadType&#x27;</span>);        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;返回数据：&#x27;</span>, data);        <span class="hljs-keyword">let</span> res = &#123; ...data.detail.data[<span class="hljs-number">0</span>] &#125;        wx.setStorageSync(<span class="hljs-string">&#x27;picName&#x27;</span>, res.name)        <span class="hljs-keyword">let</span> type = res.type.split(<span class="hljs-string">&#x27;/&#x27;</span>)[<span class="hljs-number">1</span>];        <span class="hljs-keyword">let</span> nameType = res.name.substr(res.name.length<span class="hljs-number">-4</span>,res.name.length<span class="hljs-number">-1</span>);        <span class="hljs-keyword">if</span>(nameType == <span class="hljs-string">&#x27;.doc&#x27;</span>||nameType == <span class="hljs-string">&#x27;.xls&#x27;</span>||nameType == <span class="hljs-string">&#x27;.txt&#x27;</span>)&#123;            nameType = nameType.split(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">1</span>]        &#125;        <span class="hljs-keyword">let</span> obj = &#123;<span class="hljs-attr">type</span>:type.length&lt;<span class="hljs-number">5</span>?type:nameType,<span class="hljs-attr">size</span>:res.size&#125;        wx.setStorageSync(<span class="hljs-string">&#x27;localInfo&#x27;</span>, obj)        <span class="hljs-keyword">if</span>((toolsUploadType == <span class="hljs-string">&#x27;word&#x27;</span>&amp;&amp;(type==<span class="hljs-string">&#x27;docx&#x27;</span>||type==<span class="hljs-string">&#x27;msword&#x27;</span>||nameType==<span class="hljs-string">&#x27;docx&#x27;</span>||nameType==<span class="hljs-string">&#x27;doc&#x27;</span>))||        (toolsUploadType == <span class="hljs-string">&#x27;xlsx&#x27;</span>&amp;&amp;(type==<span class="hljs-string">&#x27;xls&#x27;</span>||type==<span class="hljs-string">&#x27;xlsx&#x27;</span>||type==<span class="hljs-string">&#x27;excel&#x27;</span>||nameType==<span class="hljs-string">&#x27;xlsx&#x27;</span>||nameType==<span class="hljs-string">&#x27;xls&#x27;</span>))||        (toolsUploadType == <span class="hljs-string">&#x27;txt&#x27;</span>&amp;&amp;(type==<span class="hljs-string">&#x27;plain&#x27;</span>||nameType==<span class="hljs-string">&#x27;txt&#x27;</span>)))&#123;            toolsUploadType = type            <span class="hljs-keyword">if</span>(nameType==<span class="hljs-string">&#x27;docx&#x27;</span>||nameType==<span class="hljs-string">&#x27;doc&#x27;</span>||nameType==<span class="hljs-string">&#x27;xls&#x27;</span>||nameType==<span class="hljs-string">&#x27;xlsx&#x27;</span>||nameType==<span class="hljs-string">&#x27;txt&#x27;</span>)&#123;                toolsUploadType = nameType            &#125;            wx.setStorageSync(<span class="hljs-string">&#x27;toolsUploadType&#x27;</span>, toolsUploadType)        &#125;        <span class="hljs-keyword">if</span>(res.size/<span class="hljs-number">1048576</span>&lt;=<span class="hljs-number">5</span>&amp;&amp;(type==toolsUploadType||nameType==toolsUploadType))&#123;            <span class="hljs-comment">// wx.setStorageSync(&#x27;localPdfData&#x27;, res)</span>            app.globalData.localPdfData = res            <span class="hljs-comment">// wx.navigateBack(&#123; delta: 1 &#125;);</span>            <span class="hljs-comment">// 跳转上传页</span>        &#125;    &#125;,    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 生命周期函数--监听页面加载</span><span class="hljs-comment">     */</span>    onLoad: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">options</span>) </span>&#123;        <span class="hljs-keyword">let</span> toolsUploadType = wx.getStorageSync(<span class="hljs-string">&#x27;toolsUploadType&#x27;</span>);        <span class="hljs-keyword">let</span> sourceType = wx.getStorageSync(<span class="hljs-string">&#x27;sourceType&#x27;</span>);        <span class="hljs-keyword">let</span> abilityId = wx.getStorageSync(<span class="hljs-string">&#x27;abilityId&#x27;</span>);        <span class="hljs-keyword">let</span> token = <span class="hljs-built_in">this</span>.data.token;        <span class="hljs-built_in">this</span>.setData(&#123;            <span class="hljs-comment">// url: imgHost+&#x27;/lawsuit/pdfToolPage/getDocPdf.html&#x27;</span>            url:<span class="hljs-string">`<span class="hljs-subst">$&#123;imgHost&#125;</span>/lawsuit/pdfToolPage/getDocPdf.html?host=<span class="hljs-subst">$&#123;host&#125;</span>&amp;abilityId=<span class="hljs-subst">$&#123;abilityId&#125;</span>&amp;sourceType=<span class="hljs-subst">$&#123;sourceType&#125;</span>&amp;fileType=<span class="hljs-subst">$&#123;toolsUploadType&#125;</span>&amp;token=<span class="hljs-subst">$&#123;token&#125;</span>&amp;timestamp=<span class="hljs-subst">$&#123;<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime()&#125;</span>`</span>        &#125;)        <span class="hljs-comment">//console.log(this.data.url)</span>    &#125;&#125;)</code></pre><p><strong>2,h5页面：</strong>（此页面作为一个链接，要存放在服务器上）</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>本地文件<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span>        * &#123;            margin: 0;            padding: 0;        &#125;<span class="css">        <span class="hljs-selector-class">.title</span> &#123;</span>            font-size: 16px;            font-weight: 600;            margin-bottom: 10px;        &#125;        p &#123;            font-size: 12px;            margin-bottom: 50px;        &#125;<span class="css">        <span class="hljs-selector-class">.web_wiew</span> &#123;</span>            display: flex;            flex-flow: column;            align-items: center;            padding-top: 80px;        &#125;<span class="css">        <span class="hljs-selector-class">.resume-look-bottom</span> <span class="hljs-selector-tag">button</span> &#123;</span>            width: 283px;            height: 45px;<span class="css">            <span class="hljs-selector-tag">background</span>: <span class="hljs-selector-id">#1989Fa</span>;</span>            border: none;<span class="css">            <span class="hljs-selector-tag">color</span>: <span class="hljs-selector-id">#fff</span>;</span>            border-radius: 40px;        &#125;<span class="css">        <span class="hljs-selector-class">.loading_box</span>&#123;</span>            margin: auto;            position: relative;            text-align: center;            width: 100px;            height: 100px;            background-color: black;            padding-top: 10px;<span class="css">            <span class="hljs-selector-tag">color</span>: <span class="hljs-selector-id">#fff</span>;</span>            font-size: 12px;            box-sizing: border-box;        &#125;<span class="css">        <span class="hljs-selector-class">.loading_box</span><span class="hljs-selector-class">.none</span>&#123;</span>            display: none;        &#125;<span class="css">        <span class="hljs-selector-class">.loading</span> &#123;</span>            width: 40px; height: 40px;            margin: auto;            position: relative;        &#125;<span class="css">        <span class="hljs-selector-class">.loading</span><span class="hljs-selector-pseudo">::before</span> &#123;</span>            content: &quot;&quot;;            width: 4px; height: 4px;            border-radius: 100%;<span class="css">            <span class="hljs-selector-tag">color</span>: <span class="hljs-selector-tag">rgba</span>(255, 255, 255, <span class="hljs-selector-class">.4</span>);</span><span class="css">            <span class="hljs-selector-tag">box-shadow</span>: 0 <span class="hljs-selector-tag">-10px</span> <span class="hljs-selector-tag">rgba</span>(255, 255, 255,<span class="hljs-selector-class">.9</span>),    <span class="hljs-comment">/* top */</span></span><span class="css">                10<span class="hljs-selector-tag">px</span> 0<span class="hljs-selector-tag">px</span>,                  <span class="hljs-comment">/* right */</span></span><span class="css">                0 10<span class="hljs-selector-tag">px</span>,                    <span class="hljs-comment">/* bottom */</span></span><span class="css">                <span class="hljs-selector-tag">-10px</span> 0 <span class="hljs-selector-tag">rgba</span>(255, 255, 255<span class="hljs-selector-class">.7</span>),    <span class="hljs-comment">/* left */</span></span><span class="css">                <span class="hljs-selector-tag">-7px</span> <span class="hljs-selector-tag">-7px</span> <span class="hljs-selector-tag">rgba</span>(255, 255, 255,<span class="hljs-selector-class">.8</span>),  <span class="hljs-comment">/* left-top */</span></span><span class="css">                7<span class="hljs-selector-tag">px</span> <span class="hljs-selector-tag">-7px</span> <span class="hljs-selector-tag">rgba</span>(255, 255, 255,1),    <span class="hljs-comment">/* right-top */</span></span><span class="css">                7<span class="hljs-selector-tag">px</span> 7<span class="hljs-selector-tag">px</span>,                   <span class="hljs-comment">/* right-bottom */</span></span><span class="css">                <span class="hljs-selector-tag">-7px</span> 7<span class="hljs-selector-tag">px</span>;                  <span class="hljs-comment">/* left-bottom */</span></span>            animation: spin 1s steps(8) infinite;<span class="css">            <span class="hljs-comment">/* center */</span></span>            position: absolute;            top: 0; right: 0; bottom: 0; left: 0;            margin: auto;        &#125;<span class="css">        <span class="hljs-keyword">@keyframes</span> spin &#123;</span><span class="css">            0% &#123; <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">0deg</span>); &#125;</span><span class="css">            100% &#123; <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">360deg</span>); &#125;</span>        &#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://code.jquery.com/jquery-2.1.4.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-comment">&lt;!--此处jquery直接copy的内容放在了这里，链接引入没有试--&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>                                      <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://res.wx.qq.com/open/js/jweixin-1.3.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;web_wiew&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;resunme&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>怎么上传本机文件？<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>点击下方按钮→点击文件管理→选择文件<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>上传的文件大小？<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>支持上传5M以内的文件<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;resume-look-bottom&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 92%;&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: none;&quot;</span> /&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;upload&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cu-btn&quot;</span>&gt;</span>                    上传本机文件                <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;loading_box none&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;loading&quot;</span>&gt;</span>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin: 10px auto;&quot;</span>&gt;</span>加载中...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">        <span class="hljs-comment">// 获取小程序传递过来的参数</span></span><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getSearchString</span>(<span class="hljs-params">Url</span>) </span>&#123;</span><span class="javascript">            <span class="hljs-keyword">var</span> str = Url;</span>            str = str.substring(1, str.length);<span class="javascript">            <span class="hljs-keyword">var</span> arr = str.split(<span class="hljs-string">&quot;&amp;&quot;</span>);</span><span class="javascript">            <span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();</span><span class="javascript">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;</span><span class="javascript">                <span class="hljs-keyword">var</span> tmp_arr = arr[i].split(<span class="hljs-string">&quot;=&quot;</span>);</span><span class="javascript">                obj[<span class="hljs-built_in">decodeURIComponent</span>(tmp_arr[<span class="hljs-number">0</span>])] = <span class="hljs-built_in">decodeURIComponent</span>(tmp_arr[<span class="hljs-number">1</span>]);</span>            &#125;<span class="javascript">            <span class="hljs-keyword">return</span> obj;</span>        &#125;<span class="javascript">        <span class="hljs-keyword">var</span> search = <span class="hljs-built_in">window</span>.location.search;</span><span class="javascript">        <span class="hljs-built_in">console</span>.log(search,<span class="hljs-string">&quot;wechatData&quot;</span>)</span><span class="javascript">        <span class="hljs-keyword">var</span> wechatData = getSearchString(search); </span><span class="javascript">        <span class="hljs-built_in">console</span>.log(wechatData,<span class="hljs-string">&quot;wechatData&quot;</span>)</span><span class="javascript">        <span class="hljs-comment">// 选择文件</span></span><span class="javascript">        <span class="hljs-keyword">const</span> Upload = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;upload&#x27;</span>);</span><span class="javascript">        Upload.onclick = <span class="hljs-function">() =&gt;</span> &#123;</span>            oFile.click();        &#125;;<span class="javascript">        <span class="hljs-comment">// 监听文件上传</span></span><span class="javascript">        <span class="hljs-keyword">const</span> oFile = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;file&#x27;</span>);</span><span class="javascript">        oFile.onchange = <span class="hljs-function">() =&gt;</span> &#123;</span><span class="javascript">            <span class="hljs-comment">// console.log(oFile.files[0],oFile.files[0].arrayBuffer, &#x27;123123&#x27;)</span></span><span class="javascript">            <span class="hljs-keyword">var</span> myData = &#123;</span><span class="javascript">                filename: oFile.files[<span class="hljs-number">0</span>].name.split(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">0</span>],</span>                size: oFile.files[0].size,                name: oFile.files[0].name,                lastModified: oFile.files[0].lastModified,                type: oFile.files[0].type,                webkitRelativePath: oFile.files[0].webkitRelativePath            &#125;;<span class="javascript">            <span class="hljs-comment">// let sendData = JSON.stringify(fd)</span></span><span class="javascript">            <span class="hljs-comment">// console.log(sendData, &#x27;sendData&#x27;)</span></span><span class="javascript">            <span class="hljs-comment">// 转base64</span></span><span class="javascript">            fileToBase64(oFile.files[<span class="hljs-number">0</span>]).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;</span><span class="javascript">                <span class="hljs-built_in">console</span>.log(res, <span class="hljs-string">&quot;res&quot;</span>)</span><span class="javascript">                myData[<span class="hljs-string">&#x27;fileBase&#x27;</span>] = <span class="hljs-string">&#x27;&#x27;</span>;</span><span class="javascript">                <span class="hljs-built_in">console</span>.log(myData, <span class="hljs-string">&#x27;myDataee&#x27;</span>)</span><span class="javascript">                <span class="hljs-comment">// wx.miniProgram.postMessage(&#123;</span></span><span class="javascript">                <span class="hljs-comment">//     data: myData</span></span><span class="javascript">                <span class="hljs-comment">// &#125;);</span></span>                if(isConform())&#123;                    createTempFile(res);<span class="javascript">                &#125;<span class="hljs-keyword">else</span>&#123;</span>                    goWechatApplet()                &#125;            &#125;)<span class="javascript">            <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isConform</span>(<span class="hljs-params"></span>)</span>&#123;</span><span class="javascript">                <span class="hljs-keyword">let</span> toolsUploadType = wechatData.fileType;</span><span class="javascript">                <span class="hljs-keyword">let</span> type = myData.type.split(<span class="hljs-string">&#x27;/&#x27;</span>)[<span class="hljs-number">1</span>];</span>                if(!type)&#123;<span class="javascript">                    type = <span class="hljs-string">&#x27;ofd&#x27;</span></span><span class="javascript">                    myData.type = <span class="hljs-string">&#x27;/ofd&#x27;</span>;</span>                &#125;<span class="javascript">                <span class="hljs-keyword">let</span> nameType = myData.name.substr(myData.name.length<span class="hljs-number">-4</span>,myData.name.length<span class="hljs-number">-1</span>);</span><span class="javascript">                <span class="hljs-keyword">if</span>(nameType == <span class="hljs-string">&#x27;.doc&#x27;</span>||nameType == <span class="hljs-string">&#x27;.xls&#x27;</span>||nameType == <span class="hljs-string">&#x27;.txt&#x27;</span>)&#123;</span><span class="javascript">                    nameType = nameType.split(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">1</span>]</span>                &#125;<span class="javascript">                <span class="hljs-keyword">if</span>((toolsUploadType == <span class="hljs-string">&#x27;word&#x27;</span>&amp;&amp;(type==<span class="hljs-string">&#x27;docx&#x27;</span>||type==<span class="hljs-string">&#x27;msword&#x27;</span>||nameType==<span class="hljs-string">&#x27;docx&#x27;</span>||nameType==<span class="hljs-string">&#x27;doc&#x27;</span>))||</span><span class="javascript">                (toolsUploadType == <span class="hljs-string">&#x27;xlsx&#x27;</span>&amp;&amp;(type==<span class="hljs-string">&#x27;xls&#x27;</span>||type==<span class="hljs-string">&#x27;xlsx&#x27;</span>||type==<span class="hljs-string">&#x27;excel&#x27;</span>||nameType==<span class="hljs-string">&#x27;xlsx&#x27;</span>||nameType==<span class="hljs-string">&#x27;xls&#x27;</span>))||</span><span class="javascript">                (toolsUploadType == <span class="hljs-string">&#x27;txt&#x27;</span>&amp;&amp;(type==<span class="hljs-string">&#x27;plain&#x27;</span>||nameType==<span class="hljs-string">&#x27;txt&#x27;</span>)))&#123;</span>                    toolsUploadType = type<span class="javascript">                    <span class="hljs-keyword">if</span>(nameType==<span class="hljs-string">&#x27;docx&#x27;</span>||nameType==<span class="hljs-string">&#x27;doc&#x27;</span>||nameType==<span class="hljs-string">&#x27;xls&#x27;</span>||nameType==<span class="hljs-string">&#x27;xlsx&#x27;</span>||nameType==<span class="hljs-string">&#x27;txt&#x27;</span>)&#123;</span>                        toolsUploadType = nameType                    &#125;                    wechatData.fileType = toolsUploadType                &#125;                if(type==toolsUploadType||nameType==toolsUploadType)&#123;<span class="javascript">                    myData[<span class="hljs-string">&#x27;isConform&#x27;</span>] = <span class="hljs-literal">false</span>;</span><span class="javascript">                    myData[<span class="hljs-string">&#x27;tostText&#x27;</span>] = <span class="hljs-string">&quot;请上传&quot;</span>+toolsUploadType+<span class="hljs-string">&quot;文件！&quot;</span>;</span>                    if(myData.size/1048576&gt;5)&#123;<span class="javascript">                        myData[<span class="hljs-string">&#x27;tostText&#x27;</span>] = <span class="hljs-string">&quot;请上传5M以内的PDF文件！&quot;</span>;</span><span class="javascript">                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span></span><span class="javascript">                    &#125;<span class="hljs-keyword">else</span>&#123;</span><span class="javascript">                        myData[<span class="hljs-string">&#x27;isConform&#x27;</span>] = <span class="hljs-literal">true</span>;</span><span class="javascript">                        myData[<span class="hljs-string">&#x27;tostText&#x27;</span>] = <span class="hljs-string">&quot;可以进行上传！&quot;</span>;</span><span class="javascript">                        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span></span>                    &#125;<span class="javascript">                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span></span>                &#125;            &#125;<span class="javascript">            <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fileToBase64</span>(<span class="hljs-params">file</span>) </span>&#123;</span><span class="javascript">                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><span class="javascript">                    <span class="hljs-keyword">const</span> reader = <span class="hljs-keyword">new</span> FileReader()</span><span class="javascript">                    <span class="hljs-keyword">let</span> fileResult = <span class="hljs-string">&#x27;&#x27;</span></span>                    reader.readAsDataURL(file)<span class="javascript">                    <span class="hljs-comment">// 开始转</span></span><span class="javascript">                    reader.onload = <span class="hljs-function">() =&gt;</span> &#123;</span>                        fileResult = reader.result                    &#125;<span class="javascript">                    <span class="hljs-comment">// 转 失败</span></span><span class="javascript">                    reader.onerror = <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;</span>                        reject(error)                    &#125;<span class="javascript">                    <span class="hljs-comment">// 转 结束</span></span><span class="javascript">                    reader.onloadend = <span class="hljs-function">() =&gt;</span> &#123;</span><span class="javascript">                        <span class="hljs-comment">// this.formJar.fileName = file.name</span></span>                        resolve(fileResult)                    &#125;                &#125;)            &#125;<span class="javascript">            <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createTempFile</span>(<span class="hljs-params">tempFilePaths</span>)</span>&#123;</span><span class="javascript">                $(<span class="hljs-string">&quot;.loading_box&quot;</span>).removeClass(<span class="hljs-string">&quot;none&quot;</span>);</span><span class="javascript">                <span class="hljs-keyword">let</span> params = &#123;<span class="hljs-string">&#x27;fileContent&#x27;</span>:tempFilePaths,<span class="hljs-string">&#x27;fileExt&#x27;</span>:wechatData.fileType&#125;</span><span class="javascript">                <span class="hljs-keyword">let</span>  serverUrl = wechatData.host + <span class="hljs-string">&#x27;/doc/createTempFile&#x27;</span></span><span class="javascript">                <span class="hljs-keyword">if</span>(wechatData.sourceType == <span class="hljs-string">&#x27;pdfOcr&#x27;</span>&amp;&amp;!(wechatData.abilityId == <span class="hljs-string">&#x27;pdf7&#x27;</span>||wechatData.abilityId == <span class="hljs-string">&#x27;pdf8&#x27;</span>))&#123;</span><span class="javascript">                    serverUrl = wechatData.host + <span class="hljs-string">&#x27;/doc/create&#x27;</span></span>                    params.fileDisplayName = myData.name;                &#125;<span class="javascript">                $.ajax(&#123;</span><span class="javascript">                    type: <span class="hljs-string">&quot;post&quot;</span>, <span class="hljs-comment">// 提交方式</span></span><span class="javascript">                    <span class="hljs-comment">// 返回数据类型，*注意如果返回值为String类型则需要去掉此条</span></span><span class="javascript">                    dataType: <span class="hljs-string">&quot;json&quot;</span>,</span><span class="javascript">                    url: serverUrl, <span class="hljs-comment">// 访问路径</span></span>                    data:params,                    header: &#123;<span class="javascript">                        <span class="hljs-string">&#x27;token&#x27;</span>: wechatData.token,</span><span class="javascript">                        <span class="hljs-string">&#x27;content-type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span></span>                    &#125;,                    timeout: 120000,<span class="javascript">                    <span class="hljs-keyword">async</span>:<span class="hljs-literal">true</span>,</span><span class="javascript">                    success(res) &#123; <span class="hljs-comment">// 成功调用的回调函数</span></span><span class="javascript">                        <span class="hljs-keyword">if</span>(res.code==<span class="hljs-string">&quot;000000&quot;</span>)&#123;</span><span class="javascript">                            myData[<span class="hljs-string">&#x27;tostText&#x27;</span>] = <span class="hljs-string">&quot;上传成功！&quot;</span>;</span><span class="javascript">                            myData[<span class="hljs-string">&#x27;resolve&#x27;</span>] = <span class="hljs-literal">true</span>;</span><span class="javascript">                            myData[<span class="hljs-string">&#x27;data&#x27;</span>] = res;</span><span class="javascript">                        &#125;<span class="hljs-keyword">else</span>&#123;</span><span class="javascript">                            myData[<span class="hljs-string">&#x27;data&#x27;</span>] = res;</span><span class="javascript">                            myData[<span class="hljs-string">&#x27;resolve&#x27;</span>] = <span class="hljs-literal">false</span>;</span><span class="javascript">                            myData[<span class="hljs-string">&#x27;tostText&#x27;</span>] = <span class="hljs-string">&quot;上传失败！&quot;</span>;</span>                        &#125;                        goWechatApplet()                    &#125;,<span class="javascript">                    error() &#123; <span class="hljs-comment">// 调用失败</span></span><span class="javascript">                        myData[<span class="hljs-string">&#x27;tostText&#x27;</span>] = <span class="hljs-string">&quot;上传失败！&quot;</span>;</span><span class="javascript">                        myData[<span class="hljs-string">&#x27;resolve&#x27;</span>] = <span class="hljs-literal">false</span>;</span>                        goWechatApplet()                    &#125;                &#125;)            &#125;<span class="javascript">            <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">goWechatApplet</span>(<span class="hljs-params"></span>)</span>&#123;</span><span class="javascript">                <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><span class="javascript">                    $(<span class="hljs-string">&quot;.loading_box&quot;</span>).addClass(<span class="hljs-string">&quot;none&quot;</span>);</span>                    wx.miniProgram.postMessage(&#123;                        data: myData                    &#125;);                    wx.miniProgram.navigateBack();                &#125;, 800)            &#125;        &#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>问题解决</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sort排序</title>
    <link href="/2022/03/31/sort%E6%8E%92%E5%BA%8F/"/>
    <url>/2022/03/31/sort%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="sort排序"><a href="#sort排序" class="headerlink" title="sort排序"></a>sort排序</h3><p>简单数组排序:</p><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">10</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];arr1.sort(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a, b</span>) </span>&#123;    <span class="hljs-keyword">return</span> a - b;&#125;);<span class="hljs-built_in">console</span>.log(arr1);<span class="hljs-comment">//升序(b-a降序)</span></code></pre><p>对象数组排序:</p><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [&#123;<span class="hljs-attr">id</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">43</span>&#125;,&#123;<span class="hljs-attr">id</span>:<span class="hljs-number">2</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">56</span>&#125;,&#123;<span class="hljs-attr">id</span>:<span class="hljs-number">3</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">6</span>&#125;,&#123;<span class="hljs-attr">id</span>:<span class="hljs-number">4</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">3</span>&#125;]<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sortby</span>(<span class="hljs-params">prop, rev = true</span>) </span>&#123;     <span class="hljs-comment">// prop 属性名</span>     <span class="hljs-comment">// rev  升序降序 默认升序</span>      <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a, b</span>) </span>&#123;         <span class="hljs-keyword">var</span> val1 = a[prop];          <span class="hljs-keyword">var</span> val2 = b[prop];          <span class="hljs-keyword">return</span> rev ? val1 - val2 : val2 - val1;      &#125;&#125;arr.sort(sortby(<span class="hljs-string">&#x27;age&#x27;</span>)); <span class="hljs-comment">// 根据age进行升序排列</span>arr.sort(sortby(<span class="hljs-string">&#x27;age&#x27;</span>,<span class="hljs-literal">false</span>)); <span class="hljs-comment">// 根据age降序</span></code></pre><pre><code class="hljs js"><span class="hljs-keyword">var</span> items = [  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Edward&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">21</span> &#125;,  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Sharpe&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">37</span> &#125;,  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;And&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">45</span> &#125;,  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;The&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">-12</span> &#125;,  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Magnetic&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">0</span> &#125;,  &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Zeros&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">37</span> &#125;]; <span class="hljs-comment">//升序</span>items.sort(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;  <span class="hljs-keyword">if</span> (a.age &gt; b.age) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  &#125;  <span class="hljs-keyword">if</span> (a.age&lt; b.age) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  &#125;  <span class="hljs-comment">// a 必须等于 b</span>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;);</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>sort排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>两个数组对象根据某个键值比较不同项，找出删除了哪一项</title>
    <link href="/2022/03/30/%E4%B8%A4%E4%B8%AA%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84%E6%A0%B9%E6%8D%AE%E9%94%AE%E5%80%BC%E6%AF%94%E8%BE%83%EF%BC%8C%E6%9F%A5%E6%89%BE%E4%B8%8D%E5%90%8C%E9%A1%B9/"/>
    <url>/2022/03/30/%E4%B8%A4%E4%B8%AA%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84%E6%A0%B9%E6%8D%AE%E9%94%AE%E5%80%BC%E6%AF%94%E8%BE%83%EF%BC%8C%E6%9F%A5%E6%89%BE%E4%B8%8D%E5%90%8C%E9%A1%B9/</url>
    
    <content type="html"><![CDATA[<p>两个数组根据键值比较，查找不同项：</p><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr1 = [        &#123;            name:<span class="hljs-string">&quot;张三&quot;</span>,            id:<span class="hljs-number">56</span>,            sub:<span class="hljs-number">0</span>,            value:<span class="hljs-number">800</span>,            sex:<span class="hljs-string">&quot;男&quot;</span>        &#125;,        &#123;            name:<span class="hljs-string">&quot;李四&quot;</span>,            id:<span class="hljs-number">57</span>,            sub:<span class="hljs-number">1</span>,            value:<span class="hljs-number">800</span>,            sex:<span class="hljs-string">&quot;男&quot;</span>        &#125;,        &#123;            name:<span class="hljs-string">&quot;王五&quot;</span>,            id:<span class="hljs-number">58</span>,            sub:<span class="hljs-number">2</span>,            value:<span class="hljs-number">800</span>,            sex:<span class="hljs-string">&quot;男&quot;</span>        &#125;,    ];    <span class="hljs-keyword">var</span> arr2 = [        &#123;            name:<span class="hljs-string">&quot;张三&quot;</span>,            id:<span class="hljs-number">56</span>,            sub:<span class="hljs-number">0</span>,            value:<span class="hljs-number">800</span>,            sex:<span class="hljs-string">&quot;男&quot;</span>        &#125;,        &#123;            name:<span class="hljs-string">&quot;王五&quot;</span>,            id:<span class="hljs-number">58</span>,            sub:<span class="hljs-number">2</span>,            value:<span class="hljs-number">800</span>,            sex:<span class="hljs-string">&quot;男&quot;</span>        &#125;,    ];    <span class="hljs-keyword">var</span> deleteParams = <span class="hljs-function"><span class="hljs-keyword">function</span>  (<span class="hljs-params">array1,array2</span>) </span>&#123;        <span class="hljs-keyword">var</span> result = []        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; array2.length; i++) &#123;            <span class="hljs-keyword">var</span> obj = array2[i]            <span class="hljs-keyword">var</span> num = obj.id            <span class="hljs-keyword">var</span> isExist = <span class="hljs-literal">false</span>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; array1.length; j++) &#123;                <span class="hljs-keyword">var</span> aj = array1[j]                <span class="hljs-keyword">var</span> n = aj.id                <span class="hljs-keyword">if</span> (n === num) &#123;                    isExist = <span class="hljs-literal">true</span>                    <span class="hljs-keyword">break</span>                &#125;            &#125;            <span class="hljs-keyword">if</span> (!isExist) &#123;                result.push(obj)            &#125;        &#125;        <span class="hljs-keyword">return</span> result    &#125;    <span class="hljs-comment">//根据id值查找，arr1中删除了哪一项</span>    <span class="hljs-built_in">console</span>.log(deleteParams(arr2,arr1));</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>数组比较查找不同项</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>两个对象数组根据键值比较，查找不同项</title>
    <link href="/2022/03/30/%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E6%A0%B9%E6%8D%AE%E6%9F%90%E4%B8%AA%E9%94%AE%E5%80%BC%E6%AF%94%E8%BE%83%E4%B8%8D%E5%90%8C%E9%A1%B9%EF%BC%8C%E6%89%BE%E5%87%BA%E5%88%A0%E9%99%A4%E4%BA%86%E5%93%AA%E4%B8%80%E9%A1%B9/"/>
    <url>/2022/03/30/%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E6%A0%B9%E6%8D%AE%E6%9F%90%E4%B8%AA%E9%94%AE%E5%80%BC%E6%AF%94%E8%BE%83%E4%B8%8D%E5%90%8C%E9%A1%B9%EF%BC%8C%E6%89%BE%E5%87%BA%E5%88%A0%E9%99%A4%E4%BA%86%E5%93%AA%E4%B8%80%E9%A1%B9/</url>
    
    <content type="html"><![CDATA[<h3 id="两个数组根据键值比较，查找不同项："><a href="#两个数组根据键值比较，查找不同项：" class="headerlink" title="两个数组根据键值比较，查找不同项："></a>两个数组根据键值比较，查找不同项：</h3><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr1 = [        &#123;            name:<span class="hljs-string">&quot;张三&quot;</span>,            id:<span class="hljs-number">56</span>,            sub:<span class="hljs-number">0</span>,            value:<span class="hljs-number">800</span>,            sex:<span class="hljs-string">&quot;男&quot;</span>        &#125;,        &#123;            name:<span class="hljs-string">&quot;李四&quot;</span>,            id:<span class="hljs-number">57</span>,            sub:<span class="hljs-number">1</span>,            value:<span class="hljs-number">800</span>,            sex:<span class="hljs-string">&quot;男&quot;</span>        &#125;,        &#123;            name:<span class="hljs-string">&quot;王五&quot;</span>,            id:<span class="hljs-number">58</span>,            sub:<span class="hljs-number">2</span>,            value:<span class="hljs-number">800</span>,            sex:<span class="hljs-string">&quot;男&quot;</span>        &#125;,    ];    <span class="hljs-keyword">var</span> arr2 = [        &#123;            name:<span class="hljs-string">&quot;张三&quot;</span>,            id:<span class="hljs-number">56</span>,            sub:<span class="hljs-number">0</span>,            value:<span class="hljs-number">800</span>,            sex:<span class="hljs-string">&quot;男&quot;</span>        &#125;,        &#123;            name:<span class="hljs-string">&quot;王五&quot;</span>,            id:<span class="hljs-number">58</span>,            sub:<span class="hljs-number">2</span>,            value:<span class="hljs-number">800</span>,            sex:<span class="hljs-string">&quot;男&quot;</span>        &#125;,    ];    <span class="hljs-keyword">var</span> deleteParams = <span class="hljs-function"><span class="hljs-keyword">function</span>  (<span class="hljs-params">array1,array2</span>) </span>&#123;        <span class="hljs-keyword">var</span> result = []        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; array2.length; i++) &#123;            <span class="hljs-keyword">var</span> obj = array2[i]            <span class="hljs-keyword">var</span> num = obj.id            <span class="hljs-keyword">var</span> isExist = <span class="hljs-literal">false</span>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; array1.length; j++) &#123;                <span class="hljs-keyword">var</span> aj = array1[j]                <span class="hljs-keyword">var</span> n = aj.id                <span class="hljs-keyword">if</span> (n === num) &#123;                    isExist = <span class="hljs-literal">true</span>                    <span class="hljs-keyword">break</span>                &#125;            &#125;            <span class="hljs-keyword">if</span> (!isExist) &#123;                result.push(obj)            &#125;        &#125;        <span class="hljs-keyword">return</span> result    &#125;    <span class="hljs-comment">//根据id值查找，arr1中删除了哪一项</span>    <span class="hljs-built_in">console</span>.log(deleteParams(arr2,arr1));</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>数组比较查找不同项</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面向对象开发总结</title>
    <link href="/2022/03/14/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    <url>/2022/03/14/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="面向对象开发"><a href="#面向对象开发" class="headerlink" title="面向对象开发"></a>面向对象开发</h1><h2 id="封装一个函数"><a href="#封装一个函数" class="headerlink" title="封装一个函数"></a>封装一个函数</h2><pre><code class="hljs js"><span class="hljs-comment">//封装一个函数</span>    <span class="hljs-keyword">var</span> Books = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">id,name,price</span>)</span>&#123;        <span class="hljs-built_in">this</span>.id = id;        <span class="hljs-built_in">this</span>.name = name;        <span class="hljs-built_in">this</span>.price = price;    &#125;    <span class="hljs-comment">// 可以给这个函数添加方法</span>    Books.prototype.display = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-comment">//展示这本书</span>    &#125;;    <span class="hljs-comment">//或者</span>    Books.prototype = &#123;        display:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123; &#125;    &#125;;    <span class="hljs-comment">// 当我们需要用到Books里面的功能和方法的时候,我们不直接使用Books类,我们可以创建一个新的对象(new)</span>    <span class="hljs-keyword">var</span> book = <span class="hljs-keyword">new</span> Books(<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;javaScript设计模式&#x27;</span>,<span class="hljs-string">&#x27;10元&#x27;</span>);    <span class="hljs-built_in">console</span>.log(book.name);<span class="hljs-comment">//javaScript设计模式</span>    <span class="hljs-comment">// Books类使用this添加的属性和方法和通过 prototype添加的方法有什么区别?</span>    <span class="hljs-comment">// this添加的属性和方法是在当前对象上添加的,然而javaScript是基于原型prototype的语言,</span>    <span class="hljs-comment">//所以每创建一个对象时(在javascript中function也是一种对象),</span>    <span class="hljs-comment">// 他都有一个原型prototype指向其继承的属性和方法.</span>    <span class="hljs-comment">// ======================================================================= //</span>    <span class="hljs-comment">// 所以通过prototype创建的属性和方法并不是对象自身的,需要通过prototype一级一级的去查找来得到,</span>    <span class="hljs-comment">//而通过this创建的属性和方法是属于对象自身的.</span>    <span class="hljs-comment">// 所以我们在创建新一个新的对象的时候(如:book),this指向的方法都会被创建(Books对象中),</span>    <span class="hljs-comment">//而通过prototype创建的属性和方法不会再次被创建.</span>    <span class="hljs-comment">// ======================================================================= //</span>    <span class="hljs-comment">// prototype原型对象</span>    <span class="hljs-comment">// constructor属性====&gt;&gt;&gt;指向的就是拥有当前原型对象的函数或对象</span>    <span class="hljs-comment">// 当创建一个函数或者是对象的时候,都会为其创建一个prototype原型对象,</span>    <span class="hljs-comment">//在原型对象中又会像函数中创建this一样创建一个constructor属性,</span>    <span class="hljs-comment">// 那么constructor属性指向的就是拥有当前原型对象的函数或对象.(如Books中的constructor属性就是指向Books类对象)</span></code></pre><h3 id="私有属性-私有方法-特权方法-对象公有方法-属性-构造器"><a href="#私有属性-私有方法-特权方法-对象公有方法-属性-构造器" class="headerlink" title="私有属性,私有方法,特权方法,对象公有方法(/属性),构造器"></a>私有属性,私有方法,特权方法,对象公有方法(/属性),构造器</h3><pre><code class="hljs js"><span class="hljs-comment">// 私有属性,私有方法,特权方法,对象公有方法(/属性),构造器</span>    <span class="hljs-keyword">var</span> Books2 = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">id,name,price</span>)</span>&#123;        <span class="hljs-comment">// 私有属性</span>        <span class="hljs-keyword">var</span> num = <span class="hljs-number">1</span>;        <span class="hljs-comment">// 私有方法</span>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkId</span>(<span class="hljs-params"></span>)</span>&#123;&#125;;        <span class="hljs-comment">// 特权方法</span>        <span class="hljs-built_in">this</span>.getName = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;;        <span class="hljs-built_in">this</span>.getPrice = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;;        <span class="hljs-built_in">this</span>.setName = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;;        <span class="hljs-built_in">this</span>.setPrice = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;;        <span class="hljs-comment">// 对象公有属性</span>        <span class="hljs-built_in">this</span>.id = id;        <span class="hljs-comment">// 对象公有方法</span>        <span class="hljs-built_in">this</span>.copy = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;;        <span class="hljs-comment">// 构造器</span>        <span class="hljs-built_in">this</span>.setName(name)        <span class="hljs-built_in">this</span>.setPrice(price)    &#125;    <span class="hljs-keyword">var</span> book2 = <span class="hljs-keyword">new</span> Books2(<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;通过作用域实现创建对象中的私有属性和方法&#x27;</span>,<span class="hljs-string">&#x27;20元&#x27;</span>);    <span class="hljs-built_in">console</span>.log(book2,<span class="hljs-string">&quot;book2&quot;</span>);<span class="hljs-comment">//此时发现book2中没有Books2中的私有属性和方法</span>    <span class="hljs-comment">//所以这里验证了一个有趣的例子,比如一个明星,他出名了会有很多人想了解他(就像获取类中的属性和方法一样),</span>    <span class="hljs-comment">//book2就相当于媒体,会把他的隐私(属性和方法)暴露出了,</span>    <span class="hljs-comment">//而他不想暴露出来的隐私,我们通过媒体是获取不到的,那么我们怎样得到他更多的隐私呢?可以通过他的家人,即特权方法</span>    <span class="hljs-comment">// 然而他内心深处的隐私如果他不告诉父母(私有的属性和方法不给特权方法用),我们是获取不到的(私有的属性和方法)</span>    <span class="hljs-comment">// 通过new关键字创建对象时,类外面通过点创建的属性和方法没有执行到,所以新创建的对象中无法获取他们,</span>    <span class="hljs-comment">//但是可以通过类来使用(通过Books2获取).</span>    <span class="hljs-comment">// 即:被称为</span>        <span class="hljs-comment">// 类静态公有属性(对象不能访问)</span>        Books2.isChinese = <span class="hljs-literal">true</span>;        <span class="hljs-comment">// 类静态公有方法(对象不能访问)</span>        Books2.restTime = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;new Time&quot;</span>);        &#125;;    <span class="hljs-comment">// 而通过prototype创建的方法在实例对象中,是可以通过this访问到的.</span>    <span class="hljs-comment">//(新创建的对象的__proto__指向了类的原型指向的对象)</span>    <span class="hljs-comment">// 即:被称为</span>        Books2.prototype = &#123;            <span class="hljs-comment">// 公有属性</span>            isJsBook:<span class="hljs-literal">false</span>,            <span class="hljs-comment">// 公有方法</span>            display:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;        &#125;;    <span class="hljs-comment">//验证</span>    <span class="hljs-keyword">var</span> b = <span class="hljs-keyword">new</span> Books2(<span class="hljs-string">&#x27;bb&#x27;</span>,<span class="hljs-string">&quot;javaScript设计模式bb&quot;</span>,<span class="hljs-string">&quot;bb元&quot;</span>)    <span class="hljs-built_in">console</span>.log(b.num,<span class="hljs-string">&quot;b.num&quot;</span>);<span class="hljs-comment">//undefined</span>    <span class="hljs-built_in">console</span>.log(b.isJsBook,<span class="hljs-string">&quot;b.isJsBook&quot;</span>);<span class="hljs-comment">//false</span>    <span class="hljs-built_in">console</span>.log(b.id,<span class="hljs-string">&quot;b.id&quot;</span>);<span class="hljs-comment">//bb</span>    <span class="hljs-built_in">console</span>.log(b.isChinese,<span class="hljs-string">&quot;b.isChinese&quot;</span>);<span class="hljs-comment">//undefined</span><span class="hljs-comment">// 通过类的自身访问:</span>    <span class="hljs-built_in">console</span>.log(Books2.isChinese,<span class="hljs-string">&quot;Books2.isChinese&quot;</span>);<span class="hljs-comment">//true</span>    Books2.restTime();<span class="hljs-comment">//new Time</span>    <span class="hljs-comment">//////////////////////////////////////////////</span>    <span class="hljs-comment">// 通过闭包的形式实现</span>    <span class="hljs-keyword">var</span> Books3 = (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;            <span class="hljs-comment">// 静态私有变量</span>            <span class="hljs-keyword">var</span> bookNum = <span class="hljs-number">0</span>;            <span class="hljs-comment">// 静态私有方法</span>            <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkBox</span> (<span class="hljs-params"></span>)</span>&#123;&#125;;            <span class="hljs-comment">// 返回构造函数</span>            <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">newId,newName,newPrice</span>)</span>&#123;                <span class="hljs-comment">// 私有变量</span>                <span class="hljs-keyword">var</span> name,price;                <span class="hljs-comment">// 私有方法</span>                <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkID</span>(<span class="hljs-params">id</span>)</span>&#123;                    <span class="hljs-comment">// 特权方法</span>                    <span class="hljs-built_in">this</span>.getName = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;;                    <span class="hljs-built_in">this</span>.getPrice = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;;                    <span class="hljs-built_in">this</span>.setName = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;;                    <span class="hljs-built_in">this</span>.setPrice = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;;                    <span class="hljs-comment">// 公有属性</span>                    <span class="hljs-built_in">this</span>.id = newId;                    <span class="hljs-comment">// 公有方法</span>                    <span class="hljs-built_in">this</span>.copy = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;;                    bookNum++;                    <span class="hljs-keyword">if</span>(bookNum&gt;<span class="hljs-number">100</span>)                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span> (<span class="hljs-string">&#x27;我们的书仅发版了100本&#x27;</span>);                    <span class="hljs-comment">//构造器</span>                    <span class="hljs-built_in">this</span>.setName(newName);                    <span class="hljs-built_in">this</span>.setPrice(newPrice);                &#125;;            &#125;;        &#125;)();        Books3.prototype = &#123;            <span class="hljs-comment">//静态公有属性</span>            isJsBook:<span class="hljs-literal">false</span>,            <span class="hljs-comment">// 静态公有方法</span>            display:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;        &#125;;</code></pre><h3 id="找位检察长-new关键字创建对象的安全模式"><a href="#找位检察长-new关键字创建对象的安全模式" class="headerlink" title="找位检察长  new关键字创建对象的安全模式"></a>找位检察长  new关键字创建对象的安全模式</h3><pre><code class="hljs js"><span class="hljs-comment">// 找位检察长  new关键字创建对象的安全模式</span>        <span class="hljs-keyword">var</span> Books4 = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">title,time,type</span>)</span>&#123;            <span class="hljs-built_in">this</span>.title = title;            <span class="hljs-built_in">this</span>.time = time;            <span class="hljs-built_in">this</span>.type = type;        &#125;;        <span class="hljs-comment">// 实例化一本书</span>        <span class="hljs-keyword">var</span> book4 = Books4(<span class="hljs-string">&#x27;javaScript&#x27;</span>,<span class="hljs-string">&#x27;2021&#x27;</span>,<span class="hljs-string">&#x27;js&#x27;</span>);        <span class="hljs-built_in">console</span>.log(book4);<span class="hljs-comment">//undefined</span>        <span class="hljs-comment">//why?为什么是undefined呢&gt;</span>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.title);<span class="hljs-comment">//javaScript</span>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.time);<span class="hljs-comment">//2021</span>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.type);<span class="hljs-comment">//js</span>    <span class="hljs-comment">// new关键字可以看做是对当前对象的不停的赋值,然而例子中没有用new关键字,</span>    <span class="hljs-comment">//直接执行了这个函数,而这个函数在全局作用域中执行了</span>    <span class="hljs-comment">// 所以在全局作用域中this指向的当前作用域对象自然是全局变量,即window对象,</span>    <span class="hljs-comment">//属性自然会被添加到了window上面了,</span>    <span class="hljs-comment">// 而book4是想要得到Books4最终执行的结果,Books4又没有return语句,自然Books4不会告诉你结果,自然是undefined.</span>        <span class="hljs-comment">//解决方案</span>        <span class="hljs-keyword">var</span> Books5 = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">title,time,type</span>)</span>&#123;            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span> <span class="hljs-keyword">instanceof</span> Books5)&#123;                <span class="hljs-built_in">this</span>.title = title;                <span class="hljs-built_in">this</span>.time = time;                <span class="hljs-built_in">this</span>.type = type;            &#125;<span class="hljs-keyword">else</span>&#123;                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Books5(title,time,type);            &#125;        &#125;;        <span class="hljs-keyword">var</span> book5 = Books5(<span class="hljs-string">&#x27;javaScript&#x27;</span>,<span class="hljs-string">&#x27;2021&#x27;</span>,<span class="hljs-string">&#x27;js&#x27;</span>);        <span class="hljs-comment">// 此时打印不难发现不写new关键字也能执行成功啦!</span>        <span class="hljs-built_in">console</span>.log(book5.title);<span class="hljs-comment">//javaScript</span>        <span class="hljs-built_in">console</span>.log(book5.time);<span class="hljs-comment">//2021</span>        <span class="hljs-built_in">console</span>.log(book5.type);<span class="hljs-comment">//js</span>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.title);<span class="hljs-comment">//javaScript</span>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.time);<span class="hljs-comment">//2021</span>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.type);<span class="hljs-comment">//js</span></code></pre><h2 id="继承-–-传宗接代"><a href="#继承-–-传宗接代" class="headerlink" title="继承 – 传宗接代"></a>继承 – 传宗接代</h2><p>继承问题怎么回答?</p><p>寄生包括有:<strong>类式继承,构造函数继承,组合式继承,原型式继承,寄生式继承,寄生组合式继承</strong>,这五种.</p><p><strong>类式继承</strong>:</p><p>​    类式继承是通过子类的原型prototype对父类的实例化(父类new出来的对象)来实现的;不能继承父类的方法,只能继承属性,继承父类属性的同时,如果某一个子类修改了父类的属性,那么其他的类将会受到影响,</p><p><strong>构造函数继承</strong>:</p><p>​    在子类的构造函数作用环境中执行一次父类的构造函数来实现的,不太符合代码的复用性原则</p><p><strong>组合式继承</strong>:就是将类式继承和构造函数继承两者的优点相结合.</p><p><strong>组合式继承的缺点</strong>:<br>    // 在我们使用子类构造函数继承父类构造函数时,执行了一遍父类的构造函数,而在使用子类的原型进行类式继承时,又执行了一遍父类的构造函数,<br>    // 因此父类的构造函数被调用了两遍,这样是存在一定的缺陷的</p><p><strong>原型式继承:</strong></p><p>​    对类式继承的封装,有类式继承的缺点,然而有了寄生式继承</p><p><strong>寄生式继承:</strong></p><p><strong>寄生组合式继承:</strong></p><p><strong>对于类的解释:</strong></p><p>​    // 每个类都有三个部分,第一是构造函数内的,这是供实例化对象复制用的,</p><p>​     // 第二部分是构造函数外的,直接通过点语法添加的,这是供类使用的,实例化对象是访问不到的;</p><p>​      // 第三部分是类的原型中的,实例化对象可以通过原型链间接的访问到,也是为所有实例化对象公用的,然而在继承中所涉及的不仅仅是一个对象;</p><h3 id="类式继承-–-子类的原型对象"><a href="#类式继承-–-子类的原型对象" class="headerlink" title="类式继承 – 子类的原型对象"></a>类式继承 – 子类的原型对象</h3><pre><code class="hljs js"><span class="hljs-comment">// 子类的原型对象 -- 类式继承</span>            <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SupperClass</span>(<span class="hljs-params"></span>)</span>&#123;                <span class="hljs-built_in">this</span>.supperValue = <span class="hljs-literal">true</span>;            &#125;;            <span class="hljs-comment">// 为父类添加公用方法</span>            SupperClass.prototype.getSupperValue = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.supperValue;            &#125;;            <span class="hljs-comment">// 声明子类</span>            <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SubClass</span>(<span class="hljs-params"></span>)</span>&#123;                <span class="hljs-built_in">this</span>.subValue = <span class="hljs-literal">false</span>;            &#125;;            <span class="hljs-comment">// 继承父类</span>            SubClass.prototype = <span class="hljs-keyword">new</span> SupperClass();            <span class="hljs-comment">// 为子类添加公有方法</span>            SubClass.prototype.getSubValue = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.subValue;            &#125;;            <span class="hljs-keyword">var</span> instance = <span class="hljs-keyword">new</span> SubClass();            <span class="hljs-built_in">console</span>.log(instance.getSupperValue(),<span class="hljs-string">&#x27;getSupperValue&#x27;</span>);<span class="hljs-comment">//true</span>            <span class="hljs-built_in">console</span>.log(instance.getSubValue(),<span class="hljs-string">&#x27;getSubValue&#x27;</span>);<span class="hljs-comment">//false</span>            <span class="hljs-comment">// 可以通过instanceof来检测某个对象是否是某个类(对象)的实例</span>            <span class="hljs-built_in">console</span>.log(instance <span class="hljs-keyword">instanceof</span> SupperClass);<span class="hljs-comment">//true</span>            <span class="hljs-built_in">console</span>.log(instance <span class="hljs-keyword">instanceof</span> SubClass);<span class="hljs-comment">//true</span>            <span class="hljs-built_in">console</span>.log(SubClass <span class="hljs-keyword">instanceof</span> SupperClass);<span class="hljs-comment">//false</span>    <span class="hljs-comment">// why?SubClass既然是继承了SupperClass,为什么上例SubClass instanceof SupperClass打印出来的结果是false呢?</span>    <span class="hljs-comment">// 继承父类的操作是将new SupperClass()----SupperClass的实例赋值给了SubClass的原型prototype,</span>    <span class="hljs-comment">//即SubClass.prototype = new SupperClass();</span>    <span class="hljs-comment">// 所以说是SubClass.prototype继承了SupperClass</span>            <span class="hljs-built_in">console</span>.log(SubClass.prototype <span class="hljs-keyword">instanceof</span> SupperClass);<span class="hljs-comment">//true</span>            <span class="hljs-comment">//这也是类式继承的一个特点,所有创建的对象都是都是Object的实例</span>            <span class="hljs-built_in">console</span>.log(instance <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>);<span class="hljs-comment">//true</span>    <span class="hljs-comment">// 类式继承的两个缺点:</span>    <span class="hljs-comment">// 其一:由于子类是通过原型prototype对父类进行了实例化,继承了父类,</span>    <span class="hljs-comment">//所以父类中的数据类型要是引用类型,就会在子类中被所有的实例共用,</span>    <span class="hljs-comment">// 即:如果某一个子类修改了父类的共有属性,那么这将直接影响其他父类</span>            <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SupperClass1</span> (<span class="hljs-params"></span>)</span>&#123;                <span class="hljs-built_in">this</span>.books = [<span class="hljs-string">&quot;javaScript&quot;</span>,<span class="hljs-string">&quot;js&quot;</span>,<span class="hljs-string">&quot;css&quot;</span>];            &#125;;            <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SubClass1</span> (<span class="hljs-params"></span>)</span>&#123;&#125;;            SubClass1.prototype = <span class="hljs-keyword">new</span> SupperClass1();            <span class="hljs-keyword">var</span> instance1 = <span class="hljs-keyword">new</span> SubClass1();            <span class="hljs-keyword">var</span> instance2 = <span class="hljs-keyword">new</span> SubClass1();            <span class="hljs-built_in">console</span>.log(instance2.books);<span class="hljs-comment">//[&quot;javaScript&quot;, &quot;js&quot;, &quot;css&quot;]</span>            instance1.books.push(<span class="hljs-string">&quot;设计模式&quot;</span>);            <span class="hljs-built_in">console</span>.log(instance2.books);<span class="hljs-comment">//[&quot;javaScript&quot;, &quot;js&quot;, &quot;css&quot;,&quot;设计模式&quot;]</span></code></pre><h3 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h3><pre><code class="hljs js"><span class="hljs-comment">// 构造函数继承</span>            <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SupperClass2</span>(<span class="hljs-params">id</span>)</span>&#123;<span class="hljs-comment">//声明父类</span>                <span class="hljs-comment">//引用类型共有属性</span>                <span class="hljs-built_in">this</span>.books = [<span class="hljs-string">&quot;javaScript&quot;</span>,<span class="hljs-string">&quot;html&quot;</span>,<span class="hljs-string">&quot;css&quot;</span>];                <span class="hljs-comment">//值类型共有属性</span>                <span class="hljs-built_in">this</span>.id = id;            &#125;;            SupperClass2.prototype.showBooks = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.books,<span class="hljs-string">&quot;this.books&quot;</span>);            &#125;;            <span class="hljs-comment">//声明子类</span>            <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SubClass2</span>(<span class="hljs-params">id</span>)</span>&#123;                <span class="hljs-comment">//继承父类</span>                SupperClass2.call(<span class="hljs-built_in">this</span>,id);            &#125;;            <span class="hljs-comment">//创建两个子类的实例</span>            <span class="hljs-keyword">var</span> instance3 = <span class="hljs-keyword">new</span> SubClass2(<span class="hljs-number">10</span>);            <span class="hljs-keyword">var</span> instance4 = <span class="hljs-keyword">new</span> SubClass2(<span class="hljs-number">11</span>);            instance3.books.push(<span class="hljs-string">&quot;设计模式&quot;</span>);            <span class="hljs-built_in">console</span>.log(instance3.books,<span class="hljs-string">&quot;instance3.books&quot;</span>);            <span class="hljs-built_in">console</span>.log(instance3.id,<span class="hljs-string">&quot;instance3.id&quot;</span>);            <span class="hljs-built_in">console</span>.log(instance4.books,<span class="hljs-string">&quot;instance4.books&quot;</span>);            <span class="hljs-built_in">console</span>.log(instance4.id,<span class="hljs-string">&quot;instance4.id&quot;</span>);<span class="hljs-comment">//SupperClass2.call(this,id)这条语句是构造函数继承的精华,由于call这个方法改变了this指向,</span><span class="hljs-comment">// 因为在子类中对SupperClass2调用了这个方法就是将子类中的方法在父类中执行了一遍,由于父类中是给this绑定属性的,</span><span class="hljs-comment">//因此子类也自然继承了父类的公共属性</span><span class="hljs-comment">// 但是,由于这种继承没有涉及到prototype原型,所以父类的原型方法自然不会被继承,</span><span class="hljs-comment">//而如果想要被子类继承就必须要放在构造函数中,</span><span class="hljs-comment">// 这样的话每个创建出来的实例都拥有一份自己单独的而不能共用,这样就违背了代码复用的原则,因此有了组合式继承</span></code></pre><h3 id="组合式继承-类式继承和构造函数的优点相结合"><a href="#组合式继承-类式继承和构造函数的优点相结合" class="headerlink" title="组合式继承(类式继承和构造函数的优点相结合)"></a>组合式继承(类式继承和构造函数的优点相结合)</h3><p>// 类式继承是通过子类的原型prototype对父类的父类的实例化(父类new出来的对象)来实现的,</p><p> // 构造函数是通过在子类的构造函数作用环境中执行一次父类的构造函数来实现的.</p><pre><code class="hljs js"><span class="hljs-comment">// 组合式继承</span>            <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SupperClass3</span>(<span class="hljs-params">name</span>)</span>&#123;                <span class="hljs-comment">//值类型共有属性</span>                <span class="hljs-built_in">this</span>.name = name ;                <span class="hljs-comment">// 引用类型共有属性</span>                <span class="hljs-built_in">this</span>.books = [<span class="hljs-string">&quot;javaScript&quot;</span>,<span class="hljs-string">&quot;html&quot;</span>,<span class="hljs-string">&quot;css&quot;</span>];            &#125;;            SupperClass3.prototype.getName = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name,<span class="hljs-string">&quot;getName()&quot;</span>);            &#125;;            <span class="hljs-comment">// 声明子类</span>            <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SubClass3</span>(<span class="hljs-params">name,time</span>)</span>&#123;                <span class="hljs-comment">// 构造函数式继承父类属性</span>                SupperClass3.call(<span class="hljs-built_in">this</span>,name);                <span class="hljs-comment">// 子类中新增的共有属性</span>                <span class="hljs-built_in">this</span>.time = time;            &#125;;            <span class="hljs-comment">// 类式继承---子类的原型继承父类</span>            SubClass3.prototype = <span class="hljs-keyword">new</span> SupperClass3();            <span class="hljs-comment">// 子类原型方法</span>            SubClass3.prototype.getTime = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.time,<span class="hljs-string">&quot;getTime()&quot;</span>);            &#125;;            <span class="hljs-comment">// 原理:</span>            <span class="hljs-comment">// 在子类的构造函数中执行父类的构造函数,在子类的原型上实例化父类,这样的组合模式就是组合式继承.</span>            <span class="hljs-keyword">var</span> instance5 = <span class="hljs-keyword">new</span> SubClass3(<span class="hljs-string">&quot;js Book&quot;</span>,<span class="hljs-string">&quot;2021&quot;</span>);            instance5.books.push(<span class="hljs-string">&quot;设计模式&quot;</span>);            <span class="hljs-built_in">console</span>.log(instance5.books,<span class="hljs-string">&quot;instance5.books&quot;</span>);<span class="hljs-comment">//[&quot;javaScript&quot;,&quot;html&quot;,&quot;css&quot;,&quot;设计模式&quot;]</span>            instance5.getName();<span class="hljs-comment">//js Book</span>            instance5.getTime();<span class="hljs-comment">//2021</span>            <span class="hljs-keyword">var</span> instance6 = <span class="hljs-keyword">new</span> SubClass3(<span class="hljs-string">&quot;css Book&quot;</span>,<span class="hljs-string">&quot;2022&quot;</span>);            <span class="hljs-built_in">console</span>.log(instance6.books,<span class="hljs-string">&quot;instance6.books&quot;</span>);<span class="hljs-comment">//[&quot;javaScript&quot;,&quot;html&quot;,&quot;css&quot;]</span>            instance6.getName();<span class="hljs-comment">//css Book</span>            instance6.getTime();<span class="hljs-comment">//2022</span><span class="hljs-comment">///////////////////////////////////////////</span><span class="hljs-comment">// 组合式继承的缺点:</span>    <span class="hljs-comment">// 在我们使用子类构造函数继承父类构造函数时,执行了一遍父类的构造函数,而在使用子类的原型进行类式继承时,</span>    <span class="hljs-comment">//又执行了一遍父类的构造函数,</span>    <span class="hljs-comment">// 因此父类的构造函数被调用了两遍,这样是存在一定的缺陷的</span><span class="hljs-comment">//////////////////////////////////////////</span></code></pre><h3 id="原型式继承–洁净的继承者"><a href="#原型式继承–洁净的继承者" class="headerlink" title="原型式继承–洁净的继承者"></a>原型式继承–洁净的继承者</h3><pre><code class="hljs js"><span class="hljs-comment">// 原型式继承</span>            <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inheritObject</span>(<span class="hljs-params">o</span>)</span>&#123;                <span class="hljs-comment">//声明一个过渡函数对象</span>                <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">F</span>(<span class="hljs-params"></span>)</span>&#123;&#125;;                <span class="hljs-comment">// 过渡对象的原型继承父类</span>                F.prototype = o;                <span class="hljs-comment">// 返回过渡对象对的实例,该实例的原型继承了父类对象</span>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> F();            &#125;;            <span class="hljs-keyword">var</span> book6 = &#123;                name:<span class="hljs-string">&quot;js Book&quot;</span>,                alikeBook:[<span class="hljs-string">&quot;css Book&quot;</span>,<span class="hljs-string">&quot;html Book&quot;</span>]            &#125;;            <span class="hljs-keyword">var</span> newBook = inheritObject(book6);            newBook.name = <span class="hljs-string">&quot;ajax Book&quot;</span>            newBook.alikeBook.push(<span class="hljs-string">&quot;xml Book&quot;</span>);            <span class="hljs-keyword">var</span> otherBook = inheritObject(book6);            otherBook.name = <span class="hljs-string">&quot;flash Book&quot;</span>            otherBook.alikeBook.push(<span class="hljs-string">&quot;as Book&quot;</span>);            <span class="hljs-built_in">console</span>.log(otherBook.name,<span class="hljs-string">&quot;otherBook.name&quot;</span>);            <span class="hljs-built_in">console</span>.log(otherBook.alikeBook,<span class="hljs-string">&quot;otherBook.alikeBook&quot;</span>);            <span class="hljs-built_in">console</span>.log(newBook.name,<span class="hljs-string">&quot;newBook.name&quot;</span>);            <span class="hljs-built_in">console</span>.log(newBook.alikeBook,<span class="hljs-string">&quot;newBook.alikeBook&quot;</span>);            <span class="hljs-built_in">console</span>.log(book6.name,<span class="hljs-string">&quot;book6.name&quot;</span>);            <span class="hljs-built_in">console</span>.log(book6.alikeBook,<span class="hljs-string">&quot;book6.alikeBook&quot;</span>);            <span class="hljs-comment">// 对类式继承的封装,有类式继承的缺点,然而有了寄生式继承</span></code></pre><h3 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h3><pre><code class="hljs js"><span class="hljs-comment">// 寄生式继承</span>            <span class="hljs-keyword">var</span> book7 = &#123;                name:<span class="hljs-string">&quot;js Book&quot;</span>,                alikeBook:[<span class="hljs-string">&quot;css Book&quot;</span>,<span class="hljs-string">&quot;html Book&quot;</span>]            &#125;;            <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createBook</span> (<span class="hljs-params">obj</span>)</span>&#123;                <span class="hljs-keyword">var</span> o = <span class="hljs-keyword">new</span> inheritObject(obj);                <span class="hljs-comment">// 拓展新对象</span>                o.getName = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;                    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);                &#125;;                <span class="hljs-comment">// 返回拓展后的新对象</span>                <span class="hljs-keyword">return</span> o;            &#125;</code></pre><h3 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h3><pre><code class="hljs js"><span class="hljs-comment">/**</span><span class="hljs-comment">          * 寄生式继承  继承原型</span><span class="hljs-comment">          * 传递参数SubClass 子类</span><span class="hljs-comment">          *  传递参数SupperClass 父类</span><span class="hljs-comment">          * */</span>          <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inheritPrototype</span> (<span class="hljs-params">SubClass4,SupperClass4</span>)</span>&#123;             <span class="hljs-comment">// 复制一份父类的原型副本保存在变量中</span>             <span class="hljs-keyword">var</span> p = inheritObject(SupperClass4.prototype);             <span class="hljs-comment">//修正是因为重写子类原型会导致子类的constructor属性被修改</span>             p.constructor = SubClass4;             <span class="hljs-comment">// 设置子类的原型</span>             SubClass4.prototype = p;         &#125;;         <span class="hljs-comment">// 测试一下:</span>         <span class="hljs-comment">// 定义父类</span>         <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SupperClass4</span>(<span class="hljs-params">name</span>)</span>&#123;             <span class="hljs-built_in">this</span>.name = name;             <span class="hljs-built_in">this</span>.color = [<span class="hljs-string">&quot;red&quot;</span>,<span class="hljs-string">&quot;blue&quot;</span>,<span class="hljs-string">&quot;green&quot;</span>];         &#125;;         <span class="hljs-comment">// 定义父类的原型方法</span>         SupperClass4.prototype.getName = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;             <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);         &#125;;         <span class="hljs-comment">// 定义子类</span>         <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SubClass4</span>(<span class="hljs-params">name,time</span>)</span>&#123;             <span class="hljs-comment">// 构造函数式继承</span>             SupperClass4.call(<span class="hljs-built_in">this</span>,name);             <span class="hljs-comment">// 子类新增属性</span>             <span class="hljs-built_in">this</span>.time = time;         &#125;;         <span class="hljs-comment">// 寄生式继承父类原型</span>         inheritPrototype(SubClass4,SupperClass4);         <span class="hljs-comment">// 子类新增原型方法</span>         SubClass4.prototype.getTime = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;             <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.time);         &#125;;         <span class="hljs-comment">// 创建两个测试方法</span>         <span class="hljs-keyword">var</span> instance7 = <span class="hljs-keyword">new</span> SubClass4(<span class="hljs-string">&quot;js Book&quot;</span>,<span class="hljs-string">&quot;2021&quot;</span>);         <span class="hljs-keyword">var</span> instance8 = <span class="hljs-keyword">new</span> SubClass4(<span class="hljs-string">&quot;css Book&quot;</span>,<span class="hljs-string">&quot;2022&quot;</span>);         instance7.color.push(<span class="hljs-string">&quot;black&quot;</span>);         <span class="hljs-built_in">console</span>.log(instance7.color,<span class="hljs-string">&quot;instance7.color&quot;</span>);         <span class="hljs-built_in">console</span>.log(instance8.color,<span class="hljs-string">&quot;instance8.color&quot;</span>);         instance7.getTime();<span class="hljs-comment">//</span>         instance8.getTime();<span class="hljs-comment">//</span>         instance7.getName();<span class="hljs-comment">//</span>         instance8.getName();<span class="hljs-comment">//</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字符串常用方法</title>
    <link href="/2022/03/13/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <url>/2022/03/13/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="字符串常用方法："><a href="#字符串常用方法：" class="headerlink" title="字符串常用方法："></a>字符串常用方法：</h3><p>let str = “abcdecgtuctry”</p><p>获取字符串索引:</p><p>str.indexOf(searchString,startIndex);  返回字符串第一次出现的位置，从startIndex开始查找，找不到时返回-1;当startIndex为0是可以省略第二个参数</p><p>字符串截取:</p><p>str.substring(start,end);  两个参数都为正数，返回值：[start,end) 也就是说<strong>返回从start到end-1的字符</strong></p><p>str.substr(start,length);  start参数可正可负，负数代表从右截取,<strong>从start开始,返回length个字符</strong></p><p>字符串转数组:</p><p>str.split(separator,limit);  参数1指定字符串或正则，参数2指定数组的最大长度,str.split(“c”);以c截取字符串;str.splitit();截取每个字符串成数组的每一项;</p><h3 id="数组常用方法"><a href="#数组常用方法" class="headerlink" title="数组常用方法:"></a>数组常用方法:</h3><p>数组转字符串</p><p>　　　　arr.join(分隔符)      以,连接</p><p>　　　　arr.join(‘’)            无缝连接</p><p>　　　　arr.join(‘-‘)          以-连接</p><p>　　　　arr.join(‘<span>‘ + str + ‘</span>‘)       以表达式连接</p><p>截取字符串:</p><p>arr.slice(start,end);  两个参数可正可负，负值代表从右截取，返回值：[start,end) 也就是说返回从start到end-1的字符</p><p>JSON.stringify();对象转字符串</p><p>JSON.parse();字符串转对象</p>]]></content>
    
    
    
    <tags>
      
      <tag>备忘录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>根据某个键值,删除数组中的某一项</title>
    <link href="/2022/03/10/%E6%A0%B9%E6%8D%AE%E6%9F%90%E4%B8%AA%E9%94%AE%E5%80%BC-%E5%88%A0%E9%99%A4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%90%E4%B8%80%E9%A1%B9/"/>
    <url>/2022/03/10/%E6%A0%B9%E6%8D%AE%E6%9F%90%E4%B8%AA%E9%94%AE%E5%80%BC-%E5%88%A0%E9%99%A4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%90%E4%B8%80%E9%A1%B9/</url>
    
    <content type="html"><![CDATA[<h3 id="根据某个键值-删除数组中的某一项"><a href="#根据某个键值-删除数组中的某一项" class="headerlink" title="根据某个键值-删除数组中的某一项"></a>根据某个键值-删除数组中的某一项</h3><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [    &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">value</span>:<span class="hljs-string">&quot;张三&quot;</span>&#125;,    &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">2</span>,<span class="hljs-attr">value</span>:<span class="hljs-string">&quot;小明&quot;</span>&#125;,    &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">3</span>,<span class="hljs-attr">value</span>:<span class="hljs-string">&quot;小红&quot;</span>&#125;];</code></pre><p>首先定义一个方法：</p><pre><code class="hljs js">removeByVal: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">array, val</span>) </span>&#123;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;        <span class="hljs-keyword">if</span>(array[i].value == val) &#123;            array.splice(i, <span class="hljs-number">1</span>);            <span class="hljs-keyword">break</span>;        &#125;    &#125;&#125;<span class="hljs-comment">//要删除数组中 value == &quot;张三&quot; 这一项</span>removeByVal(arr,<span class="hljs-string">&quot;张三&quot;</span>);</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>备忘录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>模拟车辆充电过程动画</title>
    <link href="/2022/03/09/%E6%A8%A1%E6%8B%9F%E8%BD%A6%E8%BE%86%E5%85%85%E7%94%B5%E8%BF%87%E7%A8%8B%E5%8A%A8%E7%94%BB/"/>
    <url>/2022/03/09/%E6%A8%A1%E6%8B%9F%E8%BD%A6%E8%BE%86%E5%85%85%E7%94%B5%E8%BF%87%E7%A8%8B%E5%8A%A8%E7%94%BB/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/2021/jzrecord_2021-12-16.gif"></p><p>背景图需要是透明的才能有效果，其实就是利用的css，给一个盒子设置颜色，然后让它的宽度逐渐放大的效果</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>车辆充电demo<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">        <span class="hljs-comment">/* 背景充电动画效果  */</span></span><span class="css">        <span class="hljs-selector-class">.charging-vehicle-wrap</span> &#123;</span>            height: 127px;            margin-left: 10px;            width: 271px;            display: inline-block;            vertical-align: top;        &#125;<span class="css">        <span class="hljs-selector-class">.charging-vehicle-wrap</span> <span class="hljs-selector-class">.charging-vehicle</span> &#123;</span>            width: 100%;            height: 104px;            position: relative;            margin-top: 8px;        &#125;<span class="css">        <span class="hljs-selector-class">.charging-vehicle-image</span> &#123;</span>            position: absolute;            z-index: 2;            left: 0;            top: 0;            width: 100%;            height: 100%;            line-height: 87px;            font-size: 36px;            text-align: center;<span class="css">            <span class="hljs-selector-tag">color</span>: <span class="hljs-selector-id">#2274c7</span>;</span><span class="css">            <span class="hljs-comment">/* 车辆充电背景图 */</span></span>            background: url(&quot;../img/2021/charger.png&quot;) no-repeat 50%;            background-size: cover;        &#125;<span class="css">        <span class="hljs-selector-class">.charging-progress</span> &#123;</span>            position: absolute;            z-index: 1;            left: 0;            bottom: 0;            height: 100%;        &#125;<span class="css">        <span class="hljs-keyword">@keyframes</span> animate-shine &#123;</span>            0% &#123;<span class="css">                <span class="hljs-selector-tag">opacity</span>: 0<span class="hljs-selector-class">.4</span>;</span>                width: 0;            &#125;            100% &#123;                opacity: 1;                width: 100%;            &#125;        &#125;<span class="css">        <span class="hljs-selector-class">.charging-progress</span><span class="hljs-selector-pseudo">:after</span> &#123;</span>            content: &#x27;&#x27;;            opacity: 0;            position: absolute;            top: 0;            right: 0;            bottom: 0;            left: 0;<span class="css">            <span class="hljs-selector-tag">background-color</span>: <span class="hljs-selector-id">#4aaef8</span>;</span>            border-radius: 5px;            animation: animate-shine 2s ease-out infinite;        &#125;<span class="css">        <span class="hljs-comment">/* 背景充电动画效果end  */</span></span><span class="css">        <span class="hljs-selector-class">.charging-vehicle-wrap</span> <span class="hljs-selector-class">.charging-vehicle-power</span> &#123;</span>            text-align: center;            line-height: 34px;        &#125;<span class="css">        <span class="hljs-selector-class">.charging-vehicle-wrap</span> <span class="hljs-selector-class">.charging-vehicle-power</span> <span class="hljs-selector-class">.key</span> &#123;</span><span class="css">            <span class="hljs-selector-tag">color</span>: <span class="hljs-selector-id">#8d9098</span>;</span>            margin-top: -5px;        &#125;<span class="css">        <span class="hljs-selector-class">.charging-vehicle-wrap</span> <span class="hljs-selector-class">.charging-vehicle-power</span> &#123;</span>            text-align: center;            line-height: 34px;            font-size: 18px;            font-weight: bold;            margin-top: 10px;        &#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;charging-vehicle-wrap&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;charging-vehicle&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;charging-vehicle-image&quot;</span>&gt;</span>50%<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;charging-progress&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 50%;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;charging-vehicle-power&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size: 18px; font-weight:  bold; margin-top:  10px;&quot;</span>&gt;</span>180 kW•h<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;key&quot;</span>&gt;</span>已充电量<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">        <span class="hljs-keyword">let</span> progress1 = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;charging-progress&#x27;</span>)[<span class="hljs-number">0</span>]</span><span class="javascript">        <span class="hljs-keyword">let</span> progress2 = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;charging-vehicle-image&#x27;</span>)[<span class="hljs-number">0</span>]</span><span class="javascript">        <span class="hljs-built_in">console</span>.log(progress1, progress2)</span><span class="javascript">        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><span class="javascript">            progress2.innerHTML = <span class="hljs-string">&#x27;90%&#x27;</span></span><span class="javascript">            progress1.style.width = <span class="hljs-string">&#x27;90%&#x27;</span></span>        &#125;, 3000)    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>备忘录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>获取两个色值之间的颜色值</title>
    <link href="/2022/03/05/%E8%8E%B7%E5%8F%96%E4%B8%A4%E4%B8%AA%E8%89%B2%E5%80%BC%E4%B9%8B%E9%97%B4%E7%9A%84%E9%A2%9C%E8%89%B2%E5%80%BC/"/>
    <url>/2022/03/05/%E8%8E%B7%E5%8F%96%E4%B8%A4%E4%B8%AA%E8%89%B2%E5%80%BC%E4%B9%8B%E9%97%B4%E7%9A%84%E9%A2%9C%E8%89%B2%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<p>// 需求:值为100-200时，取两个颜色之间的颜色和值进行对应,200-300取另外两个颜色之间的颜色和值对应<br><img src="/img/2021/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20211216215257.jpg" alt="在这里插入图片描述"></p><pre><code class="hljs js">&lt;script&gt;    <span class="hljs-comment">/////////////////////////////////////////////////////////</span>    <span class="hljs-comment">// 此方法把两个色值分成100份,可以取颜色值对应数据值,设置颜色</span>    <span class="hljs-keyword">var</span> parseColor = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">hexStr</span>) </span>&#123;        <span class="hljs-keyword">return</span> hexStr.length === <span class="hljs-number">4</span> ? hexStr.substr(<span class="hljs-number">1</span>).split(<span class="hljs-string">&#x27;&#x27;</span>).map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-number">0x11</span> * <span class="hljs-built_in">parseInt</span>(s, <span class="hljs-number">16</span>); &#125;) : [hexStr.substr(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>), hexStr.substr(<span class="hljs-number">3</span>, <span class="hljs-number">2</span>), hexStr.substr(<span class="hljs-number">5</span>, <span class="hljs-number">2</span>)].map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">parseInt</span>(s, <span class="hljs-number">16</span>); &#125;)    &#125;;    <span class="hljs-comment">// zero-pad 1 digit to 2</span>    <span class="hljs-keyword">var</span> pad = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) </span>&#123;        <span class="hljs-keyword">return</span> (s.length === <span class="hljs-number">1</span>) ? <span class="hljs-string">&#x27;0&#x27;</span> + s : s;    &#125;;    <span class="hljs-keyword">var</span> gradientColors = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">start, end, steps, gamma</span>) </span>&#123;        <span class="hljs-keyword">var</span> i, j, ms, me, output = [], so = [];        gamma = gamma || <span class="hljs-number">1</span>;        <span class="hljs-keyword">var</span> normalize = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">channel</span>) </span>&#123;            <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.pow(channel / <span class="hljs-number">255</span>, gamma);        &#125;;        start = parseColor(start).map(normalize);        end = parseColor(end).map(normalize);        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; steps; i++) &#123;            ms = i / (steps - <span class="hljs-number">1</span>);            me = <span class="hljs-number">1</span> - ms;            <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++) &#123;                so[j] = pad(<span class="hljs-built_in">Math</span>.round(<span class="hljs-built_in">Math</span>.pow(start[j] * me + end[j] * ms, <span class="hljs-number">1</span> / gamma) * <span class="hljs-number">255</span>).toString(<span class="hljs-number">16</span>));            &#125;            output.push(<span class="hljs-string">&#x27;#&#x27;</span> + so.join(<span class="hljs-string">&#x27;&#x27;</span>));        &#125;        <span class="hljs-keyword">return</span> output;    &#125;;    <span class="hljs-comment">// try if it works</span>    <span class="hljs-built_in">console</span>.log(gradientColors(<span class="hljs-string">&#x27;#00ff00&#x27;</span>, <span class="hljs-string">&#x27;#ff0000&#x27;</span>, <span class="hljs-number">100</span>));    <span class="hljs-built_in">console</span>.log(gradientColors(<span class="hljs-string">&#x27;#000&#x27;</span>, <span class="hljs-string">&#x27;#fff&#x27;</span>, <span class="hljs-number">100</span>, <span class="hljs-number">2.2</span>));    <span class="hljs-comment">// 需求:100-200取两个颜色之间的颜色和值对应,200-300取另外两个颜色之间的颜色和值对应</span>    str = gradientColors(<span class="hljs-string">&#x27;#fc4b6b&#x27;</span>, <span class="hljs-string">&#x27;#21b2f5&#x27;</span>, <span class="hljs-number">100</span>)[<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;返回数据的值&#x27;</span> - <span class="hljs-number">1</span>)]        <span class="hljs-comment">/////////////////////////////////////////////////////////</span>&lt;/script&gt;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>备忘录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>echarts设置表格最大值,最小值的扩展值</title>
    <link href="/2021/08/01/echarts%E8%AE%BE%E7%BD%AE%E8%A1%A8%E6%A0%BC%E6%9C%80%E5%A4%A7%E5%80%BC,%E6%9C%80%E5%B0%8F%E5%80%BC%E7%9A%84%E6%89%A9%E5%B1%95%E5%80%BC/"/>
    <url>/2021/08/01/echarts%E8%AE%BE%E7%BD%AE%E8%A1%A8%E6%A0%BC%E6%9C%80%E5%A4%A7%E5%80%BC,%E6%9C%80%E5%B0%8F%E5%80%BC%E7%9A%84%E6%89%A9%E5%B1%95%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<h3 id="Echarts设置表格最大值-最小值的扩展值"><a href="#Echarts设置表格最大值-最小值的扩展值" class="headerlink" title="Echarts设置表格最大值,最小值的扩展值"></a>Echarts设置表格最大值,最小值的扩展值</h3><h4 id="先看需求"><a href="#先看需求" class="headerlink" title="先看需求:"></a><strong>先看需求:</strong></h4><p><strong>图1:</strong></p><p><img src="/img/2021/echarts2.png"></p><p><strong>图2:</strong></p><p><img src="/img/2021/echarts1.png"></p><p><strong>需求:</strong></p><p>将图1改成图2的形式展示,不展示负值</p><p><strong>代码(及解决方案):</strong></p><p><img src="/img/2021/echarts3.png"></p><p><strong>解决方案入下:</strong></p><p>设置boundaryGap属性[‘0’,’0’]或百分比,和threshold属性有冲突,最终结果去掉此属性,添加boundaryGap属性成功解决问题.</p><p><strong>帮助链接:</strong></p><p><a href="https://blog.csdn.net/qq_44687755/article/details/97938265">https://blog.csdn.net/qq_44687755/article/details/97938265</a></p>]]></content>
    
    
    <categories>
      
      <category>备忘录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>备忘录</tag>
      
      <tag>echarts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Switch使用注意</title>
    <link href="/2021/07/31/Switch%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F/"/>
    <url>/2021/07/31/Switch%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="switch进行判断是全等的判断"><a href="#switch进行判断是全等的判断" class="headerlink" title="switch进行判断是全等的判断"></a>switch进行判断是全等的判断</h3><p>先看一组写法：</p><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = [<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>]str.map(<span class="hljs-function">(<span class="hljs-params">item,index</span>)=&gt;</span>&#123;    <span class="hljs-keyword">switch</span> (item) &#123;        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:            str[index] = <span class="hljs-string">&quot;不生效&quot;</span>;            <span class="hljs-keyword">break</span>;         <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:            str[index] = <span class="hljs-string">&quot;哈哈&quot;</span>;            <span class="hljs-keyword">break</span>;         <span class="hljs-keyword">default</span>:             str[index] = <span class="hljs-string">&quot;期待周末~&quot;</span>;    &#125; &#125;)<span class="hljs-built_in">console</span>.log(str,<span class="hljs-string">&quot;str&quot;</span>)</code></pre><p>switch它是严格匹配的，所以case的值 一定要明确是字符串还是数字</p><p>switch不能这样用的，<strong>switch是===对比的</strong>，类型就不一样了，当然执行执行default</p><p>case ‘1’,稍作改动就会生效,在获取到接口返回值的时候容易出错,进行switch判断,容易把类型搞错</p>]]></content>
    
    
    <categories>
      
      <category>备忘录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>备忘录</tag>
      
      <tag>angular</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>angular中使用ng-repeat报错</title>
    <link href="/2021/07/30/angular%E4%B8%AD%E4%BD%BF%E7%94%A8ng-repeat%E6%8A%A5%E9%94%99/"/>
    <url>/2021/07/30/angular%E4%B8%AD%E4%BD%BF%E7%94%A8ng-repeat%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<h3 id="angular中使用ng-repeat报错"><a href="#angular中使用ng-repeat报错" class="headerlink" title="angular中使用ng-repeat报错"></a>angular中使用ng-repeat报错</h3><p><strong>Angular项目 Error: [ngRepeat:dupes] Duplicates in a repeater are not allowed.报错</strong></p><p>在angular的项目里，一不小心就会出现这个错误[ngRepeat:dupes] ，这个问题是因为内容有重复引起的解决起来挺简单</p><p>在对应的ng-repeat指令中增加track by $index，意思是用索引值识别</p><p>例：  </p><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">ng-repeat</span>=<span class="hljs-string">&quot;item in ages track by $index&quot;</span>&gt;</span></span><span class="xml">　　</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></code></pre><p><img src="/img/2021/angular%E6%8A%A5%E9%94%99.png" alt="angular使用ngRepeat报错"></p>]]></content>
    
    
    <categories>
      
      <category>备忘录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>备忘录</tag>
      
      <tag>angular</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信小程序问题网站收藏</title>
    <link href="/2021/06/18/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%97%AE%E9%A2%98%E7%BD%91%E7%AB%99%E6%94%B6%E8%97%8F/"/>
    <url>/2021/06/18/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%97%AE%E9%A2%98%E7%BD%91%E7%AB%99%E6%94%B6%E8%97%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="微信小程序问题网站收藏"><a href="#微信小程序问题网站收藏" class="headerlink" title="微信小程序问题网站收藏:"></a><strong>微信小程序问题网站收藏:</strong></h3><p>微信公众平台: <a href="https://mp.weixin.qq.com/">https://mp.weixin.qq.com/</a><br>WeUi组件库|微信开发文档: <a href="https://developers.weixin.qq.com/miniprogram/dev/extended/">https://developers.weixin.qq.com/miniprogram/dev/extended/</a><br>微信小程序—事件绑定 <a href="https://www.cnblogs.com/e0yu/p/8488285.html">https://www.cnblogs.com/e0yu/p/8488285.html</a><br>微信小程序 下拉刷新页面时的加载状态 <a href="https://blog.csdn.net/qq_35349982/article/details/102699956?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3.control">https://blog.csdn.net/qq_35349982/article/details/102699956?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3.control</a><br>微信小程序-自定义下拉刷新 <a href="https://www.cnblogs.com/aaronjs/p/9982708.html&quot;">https://www.cnblogs.com/aaronjs/p/9982708.html&quot;</a> ADD_DATE=”1609316874<br>微信小程序-textarea <a href="https://blog.csdn.net/i_lost/article/details/103669735">https://blog.csdn.net/i_lost/article/details/103669735</a><br>微信小程序——扫码功能简单实现 <a href="https://blog.csdn.net/u013184970/article/details/105357121?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control">https://blog.csdn.net/u013184970/article/details/105357121?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control</a><br>微信小程序常用的3种提示弹窗 <a href="https://www.cnblogs.com/yuanyiming/p/11546292.html">https://www.cnblogs.com/yuanyiming/p/11546292.html</a><br>微信小程序多张图片上传组件 - 简书 <a href="https://www.jianshu.com/p/45f8281f45bd">https://www.jianshu.com/p/45f8281f45bd</a><br>微信小程序结合vant weapp ui实现多图上传组件 - 灰信网 <a href="https://www.freesion.com/article/2520581780/">https://www.freesion.com/article/2520581780/</a><br>微信小程序请求头部header加token <a href="https://blog.csdn.net/dlmmu/article/details/102947577">https://blog.csdn.net/dlmmu/article/details/102947577</a><br>微信小程序上传单张或多张图片 <a href="https://blog.csdn.net/sinat_34803914/article/details/90515606?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control">https://blog.csdn.net/sinat_34803914/article/details/90515606?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control</a><br>微信小程序实现下拉刷新 <a href="https://www.cnblogs.com/xunxian/p/12862660.html">https://www.cnblogs.com/xunxian/p/12862660.html</a><br>微信小程序使用官方 weui Uploader压缩上传图片 - 简书 <a href="https://www.jianshu.com/p/504aea798cc0">https://www.jianshu.com/p/504aea798cc0</a><br>微信小程序学习 下滑刷新、触底上滑刷新 <a href="https://blog.csdn.net/u013166622/article/details/96777843">https://blog.csdn.net/u013166622/article/details/96777843</a><br>微信小程序bindtap点击事件与事件冒泡 <a href="https://www.cnblogs.com/xi-li/p/11287869.html">https://www.cnblogs.com/xi-li/p/11287869.html</a><br>微信小程序weui在线入门教程-WeUi操作反馈-picker选择器 <a href="https://blog.csdn.net/u013818205/article/details/86416697">https://blog.csdn.net/u013818205/article/details/86416697</a><br>小程序 页面路由跳转 <a href="https://www.cnblogs.com/xiangsj/p/10618169.html">https://www.cnblogs.com/xiangsj/p/10618169.html</a><br>小程序 input键盘弹出时，滚动页面，输入框内容错位问题 <a href="https://blog.csdn.net/mike_chen2stockings/article/details/106786307">https://blog.csdn.net/mike_chen2stockings/article/details/106786307</a><br>小程序分页 下拉加载更多 上拉加载更多 <a href="https://www.cnblogs.com/pansidong/p/10571779.html">https://www.cnblogs.com/pansidong/p/10571779.html</a><br>小程序接入vant Weapp组件的详细步骤 <a href="https://blog.csdn.net/smell_rookie/article/details/109285435">https://blog.csdn.net/smell_rookie/article/details/109285435</a><br>小程序使用jsencrypt加密 <a href="https://blog.csdn.net/qq_34672907/article/details/89605498">https://blog.csdn.net/qq_34672907/article/details/89605498</a><br>小程序支付前端代码  <a href="https://www.cnblogs.com/anxiaoyu/p/6937902.html">https://www.cnblogs.com/anxiaoyu/p/6937902.html</a><br>小程序支付前端代码 <a href="https://blog.csdn.net/weixin_38895490/article/details/80455462">https://blog.csdn.net/weixin_38895490/article/details/80455462</a><br>WeUI的引入方式二种方式 - 简书 <a href="https://www.jianshu.com/p/1d645078b326">https://www.jianshu.com/p/1d645078b326</a><br>小程序toFixed()转化的问题  <a href="https://www.jianshu.com/p/48992549b0fc">https://www.jianshu.com/p/48992549b0fc</a></p><p><a href="https://wechat-miniprogram.github.io/weui/docs/uploader.html#%E4%BB%A3%E7%A0%81%E5%BC%95%E5%85%A5">Uploader | wechat-miniprogram / weui</a></p><p><a href="https://mp.weixin.qq.com/">微信公众平台</a></p><p><a href="https://developers.weixin.qq.com/ebook?action=get_post_info&docid=000224fc9d0f98cb0086f4eff5180a">教程 | 《小程序开发指南》</a></p><p><a href="https://lanhuapp.com/web/?code=001IBM000uI46N1QlC100XBlSJ1IBM0i&state=%7Bredirect_uri:lanhu_board_login%7D#/item/">团队项目 - 蓝湖</a></p><p><a href="https://www.cnblogs.com/haha1212/p/11562944.html">一款优雅的小程序拖拽排序组件实现 - 独孤小鼬 - 博客园</a></p><p><a href="https://www.jianshu.com/p/00ed1991fea1?utm_source=desktop&utm_medium=timeline">微信小程序父传子，子传父组建通信详解 - 简书</a></p><p><a href="https://blog.csdn.net/weixin_34194379/article/details/91439079">(17条消息) 一文彻底弄懂wx.chooseImage_weixin_34194379的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_34228387/article/details/91479161">(17条消息) 小程序–页面添加水印_weixin_34228387的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/WangYC_/article/details/107514340">(17条消息) IE中【Unhandled promise rejection Error: 拒绝访问。】_板砖工KO水泥匠-CSDN博客</a></p><p><a href="https://www.jb51.net/article/170374.htm">微信小程序常用的3种提示弹窗实现详解_javascript技巧_脚本之家</a></p><p><a href="https://www.freesion.com/article/8936302765/">微信小程序内拖动图片实现移动、放大、旋转 - 灰信网（软件开发博客聚合）</a></p><p><a href="https://blog.csdn.net/weixin_35457969/article/details/112037069">(17条消息) 小程序navigateback传值_微信小程序wx.navigateBack() 携带参数返回_与阳光共进早餐的博客-CSDN博客</a></p><p><a href="https://www.runoob.com/tags/canvas-drawimage.html">HTML canvas drawImage() 方法 | 菜鸟教程</a></p><p><a href="https://www.cnblogs.com/guomouren/p/13214407.html">微信小程序如何获取屏幕高度和宽度 - 子枫i - 博客园</a></p><p><a href="https://blog.csdn.net/bj123467/article/details/89379765">(17条消息) 小程序当前页面禁止下拉加载_若水无华的博客-CSDN博客_小程序禁止下拉</a></p><p><a href="https://www.jb51.net/article/188026.htm">微信小程序实现watch监听_javascript技巧_脚本之家</a></p><p><a href="https://blog.csdn.net/qq_35713752/article/details/123212435">(17条消息) 微信小程序全局监听路由变化_a_靖的博客-CSDN博客_小程序监听路由变化</a></p><p><a href="https://blog.csdn.net/qq_43842093/article/details/122897226">(17条消息) git 小乌龟 更新分支_git常用操作_Archie_java的博客-CSDN博客_git小乌龟更新代码</a></p><p><a href="https://blog.csdn.net/weixin_44764873/article/details/121590804">(17条消息) 小程序更换switch开关的颜色，radio样式，checkbox样式_Lo、的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_42543264/article/details/105507206">(17条消息) 微信小程序修改input中的placeholder字体颜色_青衫折扇的博客-CSDN博客_微信小程序input颜色</a></p><p><a href="https://blog.csdn.net/weixin_38909589/article/details/90444495">(17条消息) 微信小程序：enablePullDownRefresh、onReachBottomDistance 、动态设置窗口的背景色、动态设置下拉背景字体_MinKing110的博客-CSDN博客_enablepulldownrefresh</a></p><p><a href="https://segmentfault.com/a/1190000012250564">关于微信小程序webview的使用 - SegmentFault 思否</a></p><p><a href="https://yebd1h.smartapps.cn/pages/blog/index?blogId=121588424&_swebfr=1&_swebFromHost=baiduboxapp">CSDN编程社区</a></p><p><a href="https://blog.csdn.net/qq_37970097/article/details/115793051">(17条消息) 使用webview实现小程序本地文件上传_lj深的博客-CSDN博客_webview支持上传文件</a></p><p><a href="https://developers.weixin.qq.com/community/develop/doc/00064ec756c480a806ca8e7d95b400?jumpto=comment&commentid=0006ec68458c98a807cab9004510">小程序如何打开手机本地文件资源管理器呢？求教，谢谢 | 微信开放社区</a></p><p><a href="https://www.jianshu.com/p/1a721c9a4cdf">微信小程序防抖、节流的使用 - 简书</a></p><p><a href="https://blog.csdn.net/dayewandou/article/details/78235075">(17条消息) canvas translate()方法实例及效果_大叶豌豆的博客-CSDN博客_canvas translate</a></p><p><a href="https://wenku.baidu.com/view/04ee07270440be1e650e52ea551810a6f424c845.html">小程序手写签名，签名旋转（钉钉微信canvas） - 百度文库</a></p><p><a href="https://blog.csdn.net/liuhongyi0104/article/details/84840314">(17条消息) canvas fillStyle 设置注意点_liuhongyi0104的博客-CSDN博客</a></p><p><a href="https://www.csdn.net/tags/MtTaEgzsMjQyMTUzLWJsb2cO0O0O.html">(17条消息) 微信小程序touchstart 阻止冒泡事件 - CSDN</a></p><p><a href="https://developers.weixin.qq.com/community/develop/doc/00000aa4828210c1127accd9258400">获取小程序组件properties属性值？ | 微信开放社区</a></p><p><a href="https://blog.csdn.net/weixin_44671184/article/details/105805029">(17条消息) 小程序的properties_wx_jiaweri的博客-CSDN博客_小程序properties</a></p><p><a href="https://blog.csdn.net/weixin_43729943/article/details/115414170">(17条消息) 微信小程序组件事件监听更改父组件的数据_聂大哥的博客-CSDN博客_微信小程序更新子组件</a></p><p><a href="https://developers.weixin.qq.com/community/develop/article/doc/000844b537c230b04b999a54f56013">教你怎么监听小程序的返回键 | 微信开放社区</a></p><p><a href="https://wenku.baidu.com/view/705fefcd6194dd88d0d233d4b14e852458fb39e3.html">微信小程序——子组件接收参数变化时如何监听 - 百度文库</a></p><p><a href="https://developers.weixin.qq.com/community/develop/doc/000a84cbcc46a0701386dc17556800">button open-type=’share’ 点击整个模块都唤起分享 | 微信开放社区</a></p><p><a href="https://blog.csdn.net/abccba9978/article/details/120646040">(17条消息) 小程序通过webview实现本地任意文件上传_api工厂的博客-CSDN博客_webview上传文件</a></p><p><a href="https://blog.csdn.net/EEstefan/article/details/121588424">(17条消息) 历时八个月的uniapp微信小程序上传手机内部文件_嗯，醴！的博客-CSDN博客_uniapp 微信小程序上传文件</a></p><p><a href="https://www.csdn.net/tags/MtjakgwsMTA4NjItYmxvZwO0O0OO0O0O.html">(17条消息) 上传文件转为base64 - CSDN</a></p><p><a href="https://blog.csdn.net/qq_37210523/article/details/115534130">(17条消息) 彻底解决小程序内嵌web-view缓存问题_大鱼吃小鱼7的博客-CSDN博客_小程序webview缓存问题</a></p><p><a href="https://blog.csdn.net/qq_39981639/article/details/121890776">(17条消息) 微信小程序现实点击图片预览功能_林啾啾的博客-CSDN博客_微信小程序预览图片</a></p><p><a href="https://blog.csdn.net/qq_37468919/article/details/106137179">(17条消息) 微信小程序 生成唯一字符串_科小洋-lmy的博客-CSDN博客_小程序生成uuid</a></p><p><a href="https://blog.csdn.net/xujire/article/details/122361183">(18条消息) 微信小程序——weapp-qrcode.js生成二维码、海报二维码、核销码_XujiRe的博客-CSDN博客_weapp-qrcode</a></p><p><a href="https://developers.weixin.qq.com/miniprogram/introduction/qrcode.html#%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B">扫普通链接二维码打开小程序 | 微信开放文档</a></p><p><a href="https://www.jianshu.com/p/3ef4b9b4fe94">小程序组件的生命周期、用法 - 简书</a></p><p><a href="https://blog.csdn.net/weixin_47077674/article/details/120011117">(48条消息) 微信小程序实现身份证拍及摄裁剪功能_oil欧哟的博客-CSDN博客_微信小程序拍照裁剪</a></p><p><a href="https://blog.csdn.net/weixin_57983561/article/details/117198822">(50条消息) 深拷贝(四种方法)_lys-0203的博客-CSDN博客_深拷贝</a></p><p><a href="https://blog.csdn.net/m0_56344602/article/details/122618054">(53条消息) 微信小程序下载文件和转发文件给好友总结_海海呐的博客-CSDN博客_微信小程序分享文件</a></p><p><a href="https://blog.csdn.net/qq_45487080/article/details/110039284">(55条消息) Vant-ui组件 Dialog里的before-close阻止关闭_夏暖冬凉的博客-CSDN博客_before-close</a></p><p><a href="https://blog.csdn.net/weixin_39030148/article/details/113599622">(55条消息) vant小程序 vant-dialog的before-close用法_欺世盗名_YY的博客-CSDN博客_beforeclose</a></p><p><a href="https://www.cnblogs.com/vientiane/p/13994015.html">h5与小程序互相跳转，传参和获取参数 - 大BUG - 博客园</a></p><p><a href="https://blog.csdn.net/weixin_41192489/article/details/120464484">(57条消息) css特效动画——转圈的加载动画_朝阳39的博客-CSDN博客_css转圈动画</a></p><p><a href="https://blog.csdn.net/c_xiyi/article/details/118636229">(57条消息) 微信小程序 checkbox-group组件的bindchange冒泡问题_兮り忆的博客-CSDN博客_bindchange 阻止冒泡</a></p><p><a href="https://www.csdn.net/tags/OtDaAg1sMjI5ODQtYmxvZwO0O0OO0O0O.html">(57条消息) 小程序禁止手势返回 - CSDN</a></p><p><a href="https://www.cnblogs.com/liuqingxia/p/15793331.html">小程序-wx.request POST请求，请求参数需要form-data形式 - MiniDuck - 博客园</a></p>]]></content>
    
    
    <categories>
      
      <category>个人收藏</category>
      
    </categories>
    
    
    <tags>
      
      <tag>个人收藏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网址收藏</title>
    <link href="/2021/06/18/%E7%BD%91%E5%9D%80%E6%94%B6%E8%97%8F/"/>
    <url>/2021/06/18/%E7%BD%91%E5%9D%80%E6%94%B6%E8%97%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决:"></a><strong>问题解决:</strong></h3><p>解决ios手机中input输入框光标过长的问题: <a href="https://blog.csdn.net/ljy_1024/article/details/88819612">https://blog.csdn.net/ljy_1024/article/details/88819612</a><br>图片上传剪切 <a href="https://github.com/superchangme/ImageCropping">https://github.com/superchangme/ImageCropping</a><br>小数点后保留2位小数的正则表达式 <a href="https://www.cnblogs.com/hyunbar/p/10083532.html">https://www.cnblogs.com/hyunbar/p/10083532.html</a><br>组件 | Element <a href="https://element.eleme.io/#/zh-CN/component/installation">https://element.eleme.io/#/zh-CN/component/installation</a><br>GitHub <a href="https://github.com/">https://github.com/</a><br>GitHub - MrKaKaluote/element-admin: a simple project of admin <a href="https://github.com/MrKaKaluote/element-admin">https://github.com/MrKaKaluote/element-admin</a><br>GitLab配置SSH密钥 <a href="https://blog.csdn.net/lizhiqiang1217/article/details/88801158">https://blog.csdn.net/lizhiqiang1217/article/details/88801158</a><br>Vue.Draggable学习总结 - 简书 <a href="https://www.jianshu.com/p/382ac5f9d6ff">https://www.jianshu.com/p/382ac5f9d6ff</a><br>Vue.js安装及环境搭建 <a href="https://www.cnblogs.com/zs-notes/p/11389984.html">https://www.cnblogs.com/zs-notes/p/11389984.html</a><br>vue+element中自定义表单校验特殊字符 <a href="https://blog.csdn.net/nongweiyilady/article/details/82813225">https://blog.csdn.net/nongweiyilady/article/details/82813225</a><br>Vue实现当前组件重新加载 <a href="https://blog.csdn.net/weixin_43882226/article/details/88989883">https://blog.csdn.net/weixin_43882226/article/details/88989883</a><br>vue中watch不触发、不生效的解决办法及原理 <a href="https://juejin.cn/post/6844903811434151944">https://juejin.cn/post/6844903811434151944</a><br>vue中Watch监听 <a href="https://www.jianshu.com/p/5d113b2b10a4">https://www.jianshu.com/p/5d113b2b10a4</a></p><p><a href="https://www.cnblogs.com/jhonor/articles/15002031.html">antdv tree可编辑树组件 - jhonor - 博客园</a></p><p><a href="https://www.cnblogs.com/mzy520/p/11282751.html">Git-命令行-使用 git stash 暂存代码 - 帅总吖 - 博客园</a></p><p><a href="https://jingyan.baidu.com/article/7e44095386e1a06fc1e2ef33.html">git stash怎么恢复-百度经验</a></p><p><a href="https://www.jianshu.com/p/3602f666799a">批量删除 git 分支 - 简书</a></p><p><a href="https://blog.csdn.net/weixin_46827107/article/details/121235768">(14条消息) ant-design-vue+vite主题切换详细步骤（简单案例）_butcher的博客-CSDN博客</a></p><p><a href="https://cloud.tencent.com/developer/inventory/1544">Vue从开发到部署遇到的问题及解决思路的全部内容 - 阅读清单 - 云+社区 - 腾讯云</a></p><p><a href="https://www.foxitsoftware.cn/">福昕软件 - 全球6.5亿用户都在用的PDF编辑器及PDF阅读器</a></p><p><a href="https://2x.antdv.com/components/tree-cn">Ant Design Vue</a></p><p><a href="https://element-plus.gitee.io/zh-CN/component/border.html#%E8%BE%B9%E6%A1%86%E6%A0%B7%E5%BC%8F">Border 边框 | Element Plus</a></p><p><a href="https://blog.csdn.net/qq_27104997/article/details/103617219?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_ecpm_v1~rank_v31_ecpm-4-103617219.pc_agg_new_rank&utm_term=js+%E5%B5%8C%E5%A5%97%E6%95%B0%E7%BB%84+%E9%80%9A%E8%BF%87%E5%AD%90%E8%8A%82%E7%82%B9%E6%89%BE%E5%88%B0%E7%88%B6%E8%8A%82%E7%82%B9&spm=1000.2123.3001.4430">(17条消息) js递归查询id所对应的节点，查询该节点的父节点，查询该节点的所有子节点_爱吃蛋炒饭加蛋的博客-CSDN博客_js 递归查找节点</a></p><p><a href="https://www.jianshu.com/p/0791fc7e120c">Vue3.0中文文档（Vue3 + TS学习资源路线） - 简书</a></p><p><a href="http://www.liulongbin.top:8085/#/?id=_3-setup">破解vue3.x新特性 - 洞见未来</a></p><p><a href="https://blog.csdn.net/weixin_58347102/article/details/117044108">(48条消息) Vue3 getters打印结果是Proxy对象，怎么获取其中的值？_Restart小仙女的博客-CSDN博客_proxy取值</a></p><p><a href="https://www.extfans.com/articles/1728/">谷歌浏览器Chrome如何添加插件/扩展程序，下载安装教程-文章|扩展迷</a></p><p><a href="https://blog.csdn.net/weixin_43871703/article/details/109378910">(48条消息) 前端文件下载，下载流文件___不靠谱先生的博客-CSDN博客_下载流文件</a></p><p><a href="https://www.jianshu.com/p/f2bfd6c4186d">下载流文件 - 简书</a></p><p><a href="https://www.jianshu.com/p/cf2dffbee212">vue实现文件下载 - 简书</a></p><p><a href="https://www.cnblogs.com/KeithTee/p/15991664.html">Vue搭建一个项目 - 沉梦昂志_Tee - 博客园</a></p><p><a href="https://blog.csdn.net/withkai44/article/details/125128897">(55条消息) VueRouter导入_withkai44的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_44541213/article/details/123899488">(55条消息) 【解决】控制台报错Uncaught TypeError: Object(…) is not a function at eval (vue-router.esm-bundler.js_糖莱的博客-CSDN博客</a></p><p><a href="https://docs.sentry.io/">Sentry Documentation | Sentry Documentation</a></p><p><a href="https://www.iamwawa.cn/color.html">RGB颜色与十六位颜色代码转换_蛙蛙在线工具</a></p><p><a href="https://chrome.zzzmh.cn/help?token=setup">超详细！Chrome 浏览器、浏览器插件 下载和安装教程_chrome扩展插件下载_极简插件</a></p><p><a href="http://www.ddooo.com/softdown/220391.htm">typora破解版-typora中文破解版 v1.0.3附安装教程 - 多多软件站</a></p>]]></content>
    
    
    <categories>
      
      <category>个人收藏</category>
      
    </categories>
    
    
    <tags>
      
      <tag>个人收藏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则匹配</title>
    <link href="/2021/06/17/%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D/"/>
    <url>/2021/06/17/%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D/</url>
    
    <content type="html"><![CDATA[<h3 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配:"></a>正则匹配:</h3><p>正则判断|菜鸟网站 <a href="https://c.runoob.com/front-end/854">https://c.runoob.com/front-end/854</a></p><pre><code class="hljs js"><span class="hljs-comment">//大小写字母</span> /^[A-Za-z]+$/<span class="hljs-comment">//大写字母</span> /^[A-Z]+$/<span class="hljs-comment">//小写字母</span>    /^[a-z]+$/</code></pre><pre><code class="hljs js"><span class="hljs-comment">//特殊字符验证</span>/((?=[\x21-\x7e]+)[^A-Za-z0<span class="hljs-number">-9</span>])/</code></pre><pre><code class="hljs js">&#123;   type: <span class="hljs-string">&#x27;string&#x27;</span>,   pattern: <span class="hljs-regexp">/^\d&#123;6&#125;$|^\d&#123;10&#125;$/</span>,   message: <span class="hljs-string">&#x27;请输入6位或10位数字&#x27;</span>,   trigger: <span class="hljs-string">&#x27;change&#x27;</span>&#125;</code></pre><pre><code class="hljs js">&#123;   required: <span class="hljs-literal">true</span>,   pattern: <span class="hljs-regexp">/^[a-zA-Z0-9]&#123;17&#125;$/</span>,   message: <span class="hljs-string">&#x27;数字或字母，17位&#x27;</span>,   trigger: <span class="hljs-string">&#x27;change&#x27;</span>&#125;</code></pre><pre><code class="hljs js">&#123;  pattern: <span class="hljs-regexp">/^[a-zA-Z0-9]&#123;1,64&#125;$/</span>,  message: <span class="hljs-string">&#x27;数字或字母，64位之内&#x27;</span>,  trigger: <span class="hljs-string">&#x27;change&#x27;</span>&#125;</code></pre><pre><code class="hljs js">&#123;  pattern: <span class="hljs-regexp">/^[\u4e00-\u9fa5a-zA-Z0-9]+$/</span>,  message: <span class="hljs-string">&#x27;请输入汉字、字母或数字&#x27;</span>,  trigger: <span class="hljs-string">&#x27;change&#x27;</span>&#125;</code></pre><pre><code class="hljs js">&#123;  pattern: <span class="hljs-regexp">/^[1-9]&#123;1&#125;\d&#123;0,3&#125;?$/gi</span>,  message: <span class="hljs-string">&#x27;大于0小于10000的整数,请重新输入&#x27;</span>,  trigger: <span class="hljs-string">&#x27;change&#x27;</span>&#125;</code></pre><pre><code class="hljs js"><span class="hljs-comment">//手机号正则判断</span> /^(<span class="hljs-number">13</span>[<span class="hljs-number">0</span><span class="hljs-number">-9</span>]|<span class="hljs-number">14</span>[<span class="hljs-number">0</span><span class="hljs-number">-9</span>]|<span class="hljs-number">15</span>[<span class="hljs-number">0</span><span class="hljs-number">-9</span>]|<span class="hljs-number">18</span>[<span class="hljs-number">0</span><span class="hljs-number">-9</span>]|<span class="hljs-number">17</span>[<span class="hljs-number">0</span><span class="hljs-number">-9</span>]|<span class="hljs-number">16</span>[<span class="hljs-number">0</span><span class="hljs-number">-9</span>]|<span class="hljs-number">19</span>[<span class="hljs-number">0</span><span class="hljs-number">-9</span>])\d&#123;<span class="hljs-number">8</span>&#125;$/.test(value)<span class="hljs-comment">//手机号简单判断</span> /^<span class="hljs-number">1</span>[<span class="hljs-number">3</span><span class="hljs-number">-9</span>]\d&#123;<span class="hljs-number">9</span>&#125;$/.test(value)</code></pre><pre><code class="hljs js"><span class="hljs-comment">//电话号码：</span> /^((\d&#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;-)|\d&#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;-)?\d&#123;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;$/.test(<span class="hljs-string">&#x27;0201-878800800&#x27;</span>)<span class="hljs-comment">//国内电话号码(0511-4405222、021-87888822)：</span> /\d&#123;<span class="hljs-number">3</span>&#125;-\d&#123;<span class="hljs-number">8</span>&#125;|\d&#123;<span class="hljs-number">4</span>&#125;-\d&#123;<span class="hljs-number">7</span>&#125;/.test(<span class="hljs-string">&#x27;0201-878800800&#x27;</span>)</code></pre><pre><code class="hljs js"><span class="hljs-comment">//验证邮箱</span>    <span class="hljs-keyword">const</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-regexp">/^(\w)+(\.\w+)*@(\w)+((\.\w&#123;2,3&#125;)&#123;1,3&#125;)$/</span>)</code></pre><pre><code class="hljs js"><span class="hljs-comment">// 验证0或正整数</span>    <span class="hljs-keyword">const</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-regexp">/(^[0-9]\d*$)/</span>)</code></pre><pre><code class="hljs js"><span class="hljs-comment">//验证是否是小数形式</span> /^-?\d+\.\d+$/.test(value)</code></pre><pre><code class="hljs js"><span class="hljs-comment">// 验证小数,可以允许为整数</span> /^-?\d+(\.\d)?\d*$/.test(value)</code></pre><pre><code class="hljs js"><span class="hljs-comment">// 验证两位小数,可以允许为整数</span> /^-?\d+(\.\d)?\d&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;?$/.test(value)<span class="hljs-comment">// 验证一小数,可以允许为整数</span> /^-?\d+(\.\d)?\d&#123;<span class="hljs-number">0</span>&#125;?$/.test(value)</code></pre><pre><code class="hljs js">&#123;   pattern: <span class="hljs-regexp">/^((^[1-9]&#123;1&#125;\d&#123;0,5&#125;)(\.\d&#123;2&#125;$)|(^[1-9]&#123;1&#125;\d&#123;0,5&#125;)(\.\d&#123;1&#125;$)|(^[1-9]&#123;1&#125;\d&#123;0,5&#125;))$/</span>,   message: <span class="hljs-string">&#x27;大于0小于等于999999的数字,最多保留两位小数&#x27;</span>,   trigger: <span class="hljs-string">&#x27;change&#x27;</span>&#125;</code></pre><pre><code class="hljs js"><span class="hljs-comment">// 验证非法字符</span> !<span class="hljs-regexp">/[~#^$@%&amp;!\*\(\)\[\]\&#123;\&#125;&lt;&gt;\-\+=/\?\|`]/gi</span>.test(value)<span class="hljs-comment">//验证所有中英文非法字符</span> !<span class="hljs-regexp">/[~#^$&amp;!\*\(\)\[\]\&#123;\&#125;&lt;&gt;\-\+=/\?\|`……￥@%！\——\（\）\【\】《》、\？\&quot;\”\;\；\：\:\,\，\.\。·\\\&#x27;\’]/gi</span>.test(value)</code></pre><pre><code class="hljs js"><span class="hljs-comment">//验证车牌号(含新能源)</span> /^([京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]&#123;<span class="hljs-number">1</span>&#125;[A-Z]&#123;<span class="hljs-number">1</span>&#125;(([<span class="hljs-number">0</span><span class="hljs-number">-9</span>]&#123;<span class="hljs-number">5</span>&#125;[DF])|([DF]([A-HJ-NP-Z0<span class="hljs-number">-9</span>])[<span class="hljs-number">0</span><span class="hljs-number">-9</span>]&#123;<span class="hljs-number">4</span>&#125;)))|([京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]&#123;<span class="hljs-number">1</span>&#125;[A-Z]&#123;<span class="hljs-number">1</span>&#125;[A-HJ-NP-Z0<span class="hljs-number">-9</span>]&#123;<span class="hljs-number">4</span>&#125;[A-HJ-NP-Z0<span class="hljs-number">-9</span>挂学警港澳]&#123;<span class="hljs-number">1</span>&#125;)$/.test(value)</code></pre><pre><code class="hljs js"><span class="hljs-comment">//合法url:</span> /^(https?|ftp):\/\/([a-zA-Z0<span class="hljs-number">-9.</span>-]+(:[a-zA-Z0<span class="hljs-number">-9.</span>&amp;%$-]+)*@)*((<span class="hljs-number">25</span>[<span class="hljs-number">0</span><span class="hljs-number">-5</span>]|<span class="hljs-number">2</span>[<span class="hljs-number">0</span><span class="hljs-number">-4</span>][<span class="hljs-number">0</span><span class="hljs-number">-9</span>]|<span class="hljs-number">1</span>[<span class="hljs-number">0</span><span class="hljs-number">-9</span>]&#123;<span class="hljs-number">2</span>&#125;|[<span class="hljs-number">1</span><span class="hljs-number">-9</span>][<span class="hljs-number">0</span><span class="hljs-number">-9</span>]?)(\.(<span class="hljs-number">25</span>[<span class="hljs-number">0</span><span class="hljs-number">-5</span>]|<span class="hljs-number">2</span>[<span class="hljs-number">0</span><span class="hljs-number">-4</span>][<span class="hljs-number">0</span><span class="hljs-number">-9</span>]|<span class="hljs-number">1</span>[<span class="hljs-number">0</span><span class="hljs-number">-9</span>]&#123;<span class="hljs-number">2</span>&#125;|[<span class="hljs-number">1</span><span class="hljs-number">-9</span>]?[<span class="hljs-number">0</span><span class="hljs-number">-9</span>]))&#123;<span class="hljs-number">3</span>&#125;|([a-zA-Z0<span class="hljs-number">-9</span>-]+\.)*[a-zA-Z0<span class="hljs-number">-9</span>-]+\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]&#123;<span class="hljs-number">2</span>&#125;))(:[<span class="hljs-number">0</span><span class="hljs-number">-9</span>]+)*(\/($|[a-zA-Z0<span class="hljs-number">-9.</span>,?<span class="hljs-string">&#x27;\\+&amp;%$#=~_-]+))*$/.test(value)</span><span class="hljs-string"></span></code></pre><pre><code class="hljs js"><span class="hljs-comment">//邮编</span>&#123;    pattern: <span class="hljs-regexp">/^[0-9]\d&#123;5&#125;(?!\d)$/gi</span>,    message: <span class="hljs-string">&#x27;邮编格式错误,请重新输入6位数字&#x27;</span>,    trigger: <span class="hljs-string">&#x27;change&#x27;</span>&#125;</code></pre><pre><code class="hljs js"><span class="hljs-comment">//输入框小表情</span> /[\ud800-\udbff][\udc00-\udfff]/g.test(value)</code></pre>]]></content>
    
    
    <categories>
      
      <category>备忘录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>备忘录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo总结</title>
    <link href="/2020/10/06/hexo%E6%80%BB%E7%BB%93/"/>
    <url>/2020/10/06/hexo%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h3 id="hexo-总结"><a href="#hexo-总结" class="headerlink" title="hexo 总结"></a>hexo 总结</h3><h4 id="安装使用："><a href="#安装使用：" class="headerlink" title="安装使用："></a>安装使用：</h4><p>本文参考博客:<a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">https://blog.csdn.net/sinat_37781304/article/details/82729029</a>    博主总结的还是相当棒的,在这里也小总结一下</p><p>按照博主的总结,部署的时候,<a href="http://yourname(xxx).github.io这样的网址打开是没有东西的,后来就花几块买了个.top的域名,部署成功了/">http://yourname(xxx).github.io这样的网址打开是没有东西的,后来就花几块买了个.top的域名,部署成功了</a>.</p><p>有一些问题就是在更换电脑的时候,public里面的图片拉下来的时候,会丢失一部分,只有最初的一些图片,(就是在如下第六步的时候),因为拉去下来的代码是没有public文件夹的,如果直接部署,就会把图片给覆盖,搞丢了。</p><pre><code class="hljs actionscript">在此应该切换分支到master，获取到的文件就是<span class="hljs-keyword">public</span>文件夹里面的所有内容:拷贝一份出来再次切换到hexo分主上，新建<span class="hljs-keyword">public</span>文件夹，把拷贝的文件放到里面就欧克啦可以进行下一步的部署到线上操作了。如果新增的有内容或图片，则需要将图片直接放到<span class="hljs-keyword">public</span>文件夹里面，完成新增创作之后将代码更新到仓库，然后hexo g，hexo d进行部署，就可以在线上看到自己写的新内容啦。此时master分支上的img文件夹会自动更新。</code></pre><pre><code class="hljs html">更换新的电脑安装配置:1,安装gitnpm install git设置git全局邮箱和用户名git config --global user.name &quot;yourgithubname&quot;git config --global user.email &quot;yourgithubemail&quot;设置ssh key2,安装nodenpm install nodejsnpm install npm3,安装hexonpm install hexo-cli -g4,然后clone代码git clone https://github.com/more-fine/more-fine.github.io.gitcd more-fine.github.io/5,下载依赖:npm installnpm install hexo-deployer-git --save此时需要切换分支，到master，然后git pull更新public文件此时肯出现错误：Your local changes to the following files would be overwritten by checkout需要git clean -f //强制清除文件或者git checkout -f <span class="hljs-tag">&lt;<span class="hljs-name">branch</span>&gt;</span> 强制切换分支此时：在桌面上新建一个文件夹，public，将master分支上的文件copy到public文件里面，然后切换到hexo分支下，然后将pulice剪切到hexo分支下根目录中    此时可以进行写博客啦，接下来的操作就没有什么问题了写完博客生成部署，提交代码，这些操作是在hexo分支上进行的6,生成，部署(换电脑的时候可能会丢失图片)hexo g hexo d开始新的博客书写:(newpage博客的名字)hexo new newpage此时会在source/_posts文件夹里面生成.md的文件,直接打开编辑7,启动博客:hexo s(可以进行本地预览)8,不要忘了，每次写完最好都把源文件上传一下git add .git commit –m &quot;xxxx&quot;git push 9,如果是在已经编辑过的电脑上，已经有clone文件夹了，那么，每次只要和远端同步一下就行了git pull10,如果部署到了服务器,那么只需要在同步到远端之后再执行一次6的步骤,两分钟就能再次在你的网址上看到更新的博客啦.</code></pre><h4 id="报错解决："><a href="#报错解决：" class="headerlink" title="报错解决："></a>报错解决：</h4><p><strong>写hexo博客时报错Template render error: (unknown path)出现的原因及解决方法</strong></p><p>有可能是你写的md文件，出现hexo无法编译的字符，如<code>&#123;&#123;&#125;&#125;`，要进行引用符号的处理。如:`&#123;&#123;&#125;&#125;</code></p><p><a href="https://blog.csdn.net/kuashijidexibao/article/details/105517937">https://blog.csdn.net/kuashijidexibao/article/details/105517937</a></p>]]></content>
    
    
    <categories>
      
      <category>备忘录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>备忘录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>下拉刷新加载数据，筛选条件点击加载对应数据，搜索input框得到对应数据</title>
    <link href="/2020/10/06/%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0%E5%8A%A0%E8%BD%BD%E6%95%B0%E6%8D%AE%EF%BC%8C%E7%AD%9B%E9%80%89%E6%9D%A1%E4%BB%B6%E7%82%B9%E5%87%BB%E5%8A%A0%E8%BD%BD%E5%AF%B9%E5%BA%94%E6%95%B0%E6%8D%AE%EF%BC%8C%E6%90%9C%E7%B4%A2input%E6%A1%86%E5%BE%97%E5%88%B0%E5%AF%B9%E5%BA%94%E6%95%B0%E6%8D%AE/"/>
    <url>/2020/10/06/%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0%E5%8A%A0%E8%BD%BD%E6%95%B0%E6%8D%AE%EF%BC%8C%E7%AD%9B%E9%80%89%E6%9D%A1%E4%BB%B6%E7%82%B9%E5%87%BB%E5%8A%A0%E8%BD%BD%E5%AF%B9%E5%BA%94%E6%95%B0%E6%8D%AE%EF%BC%8C%E6%90%9C%E7%B4%A2input%E6%A1%86%E5%BE%97%E5%88%B0%E5%AF%B9%E5%BA%94%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="下拉刷新加载数据，筛选条件点击加载对应数据，搜索input框得到对应数据"><a href="#下拉刷新加载数据，筛选条件点击加载对应数据，搜索input框得到对应数据" class="headerlink" title="下拉刷新加载数据，筛选条件点击加载对应数据，搜索input框得到对应数据"></a><a href="https://www.cnblogs.com/MrXXD/p/13429544.html">下拉刷新加载数据，筛选条件点击加载对应数据，搜索input框得到对应数据</a></h3><h4 id="移动端页面的下拉刷新，用到jquery和layui的弹窗，layui的下拉刷新配合上条件筛选有点难搞，所以没有用，原生js写的，有用到的话可以采纳"><a href="#移动端页面的下拉刷新，用到jquery和layui的弹窗，layui的下拉刷新配合上条件筛选有点难搞，所以没有用，原生js写的，有用到的话可以采纳" class="headerlink" title="移动端页面的下拉刷新，用到jquery和layui的弹窗，layui的下拉刷新配合上条件筛选有点难搞，所以没有用，原生js写的，有用到的话可以采纳"></a>移动端页面的下拉刷新，用到jquery和layui的弹窗，layui的下拉刷新配合上条件筛选有点难搞，所以没有用，原生js写的，有用到的话可以采纳</h4><p><strong>html部分：</strong></p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;seo_Box&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;case_search&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;大家都在搜“现代风格”&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>//筛选条件，点击出现弹窗<span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;search_list&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;searchLi&quot;</span> <span class="hljs-attr">data-method</span>=<span class="hljs-string">&quot;offsetFG&quot;</span> <span class="hljs-attr">data-type</span>=<span class="hljs-string">&quot;b&quot;</span>&gt;</span>                    风格                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/bottom.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;searchLi&quot;</span> <span class="hljs-attr">data-method</span>=<span class="hljs-string">&quot;offsetHX&quot;</span> <span class="hljs-attr">data-type</span>=<span class="hljs-string">&quot;b&quot;</span>&gt;</span>                    户型                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/bottom.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;searchLi&quot;</span> <span class="hljs-attr">data-method</span>=<span class="hljs-string">&quot;offsetMJ&quot;</span> <span class="hljs-attr">data-type</span>=<span class="hljs-string">&quot;b&quot;</span>&gt;</span>                    面积                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/bottom.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;searchLi&quot;</span> <span class="hljs-attr">data-method</span>=<span class="hljs-string">&quot;offsetKJ&quot;</span> <span class="hljs-attr">data-type</span>=<span class="hljs-string">&quot;b&quot;</span>&gt;</span>                    空间                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/bottom.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;searchLi&quot;</span> <span class="hljs-attr">data-method</span>=<span class="hljs-string">&quot;offsetZJ&quot;</span> <span class="hljs-attr">data-type</span>=<span class="hljs-string">&quot;b&quot;</span>&gt;</span>                    造价                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/bottom.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><span class="hljs-comment">&lt;!-- 内容列表 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;case_main&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;newList&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;LAY_List&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre><p><strong>js部分：</strong></p><pre><code class="hljs js"> <span class="hljs-comment">// 加载搜索条件数据</span>    $.ajax(&#123;        methods: <span class="hljs-string">&quot;get&quot;</span>,        url: ajaxUrl + <span class="hljs-string">&quot;mobile/website/caseInfo/sysDictItem&quot;</span>,        success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) </span>&#123;            <span class="hljs-keyword">let</span> data = res.result            showSearchData(data)<span class="hljs-comment">//初始化渲染搜索条件</span>        &#125;    &#125;)<span class="hljs-comment">//layui弹窗</span>layui.use(<span class="hljs-string">&#x27;layer&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">var</span> layer = layui.layer        <span class="hljs-comment">//触发事件</span>        <span class="hljs-keyword">var</span> active = &#123;            offsetFG: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">othis</span>) </span>&#123;                <span class="hljs-keyword">var</span> type = othis.data(<span class="hljs-string">&#x27;type&#x27;</span>)                    , text = othis.text();                layer.open(&#123;                    type: <span class="hljs-number">1</span>                    , <span class="hljs-attr">area</span>: [<span class="hljs-string">&#x27;3.55rem&#x27;</span>, <span class="hljs-string">&#x27;2.5rem&#x27;</span>]                    <span class="hljs-comment">// , area: [&#x27;100%&#x27;, &#x27;300px&#x27;]</span>                    , <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;请选择房屋风格&quot;</span>                    <span class="hljs-comment">// , offset: &#x27;auto&#x27;//具体配置参考：http://www.layui.com/doc/modules/layer.html#offset</span>                    , <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;layerDemo&#x27;</span> + type <span class="hljs-comment">//防止重复弹出</span>                    , <span class="hljs-attr">content</span>: text1                    , <span class="hljs-attr">shadeClose</span>: <span class="hljs-literal">true</span><span class="hljs-comment">//点击遮罩关闭</span>                    , <span class="hljs-attr">btn</span>: <span class="hljs-string">&#x27;确定&#x27;</span>                    , <span class="hljs-attr">btnAlign</span>: <span class="hljs-string">&#x27;c&#x27;</span> <span class="hljs-comment">//按钮居中</span>                    , <span class="hljs-attr">shade</span>: <span class="hljs-number">.5</span> <span class="hljs-comment">//不显示遮罩</span>                    , <span class="hljs-attr">yes</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;                        layer.closeAll();                    &#125;                &#125;);            &#125;,            offsetHX: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">othis</span>) </span>&#123;                <span class="hljs-comment">//同上面弹窗一样</span>                  <span class="hljs-comment">//content: text2</span>            &#125;,            offsetMJ: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">othis</span>) </span>&#123;                <span class="hljs-comment">//content: text3</span>            &#125;,            offsetKJ: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">othis</span>) </span>&#123;                   <span class="hljs-comment">//content: text4</span>            &#125;,            offsetZJ: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">othis</span>) </span>&#123;               <span class="hljs-comment">//content: text5</span>            &#125;,        &#125;$(<span class="hljs-string">&#x27;.searchLi&#x27;</span>).on(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;            <span class="hljs-keyword">var</span> othis = $(<span class="hljs-built_in">this</span>), method = othis.data(<span class="hljs-string">&#x27;method&#x27;</span>);            active[method] ? active[method].call(<span class="hljs-built_in">this</span>, othis) : <span class="hljs-string">&#x27;&#x27;</span>;            <span class="hljs-keyword">let</span> index = $(<span class="hljs-built_in">this</span>).index();<span class="hljs-comment">//当前点击的index</span>            <span class="hljs-comment">// 点击搜索条件加载数据</span>            $(<span class="hljs-string">&#x27;.search_data li&#x27;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;                <span class="hljs-comment">// console.log($(this).index())</span>                <span class="hljs-comment">// console.log(index)</span>                $(<span class="hljs-built_in">this</span>).addClass(<span class="hljs-string">&#x27;redBg&#x27;</span>).siblings(<span class="hljs-string">&quot;li&quot;</span>).removeClass(<span class="hljs-string">&#x27;redBg&#x27;</span>)<span class="hljs-comment">//更改样式Class</span>                <span class="hljs-comment">// console.log($(&quot;.search_list&quot;).children(&quot;.searchLi&quot;).eq(index).html())</span>                <span class="hljs-comment">// $(&quot;.search_list&quot;).children(&quot;.searchLi&quot;).eq(index).html($(this).html()+`&lt;img src=&quot;images/bottom.png&quot; style=&quot;margin-left:.05rem;&quot; alt=&quot;&quot;&gt;`)</span>                $(<span class="hljs-string">&quot;.search_list&quot;</span>).children(<span class="hljs-string">&quot;.searchLi&quot;</span>).eq(index).css(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;red&quot;</span>)                <span class="hljs-comment">// console.log($(this).parent().html())</span>                <span class="hljs-comment">// 更改text1等内容，不然会一直重复渲染初始化的dom</span>                <span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span>) &#123;                    text1 = <span class="hljs-string">&#x27;&lt;ul class=&quot;search_data&quot;&gt;&#x27;</span> + $(<span class="hljs-built_in">this</span>).parent().html() + <span class="hljs-string">&#x27;&lt;/ul&gt;&#x27;</span>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index == <span class="hljs-number">1</span>) &#123;                    text2 = <span class="hljs-string">&#x27;&lt;ul class=&quot;search_data&quot;&gt;&#x27;</span> + $(<span class="hljs-built_in">this</span>).parent().html() + <span class="hljs-string">&#x27;&lt;/ul&gt;&#x27;</span>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index == <span class="hljs-number">2</span>) &#123;                    text3 = <span class="hljs-string">&#x27;&lt;ul class=&quot;search_data&quot;&gt;&#x27;</span> + $(<span class="hljs-built_in">this</span>).parent().html() + <span class="hljs-string">&#x27;&lt;/ul&gt;&#x27;</span>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index == <span class="hljs-number">3</span>) &#123;                    text4 = <span class="hljs-string">&#x27;&lt;ul class=&quot;search_data&quot;&gt;&#x27;</span> + $(<span class="hljs-built_in">this</span>).parent().html() + <span class="hljs-string">&#x27;&lt;/ul&gt;&#x27;</span>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index == <span class="hljs-number">4</span>) &#123;                    text5 = <span class="hljs-string">&#x27;&lt;ul class=&quot;search_data&quot;&gt;&#x27;</span> + $(<span class="hljs-built_in">this</span>).parent().html() + <span class="hljs-string">&#x27;&lt;/ul&gt;&#x27;</span>                &#125;            &#125;)            searchClick(index);<span class="hljs-comment">//更改渲染条件</span>        &#125;);    &#125;)<span class="hljs-comment">//////////////////////////////////////////////////////////////////////</span><span class="hljs-comment">//公用的请求参数</span>    <span class="hljs-keyword">var</span> sxData = &#123; <span class="hljs-attr">upAndDown</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">caseState</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">pageNo</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">status</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">pageSize</span>: <span class="hljs-number">12</span> &#125;    <span class="hljs-keyword">var</span> isloading = <span class="hljs-literal">false</span>;<span class="hljs-comment">//是否滑动到底部</span>    <span class="hljs-keyword">var</span> dataPages = <span class="hljs-number">0</span>;<span class="hljs-comment">//总页数</span>    <span class="hljs-keyword">var</span> searchButton = <span class="hljs-literal">false</span>;<span class="hljs-comment">//是否点击赛选条件</span>    <span class="hljs-keyword">var</span> p = <span class="hljs-number">0</span>, t = <span class="hljs-number">0</span>; <span class="hljs-comment">//上下滚动时隐藏导航栏</span><span class="hljs-comment">//鼠标滚轮事件</span>    $(<span class="hljs-built_in">window</span>).scroll(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;        <span class="hljs-comment">//下滑</span>        p = $(<span class="hljs-built_in">this</span>).scrollTop();        <span class="hljs-keyword">if</span> (t &lt; p &amp;&amp; p !== <span class="hljs-number">0</span>) &#123;            $(<span class="hljs-string">&#x27;.header_right ul&#x27;</span>).slideUp(<span class="hljs-string">&#x27;fast&#x27;</span>);        &#125;        <span class="hljs-comment">// else &#123;</span>        <span class="hljs-comment">//     //上滑</span>        <span class="hljs-comment">//     $(&#x27;.header_right ul&#x27;).slideDown(&#x27;fast&#x27;);</span>        <span class="hljs-comment">// &#125;</span>        t = p;        <span class="hljs-keyword">var</span> scrtop = <span class="hljs-built_in">document</span>.documentElement.scrollTop || <span class="hljs-built_in">document</span>.body.scrollTop;        <span class="hljs-keyword">var</span> wheight = <span class="hljs-built_in">document</span>.documentElement.clientHeight || <span class="hljs-built_in">document</span>.body.clientHeight;        <span class="hljs-keyword">var</span> scrheight = <span class="hljs-built_in">document</span>.documentElement.scrollHeight || <span class="hljs-built_in">document</span>.body.scrollHeight;        <span class="hljs-keyword">var</span> windowheight = <span class="hljs-built_in">window</span>.innerHeight        <span class="hljs-comment">// console.log(isloading, scrtop, wheight, scrheight)</span>        <span class="hljs-keyword">if</span> (scrtop + wheight &gt;= (scrheight - <span class="hljs-number">10</span>) &amp;&amp; isloading == <span class="hljs-literal">false</span>) &#123;            <span class="hljs-keyword">if</span> (sxData.pageNo &gt;= dataPages) &#123;                <span class="hljs-comment">// console.log(&#x27;没有更多了&#x27;)</span>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>            &#125;            isloading = <span class="hljs-literal">true</span> <span class="hljs-comment">//正在请求值改为真，请求完成之后改为假</span>            getData()        &#125;    &#125;)    getData();<span class="hljs-comment">//初始化加载数据</span>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getData</span>(<span class="hljs-params"></span>) </span>&#123;        sxData.pageNo++        $.ajax(&#123;            type: <span class="hljs-string">&quot;get&quot;</span>,            dataType: <span class="hljs-string">&quot;json&quot;</span>,            data: sxData,<span class="hljs-comment">//请求的页码和每页显示条数</span>            <span class="hljs-keyword">async</span>: <span class="hljs-literal">true</span>,            url: Url + <span class="hljs-string">&#x27;xxx/xxx/xxx/list&#x27;</span>,<span class="hljs-comment">//Url地址</span>            success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) </span>&#123;                <span class="hljs-keyword">if</span> (res.success &amp;&amp; res.result.records.length &gt;= <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//数据插入</span>                    isloading = <span class="hljs-literal">false</span>                    dataPages = res.result.pages;                    <span class="hljs-keyword">if</span> (searchButton) &#123;<span class="hljs-comment">//点击了赛选按钮</span>                        <span class="hljs-keyword">var</span> html = <span class="hljs-string">&#x27;&#x27;</span>;                    &#125; <span class="hljs-keyword">else</span> &#123;                        <span class="hljs-keyword">var</span> html = $(<span class="hljs-string">&quot;#LAY_List&quot;</span>).html()                        searchButton = <span class="hljs-literal">false</span>;                    &#125;                    res.result.records.forEach( <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) </span>&#123;                        html += <span class="hljs-string">`</span><span class="hljs-string">                                &lt;li pid=&quot;<span class="hljs-subst">$&#123;item.id&#125;</span>&quot;&gt;</span><span class="hljs-string">                                    &lt;h1 style=&quot;background: url(&#x27;<span class="hljs-subst">$&#123;(item.headFiles.length == <span class="hljs-number">0</span>) ? (<span class="hljs-string">&#x27;&#x27;</span>) : (item.showRootPath + item.headFiles[<span class="hljs-number">0</span>].fileUrl)&#125;</span>&#x27;) no-repeat; background-size: 100% 100%;&quot;&gt;&lt;/h1&gt;</span><span class="hljs-string">                                    &lt;h2&gt;<span class="hljs-subst">$&#123;item.title&#125;</span>&lt;/h2&gt;</span><span class="hljs-string">                                &lt;/li&gt;</span><span class="hljs-string">                                `</span>                    &#125;);                    $(<span class="hljs-string">&quot;#LAY_List&quot;</span>).html(html)                    $(<span class="hljs-string">&quot;#LAY_List li&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;                        location.href = <span class="hljs-string">&quot;caseDetails.html?id=&quot;</span> + $(<span class="hljs-built_in">this</span>).attr(<span class="hljs-string">&quot;pid&quot;</span>);<span class="hljs-comment">//跳转页面携带id</span>                    &#125;)                &#125;            &#125;,            error: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;                <span class="hljs-comment">//请求出错处理</span>                isloading = <span class="hljs-literal">false</span>            &#125;        &#125;)    &#125;    <span class="hljs-comment">/////////////////////////////////////////////////////////////////////////</span>    <span class="hljs-keyword">var</span> text1, text2, text3, text4, text5 = <span class="hljs-string">&#x27;&#x27;</span>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showSearchData</span>(<span class="hljs-params">data</span>) </span>&#123;        text1 = <span class="hljs-string">`&lt;ul class=&quot;search_data&quot;&gt;&lt;li class=&quot;redBg&quot; pid=&quot;null&quot;&gt;全部&lt;/li&gt;`</span>        text2 = <span class="hljs-string">`&lt;ul class=&quot;search_data&quot;&gt;&lt;li class=&quot;redBg&quot; pid=&quot;null&quot;&gt;全部&lt;/li&gt;`</span>        text3 = <span class="hljs-string">`&lt;ul class=&quot;search_data&quot;&gt;&lt;li class=&quot;redBg&quot; pid=&quot;null&quot;&gt;全部&lt;/li&gt;`</span>        text4 = <span class="hljs-string">`&lt;ul class=&quot;search_data&quot;&gt;&lt;li class=&quot;redBg&quot; pid=&quot;null&quot;&gt;全部&lt;/li&gt;`</span>        text5 = <span class="hljs-string">`&lt;ul class=&quot;search_data&quot;&gt;&lt;li class=&quot;redBg&quot; pid=&quot;null&quot;&gt;全部&lt;/li&gt;`</span>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; data.designStyle.length; i++) &#123;            text1 += <span class="hljs-string">`&lt;li pid=&quot;<span class="hljs-subst">$&#123;data.designStyle[i].id&#125;</span>&quot;&gt;<span class="hljs-subst">$&#123;data.designStyle[i].itemText&#125;</span>&lt;/li&gt;`</span>        &#125;        text1 += <span class="hljs-string">`&lt;/ul&gt;`</span>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; data.apartmentLayout.length; i++) &#123;            text2 += <span class="hljs-string">`&lt;li pid=&quot;<span class="hljs-subst">$&#123;data.apartmentLayout[i].id&#125;</span>&quot;&gt;<span class="hljs-subst">$&#123;data.apartmentLayout[i].itemText&#125;</span>&lt;/li&gt;`</span>        &#125;        text2 += <span class="hljs-string">`&lt;/ul&gt;`</span>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; data.houseArea.length; i++) &#123;            text3 += <span class="hljs-string">`&lt;li pid=&quot;<span class="hljs-subst">$&#123;data.houseArea[i].id&#125;</span>&quot;&gt;<span class="hljs-subst">$&#123;data.houseArea[i].itemText&#125;</span>&lt;/li&gt;`</span>        &#125;        text3 += <span class="hljs-string">`&lt;/ul&gt;`</span>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; data.housingFeatures.length; i++) &#123;            text4 += <span class="hljs-string">`&lt;li pid=&quot;<span class="hljs-subst">$&#123;data.housingFeatures[i].id&#125;</span>&quot;&gt;<span class="hljs-subst">$&#123;data.housingFeatures[i].itemText&#125;</span>&lt;/li&gt;`</span>        &#125;        text4 += <span class="hljs-string">`&lt;/ul&gt;`</span>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; data.cost.length; i++) &#123;            text5 += <span class="hljs-string">`&lt;li pid=&quot;<span class="hljs-subst">$&#123;data.cost[i].id&#125;</span>&quot;&gt;<span class="hljs-subst">$&#123;data.cost[i].itemText&#125;</span>&lt;/li&gt;`</span>        &#125;        text5 += <span class="hljs-string">`&lt;/ul&gt;`</span>    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">searchClick</span>(<span class="hljs-params">index</span>) </span>&#123;        <span class="hljs-keyword">if</span> (index == <span class="hljs-string">&#x27;0&#x27;</span>) &#123;            $(<span class="hljs-string">&quot;.search_data li&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<span class="hljs-comment">//风格</span>                <span class="hljs-keyword">let</span> designStyle = $(<span class="hljs-built_in">this</span>).attr(<span class="hljs-string">&quot;pid&quot;</span>)                <span class="hljs-keyword">if</span> (designStyle != <span class="hljs-string">&quot;null&quot;</span>) &#123;                    sxData.designStyle = designStyle;                &#125; <span class="hljs-keyword">else</span> &#123;                    <span class="hljs-keyword">delete</span> sxData.designStyle                &#125;                sxData.pageNo = <span class="hljs-number">0</span>;<span class="hljs-comment">//重新定义到搜索</span>                searchButton = <span class="hljs-literal">true</span>;<span class="hljs-comment">//点击了赛选条件</span>                getData()            &#125;)        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index == <span class="hljs-string">&#x27;1&#x27;</span>) &#123;            $(<span class="hljs-string">&quot;.search_data li&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<span class="hljs-comment">//户型</span>                <span class="hljs-keyword">let</span> houseType = $(<span class="hljs-built_in">this</span>).attr(<span class="hljs-string">&quot;pid&quot;</span>)                <span class="hljs-keyword">if</span> (houseType != <span class="hljs-string">&quot;null&quot;</span>) &#123;                    sxData.houseType = houseType;                &#125; <span class="hljs-keyword">else</span> &#123;                    <span class="hljs-keyword">delete</span> sxData.houseType                &#125;                searchButton = <span class="hljs-literal">true</span>;<span class="hljs-comment">//点击了赛选条件</span>                sxData.pageNo = <span class="hljs-number">0</span>;<span class="hljs-comment">//重新定义到搜索</span>                getData()            &#125;)        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index == <span class="hljs-string">&#x27;2&#x27;</span>) &#123;            $(<span class="hljs-string">&quot;.search_data li&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<span class="hljs-comment">//面积</span>                <span class="hljs-keyword">let</span> floorSpace = $(<span class="hljs-built_in">this</span>).attr(<span class="hljs-string">&quot;pid&quot;</span>)                <span class="hljs-keyword">if</span> (floorSpace != <span class="hljs-string">&quot;null&quot;</span>) &#123;                    sxData.floorSpaceType = floorSpace                &#125; <span class="hljs-keyword">else</span> &#123;                    <span class="hljs-keyword">delete</span> sxData.floorSpaceType                &#125;                searchButton = <span class="hljs-literal">true</span>;<span class="hljs-comment">//点击了赛选条件</span>                sxData.pageNo = <span class="hljs-number">0</span>;<span class="hljs-comment">//重新定义到搜索</span>                getData()            &#125;)        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index == <span class="hljs-string">&#x27;3&#x27;</span>) &#123;            $(<span class="hljs-string">&quot;.search_data li&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<span class="hljs-comment">//空间</span>                <span class="hljs-keyword">let</span> feature = $(<span class="hljs-built_in">this</span>).attr(<span class="hljs-string">&quot;pid&quot;</span>)                <span class="hljs-keyword">if</span> (feature != <span class="hljs-string">&quot;null&quot;</span>) &#123;                    sxData.feature = feature;                &#125; <span class="hljs-keyword">else</span> &#123;                    <span class="hljs-keyword">delete</span> sxData.feature                &#125;                searchButton = <span class="hljs-literal">true</span>;<span class="hljs-comment">//点击了赛选条件</span>                sxData.pageNo = <span class="hljs-number">0</span>;<span class="hljs-comment">//重新定义到搜索</span>                getData()            &#125;)        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index == <span class="hljs-string">&#x27;4&#x27;</span>) &#123;            $(<span class="hljs-string">&quot;.search_data li&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<span class="hljs-comment">//费用</span>                <span class="hljs-keyword">let</span> cost = $(<span class="hljs-built_in">this</span>).attr(<span class="hljs-string">&quot;pid&quot;</span>)                <span class="hljs-keyword">if</span> (cost != <span class="hljs-string">&quot;null&quot;</span>) &#123;                    sxData.costType = cost;                &#125; <span class="hljs-keyword">else</span> &#123;                    <span class="hljs-keyword">delete</span> sxData.costType                &#125;                searchButton = <span class="hljs-literal">true</span>;<span class="hljs-comment">//点击了赛选条件</span>                sxData.pageNo = <span class="hljs-number">0</span>;<span class="hljs-comment">//重新定义到搜索</span>                getData()            &#125;)        &#125;    &#125;    <span class="hljs-comment">// // 监听键盘</span>    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&quot;keyup&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;        <span class="hljs-comment">// console.log(e.keyCode)</span>        <span class="hljs-keyword">if</span> (e.keyCode == <span class="hljs-number">13</span>) &#123;            <span class="hljs-comment">// console.log(&quot;按下了enter&quot;)</span>            <span class="hljs-keyword">let</span> title = $(<span class="hljs-string">&quot;.case_search&quot;</span>).val()            <span class="hljs-comment">// console.log(title)</span>            sxData.title = title            searchButton = <span class="hljs-literal">true</span>;<span class="hljs-comment">//点击了赛选条件</span>            sxData.pageNo = <span class="hljs-number">0</span>;<span class="hljs-comment">//重新定义到搜索</span>            getData()        &#125;    &#125;)</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>layui</tag>
      
      <tag>小栗子</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阻止事件冒泡</title>
    <link href="/2020/10/06/%E9%98%BB%E6%AD%A2%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1/"/>
    <url>/2020/10/06/%E9%98%BB%E6%AD%A2%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h3><p>子元素点击事件中添加阻止冒泡事件的方法：在点击子元素的时候不会触发父元素的事件</p><pre><code class="hljs js"><span class="hljs-comment">//点击子元素跳转页面</span>      $(<span class="hljs-string">&#x27;.ziDom&#x27;</span>).bind(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;           stopPropagation()      &#125;);<span class="hljs-comment">// 阻止冒泡</span>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">stopPropagation</span>(<span class="hljs-params">e</span>) </span>&#123;        e = e || <span class="hljs-built_in">window</span>.event;        <span class="hljs-keyword">if</span> (e.stopPropagation) &#123; <span class="hljs-comment">//W3C阻止冒泡方法  </span>            e.stopPropagation();        &#125; <span class="hljs-keyword">else</span> &#123;            e.cancelBubble = <span class="hljs-literal">true</span>; <span class="hljs-comment">//IE阻止冒泡方法  </span>        &#125;    &#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>备忘录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>备忘录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>获取当前时间格式化</title>
    <link href="/2020/10/06/%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96/"/>
    <url>/2020/10/06/%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h3 id="获取当前时间格式化"><a href="#获取当前时间格式化" class="headerlink" title="获取当前时间格式化"></a>获取当前时间格式化</h3><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dateFormat</span>(<span class="hljs-params">fmt, date</span>) </span>&#123;        <span class="hljs-keyword">let</span> ret;        <span class="hljs-keyword">let</span> opt = &#123;            <span class="hljs-string">&quot;Y+&quot;</span>: date.getFullYear().toString(),        <span class="hljs-comment">// 年</span>            <span class="hljs-string">&quot;m+&quot;</span>: (date.getMonth() + <span class="hljs-number">1</span>).toString(),     <span class="hljs-comment">// 月</span>            <span class="hljs-string">&quot;d+&quot;</span>: date.getDate().toString(),            <span class="hljs-comment">// 日</span>            <span class="hljs-string">&quot;H+&quot;</span>: date.getHours().toString(),           <span class="hljs-comment">// 时</span>            <span class="hljs-string">&quot;M+&quot;</span>: date.getMinutes().toString(),         <span class="hljs-comment">// 分</span>            <span class="hljs-string">&quot;S+&quot;</span>: date.getSeconds().toString()          <span class="hljs-comment">// 秒</span>            <span class="hljs-comment">// 有其他格式化字符需求可以继续添加，必须转化成字符串</span>        &#125;;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> k <span class="hljs-keyword">in</span> opt) &#123;            ret = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&quot;(&quot;</span> + k + <span class="hljs-string">&quot;)&quot;</span>).exec(fmt);            <span class="hljs-keyword">if</span> (ret) &#123;                fmt = fmt.replace(ret[<span class="hljs-number">1</span>], (ret[<span class="hljs-number">1</span>].length == <span class="hljs-number">1</span>) ? (opt[k]) : (opt[k].padStart(ret[<span class="hljs-number">1</span>].length, <span class="hljs-string">&quot;0&quot;</span>)))            &#125;;        &#125;;        <span class="hljs-keyword">return</span> fmt;    &#125;    <span class="hljs-keyword">let</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();    <span class="hljs-built_in">console</span>.log(dateFormat(<span class="hljs-string">&quot;YYYY-mm-dd HH:MM&quot;</span>, date));<span class="hljs-keyword">let</span> newTime = dateFormat(<span class="hljs-string">&quot;YYYY-mm-dd HH:MM&quot;</span>, date);</code></pre><p><strong>时间转化特别好用的插件</strong>:<a href="http://momentjs.cn/">http://momentjs.cn/</a></p>]]></content>
    
    
    <categories>
      
      <category>备忘录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>备忘录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css多行文本溢出隐藏,显示省略号</title>
    <link href="/2020/10/06/css%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E9%9A%90%E8%97%8F-%E6%98%BE%E7%A4%BA%E7%9C%81%E7%95%A5%E5%8F%B7/"/>
    <url>/2020/10/06/css%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E9%9A%90%E8%97%8F-%E6%98%BE%E7%A4%BA%E7%9C%81%E7%95%A5%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<h3 id="css多行文本溢出隐藏-显示省略号"><a href="#css多行文本溢出隐藏-显示省略号" class="headerlink" title="css多行文本溢出隐藏-显示省略号"></a>css多行文本溢出隐藏-显示省略号</h3><p>单行文本溢出隐藏：</p><p>overflow: hidden;<br>单行文本溢出隐藏显示省略号：</p><p>white-space: nowrap;<br>overflow: hidden;<br>text-overflow: ellipsis;<br>多行文本溢出隐藏显示省略号：</p><p>text-overflow: -o-ellipsis-lastline;<br>overflow: hidden;<br>text-overflow: ellipsis;<br>display: -webkit-box;<br>-webkit-line-clamp: 2;<br>-webkit-box-orient: vertical;<br>多行文本溢出隐藏时，-webkit-line-clamp: 2; 把2改成几就显示几行。灵活多变。<br>————————————————<br>版权声明：本文为CSDN博主「斌道天下」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/vipbin520/article/details/81483955">https://blog.csdn.net/vipbin520/article/details/81483955</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>备忘录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试总结</title>
    <link href="/2020/10/01/vue%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    <url>/2020/10/01/vue%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="面试总结"><a href="#面试总结" class="headerlink" title="面试总结"></a>面试总结</h1><h1 id="vue部分"><a href="#vue部分" class="headerlink" title="vue部分:"></a>vue部分:</h1><h2 id="0-vue开发的时候遇到的坑"><a href="#0-vue开发的时候遇到的坑" class="headerlink" title="0.vue开发的时候遇到的坑"></a>0.vue开发的时候遇到的坑</h2><p>1、vue动态设置img的src属性不生效</p><p>​                使用require引入图片路径</p><p>2、异步组件实现按需加载</p><p>app.js很大的时候采用这种方法。</p><p>我们每次访问一个页面的时候，如果不采取按需加载资源文件（css和js），就会造成页面访问速度变慢，因为它会一次性加载所有项目资源。这时候，就需要用异步组件的方式，实现按需加载了。</p><p>3.有时候希望在页面渲染完成之后，再来执行某个函数方法比如获取某个列表的高度时，必须要在页面完全渲染之后才可以，页面没有加载完成之前，获取到的高度不准确。</p><p>Vue文档中有个mounted函数，说是挂载到实例上去之后调用该钩子，但是经检测，函数放在mounted里执行时，高度并不正确，官方文档上还有一个this.$nextTick(),发现用这个的话还是不太准确,最后:<br>发现可以通过watch和nextTick 来达到我想要的效果<br>headImgList 是我要监听的列表数组，当他全部加载结束之后再调用 pcGlasses() 方法<br>如下:</p><pre><code class="hljs css"><span class="hljs-selector-tag">watch</span>()&#123;    <span class="hljs-attribute">headImgList</span>:<span class="hljs-built_in">function</span>()&#123;        this.$<span class="hljs-built_in">nextTick</span>(function()&#123;            this.<span class="hljs-built_in">pcFlasses</span>()        &#125;)    &#125;&#125;</code></pre><h2 id="1-组件通信"><a href="#1-组件通信" class="headerlink" title="1.组件通信"></a>1.组件通信</h2><h4 id="父传子"><a href="#父传子" class="headerlink" title="父传子:"></a>父传子:</h4><p>通过v-bind:”新属性”,绑定一个新属性,以属性的方法传递到子组件中,子组件通过props进行接收</p><pre><code class="hljs markdown">父组件:<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">hello</span> <span class="hljs-attr">:aaa</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">hello</span>&gt;</span></span>子组件:props:[<span class="hljs-string">&quot;aaa&quot;</span>](<span class="hljs-link">跟data同级</span>),输出==&gt;&#123;&#123;aaa&#125;&#125;</code></pre><h4 id="子传父"><a href="#子传父" class="headerlink" title="子传父:"></a>子传父:</h4><p>子组件通过$emit()方法进行传递数据.父组件通过$emit方法的第一个参数绑定事件,然后进行回调,接收数据.</p><p>$emit():发送数据,接收两个参数,第一个参数是监听函数名,需要绑定监听方法,第二个参数是传递的数据</p><pre><code class="hljs html">//子组件中:mounted()&#123;    this.$emit(&quot;fn&quot;,this.msg)&#125;//父组件中:<span class="hljs-tag">&lt;<span class="hljs-name">hello</span> @<span class="hljs-attr">fn</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">hello</span>&gt;</span>methods:&#123;    add(val)&#123;        this.value = val;        console.log(val)    &#125;&#125;</code></pre><h4 id="同级组件之间"><a href="#同级组件之间" class="headerlink" title="同级组件之间:"></a>同级组件之间:</h4><p>1.可以通过子传父,在进行父传子</p><p>2.bus事件总线,思想源于java，相当于公交车，Bus.$emit上车，Bus.$on下车接收数据</p><p>3.vuex进行传值</p><p>4.本地存储</p><pre><code class="hljs html">//a组件传给b组件:(同级)//a组件中:methods: &#123;     sendMessage () &#123;//上车        Bus.$emit(&#x27;inceptMessage&#x27;, this.msg)     &#125;&#125;//b组件中: mounted () &#123;//下车     Bus.$on(&#x27;inceptMessage&#x27;,(msg) =&gt; &#123;        this.fromComponentAMsg = msg     &#125;)&#125;</code></pre><h4 id="页面之间组件通信"><a href="#页面之间组件通信" class="headerlink" title="页面之间组件通信:"></a>页面之间组件通信:</h4><p>1.本地存储</p><p><strong>2.路由传值</strong></p><p>3.vuex</p><p>4.$emit()和$on配合</p><p>总结:</p><p>新组件等待旧组件销毁后,旧组件才发送数据.</p><p>旧组件等待新组件挂载前,新组建才接收数据.</p><p>可以接收数据的声明周期:beforMOunted,created,beforCreated</p><p>可以发送数据的生命周期:beforDestrog(),destroyed()</p><h2 id="2-vue的数据双向绑定原理"><a href="#2-vue的数据双向绑定原理" class="headerlink" title="2.vue的数据双向绑定原理:"></a>2.vue的数据双向绑定原理:</h2><p>1.</p><p>通过es5中的object.defineProperty()进行数据劫持,这个方法内部封装了两个属性,一个是描述符,和存取描述符,set,setter,get,getter,配合observer观察者模式进行对数据的监听,然后通过watch进行通知compile解析指令,然后更新页面.</p><p>2.</p><pre><code class="hljs reasonml">通过<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span>defineProperty（）的 set 和 get，监听对数据的操作，从而触发数据同步。<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span>define<span class="hljs-constructor">Property()</span>缺陷：<span class="hljs-number">1</span>、只能对属性进行数据劫持，并且需要深度遍历整个对象<span class="hljs-number">2</span>、对于数组不能监听数据的变化而proxy(es6的方法)支持监听数组的变化，并且可以直接对整个对象进行拦截。</code></pre><p>3.</p><pre><code class="hljs angelscript">执行以下<span class="hljs-number">3</span>个步骤，实现数据的双向绑定：   <span class="hljs-number">1.</span>实现一个监听器Observer，用来劫持并监听所有属性，如果有变动的，就通知订阅者。   <span class="hljs-number">2.</span>实现一个订阅者Watcher，可以收到属性的变化通知并执行相应的函数，从而更新视图。   <span class="hljs-number">3.</span>实现一个解析器Compile，可以扫描和解析每个节点的相关指令，并根据初始化模板数据以及初始化相应的订阅器</code></pre><h2 id="3-路由传值的区别"><a href="#3-路由传值的区别" class="headerlink" title="3.路由传值的区别:"></a>3.路由传值的区别:</h2><pre><code class="hljs angelscript"> path传值特点:​     <span class="hljs-number">1.</span>不可以传对象​     <span class="hljs-number">2.</span>动态路由  path:公共组件儿/:传值​     <span class="hljs-number">3.</span>传值会暴露在地址栏中   <span class="hljs-keyword">get</span>query传值的特点  ​     <span class="hljs-number">1.</span>配合path动态路由  一个公共组件儿搭载多个路由文件​     <span class="hljs-number">2.</span>query传值可以传对象​     <span class="hljs-number">3.</span>在地址栏中暴露params传值 特点​     <span class="hljs-number">1.</span>配合我们的命名路由搭配使用​     <span class="hljs-number">2.</span>不能配合path动态路由​     <span class="hljs-number">3.</span>刷新页面丢失​     <span class="hljs-number">4.</span>命名路由按照名字查找对应的router-link文件​     <span class="hljs-number">5.</span>传值不展示在地址栏中</code></pre><p><strong>写法:</strong></p><pre><code class="hljs xquery">path:&#123;<span class="hljs-built_in"> path</span>: <span class="hljs-string">&#x27;/child/:id&#x27;</span>, component: Child&#125;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;/child/1&quot;</span>&gt;</span> 跳转到子路由 <span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span>this.<span class="hljs-variable">$router</span>.push(&#123; <span class="hljs-built_in"> path</span>:<span class="hljs-string">&#x27;/child/$&#123;id&#125;&#x27;</span>,&#125;)query:&#123;<span class="hljs-built_in"> path</span>: <span class="hljs-string">&#x27;/child,</span><span class="hljs-string"> name: &#x27;</span>Child<span class="hljs-string">&#x27;,</span><span class="hljs-string"> component: Child</span><span class="hljs-string">&#125;</span><span class="hljs-string"></span><span class="hljs-string">&lt;router-link :to=&quot;&#123;name:&#x27;</span>Child<span class="hljs-string">&#x27;,query:&#123;id:1&#125;&#125;&quot;&gt;跳转到子路由&lt;/router-link&gt;</span><span class="hljs-string"></span><span class="hljs-string">this.$router.push(&#123;</span><span class="hljs-string">  name:&#x27;</span>Child<span class="hljs-string">&#x27;,</span><span class="hljs-string">  query:&#123;</span><span class="hljs-string">   id:1</span><span class="hljs-string">  &#125;</span><span class="hljs-string">&#125;)</span><span class="hljs-string"></span><span class="hljs-string">params:</span><span class="hljs-string">&#123;</span><span class="hljs-string"> path: &#x27;</span>/child,<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;Child&#x27;</span>, component: Child&#125;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123;name:&#x27;Child&#x27;,params:&#123;id:1&#125;&#125;&quot;</span>&gt;</span>跳转到子路由<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span>this.<span class="hljs-variable">$router</span>.push(&#123; <span class="hljs-built_in"> name</span>:<span class="hljs-string">&#x27;Child&#x27;</span>,  params:&#123;  <span class="hljs-built_in"> id</span>:<span class="hljs-number">1</span>  &#125;&#125;)</code></pre><h2 id="4-什么是虚拟DOM"><a href="#4-什么是虚拟DOM" class="headerlink" title="4.什么是虚拟DOM"></a>4.什么是虚拟DOM</h2><p>虚拟DOM不会进行排版与重绘操作,虚拟DOM相当于在js和真实dom中间加了一个缓存,利用dom diff算法避免了没有必要的dom操作,从而提高性能.</p><p>具体实现步骤:<br>        1.用JavaScript对象结构表示DOM树的结构然后用这个树构建一个真正的DOM树,插到文档中<br>        2.当状态变更的时候,重新构造一棵树的对象树,然后用新的树和旧的树行对比,记录两棵树差异<br>        3.把2所记录的差异应用到步骤1所构建的真正的DOM树上,视图就更新了</p><h2 id="5-单页面应用-SPA"><a href="#5-单页面应用-SPA" class="headerlink" title="5.单页面应用(SPA)"></a>5.单页面应用(SPA)</h2><p><strong>单页面应用指的是只有一个主页面的应用,包含了所有的(html,css,js).所有的页面内容都包含在了这个所谓的主页面中,在书写的时候,页面片段还是分开写的,然后在交互的时候通过路由程序动态的载入,单页面的应用在进行页面跳转的时候,只刷新他的局部资源,多用于pc端的开发.</strong></p><p>单页面应用的特点:</p><p>1,用户体验比较好,快,内容的改变不需要重新加载整个页面,对服务器的压力比较比较小.</p><p>2,前后端分离</p><p>3,可以设置一些比较炫酷的动画(比如切换页面的是后设置一些专场动画什么的)</p><p>单页面应用的缺点:</p><p>1,不利于seo</p><p>2,导航不可用,如果一定要设置导航的话,需要自行的实现前进,后退的功能（由于是单页面不能用浏览器的前进后退功能，所以需要自己建立堆栈管理）</p><p>3,初次加载的时候比较耗的时间比较多</p><p>4,页面的复杂度提高了很多</p><p>多页面（MPA），就是指一个应用中有多个页面，页面跳转时是整页刷新。</p><p>多页面的缺点：<br>页面切换加载缓慢，用户体验不好，流畅度差。</p><h2 id="6-for…in和for…of的区别"><a href="#6-for…in和for…of的区别" class="headerlink" title="6.for…in和for…of的区别"></a>6.for…in和for…of的区别</h2><p>for…of是es6中的新方法,修改了es5中for…in的不足</p><p>for…in循环出的是key,for…of循环出的是value</p><p>for…of不能循环普通的对象,需要通过object,keys()搭配使用</p><p>推荐在循环对象的时候使用for…in,在循环数组的时候使用for…of</p><h2 id="7-vuex的数据流向"><a href="#7-vuex的数据流向" class="headerlink" title="7.vuex的数据流向"></a>7.vuex的数据流向</h2><p>只用来读取的状态,集中放在store中； 改变状态的方式是提交mutations，这是个同步的事物； 异步逻辑应该封装在action中。</p><p><strong>页面的组件通过Dispatch 来调用Vuex的Actions 进行Actions逻辑处理数据，将处理好的数据通过commit 进行Mutations 中的数据逻辑处理,并且修改state中的存储的数据，state 是响应式的，只要state中的数据发生修改，会重新渲染组件.</strong></p><p><strong>vuex中的五种属性:</strong></p><p>分别是 State、 Getter、Mutation 、Action、 Module</p><p><strong>state</strong><br>Vuex 使用单一状态树,即每个应用将仅仅包含一个store 实例，但单一状态树和模块化并不冲突。存放的数据状态，不可以直接修改里面的数据。</p><p><strong>getters</strong><br>类似vue的计算属性，主要用来过滤一些数据。</p><p><strong>action</strong><br>actions可以理解为通过将mutations里面处里数据的方法变成可异步的处理数据的方法，简单的说就是异步操作数据。view 层通过 store.dispath 来分发 action。</p><p><strong>mutations</strong></p><p>定义的方法动态修改Vuex 的 store 中的状态或数据。</p><p><strong>Module</strong></p><p>相当于vuex的一个类;各个模块之间的vuex的操作都可以进行划分,各模块的方法好区分及维护;</p><p><strong>vuex 中核心原理</strong>：通过vue 实例，将state数据赋值给data()</p><p><strong>vuex的State特性是？</strong><br>1、<strong>Vuex就是一个仓库</strong>，仓库里面放了很多对象。涉及多个组件储存的公共数据<br>其中state就是数据源存放地，对应于与一般Vue对象里面的data<br>2、<strong>state里面存放的数据是响应式的</strong>，Vue组件从store中读取数据，若是store中的数据发生改变，依赖这个数据的组件也会发生更新<br>3、它通过mapState把全局的 state 和 getters 映射到当前组件的 computed 计算属性中</p><p><strong>vuex的Getter特性是？</strong><br>1、getters 可以对State进行计算操作，它就是Store的计算属性<br>2、 虽然在组件内也可以做计算属性，但是<strong>getters 可以在多组件之间复用</strong><br>3、 如果一个状态只在一个组件内使用，是可以不用getters</p><p><strong>Action 的Mutation区别是？</strong><br>1、Action 类似于 mutation，不同在于：<br>2、Action 提交的是 mutation，而不是直接变更状态。<br>3、Action 可以包含任意异步操作。</p><p>4、定义的方法动态修改Vuex 的 store 中的状态或数据,同步操作。</p><h2 id="8-computed和watch区别"><a href="#8-computed和watch区别" class="headerlink" title="8.computed和watch区别"></a>8.computed和watch区别</h2><p><strong>computer</strong> 计算属性.通过计算得出的属性就是计算属性</p><p>计算属性可以是一个函数或者是一个getter和setter组成的对象</p><p><strong>watch</strong> 监听/侦察.当数据变化时执行一个函数</p><p>watch属性可以是字符串、函数、对象、数组</p><p>拥有<strong>deep，immediate</strong>两属性</p><p><strong>computed（计算属性）有缓存</strong><br>watch时刻监听data中的数据，无缓存，一旦在跟组件中写<strong>watch，则一直时刻监听，浪费性能</strong></p><p>一般的话不推荐使用watch()</p><p><strong>computed 和 watch 的使用场景不一样</strong><br>    computed 是通过几个数据的变化，来影响一个数据，<br>    watch是可以一个数据的变化，去影响多个数据。  </p><p><strong>computed和methods的区别:</strong><br>    computed是属性调用，通过<code>&#123;&#123;computed方法名&#125;&#125;</code>就可以调用<br>    methods是函数调用，需要通过<code>&#123;&#123;methods方法名+()&#125;&#125;</code>才可以调用</p><h2 id="9、什么是闭包"><a href="#9、什么是闭包" class="headerlink" title="9、什么是闭包"></a>9、什么是闭包</h2><p>​    闭包是在函数里面定义一个子函数，子函数可以是匿名函数，该子函数能够读写父函数的局部变量,</p><p>​    在使用闭包的过程中<strong>不会释放外部的引用</strong>，<strong>闭包函数内部的值会得到保留</strong>。<br>​    闭包里面的匿名函数，读取变量的顺序，<strong>先读取本地变量，再读取父函数的局部变量</strong>。<br>​    对于<strong>闭包外部无法引用它内部的变量</strong>，所以说在函数内部创建的变量<strong>执行完后要立刻释放资源</strong>(也就是说把里面的变量清掉)，这样的话:不污染全局对象<br>​    如果<strong>使用不当</strong>的情况下可能会<strong>导致内存泄漏</strong>，因为没有释放外部引用，但是合理的使用闭包是内存使用不是内存泄漏</p><h2 id="10-new一个对象-这个过程发生了什么"><a href="#10-new一个对象-这个过程发生了什么" class="headerlink" title="10.new一个对象,这个过程发生了什么?"></a>10.new一个对象,这个过程发生了什么?</h2><p>var obj = new Object(“name”,”zhangsan”)</p><p>创建一个新对象,如:var obj = {};</p><p>然后将新对象的proto属性指向构造函数的原型对象.</p><p>将构造函数的作用域赋值给新对象,<strong>就是改变this指向</strong>(将this指向新的对象)</p><p>执行构造函数内部的代码,新属性添加给obj的this对象.</p><p>最后返回新的对象.</p><h2 id="11-原型和原型链与原型对象和constructor属性"><a href="#11-原型和原型链与原型对象和constructor属性" class="headerlink" title="11.原型和原型链与原型对象和constructor属性"></a>11.原型和原型链与原型对象和constructor属性</h2><p>​    prototype：此属性只有构造函数才有，这个属性指向实例对象的<strong>原型对象</strong>,通过构造函数生成实例的时候都会为实例分配prototype(原型对象)。<br>​    __proto__：这个是任何对象在创建时都会有的一个属性，它指向了产生<strong>当前对象的构造函数的原型对象</strong>，由于并非标准规定属性，不要随便去更改这个属性的值，以免破坏原型链，但是可以借助这个属性来学习，所谓的原型链就是由__proto__连接而成的链。</p><p>当读取某个对象的某个属性时都会执行一次搜索,首先从实例中找,如果没有找到的话,就去原型的原型上去找,就这样一直找到最顶层的Object.prototype,还是找不到,就会返回一个undefined</p><p><strong>constructor</strong>:属性执行创建实例对象的构造函数</p><h2 id="12-箭头函数this指向与普通函数的区别"><a href="#12-箭头函数this指向与普通函数的区别" class="headerlink" title="12.箭头函数this指向与普通函数的区别"></a>12.箭头函数this指向与普通函数的区别</h2><p>箭头函数中的this指向:定义函数所在位置的对象<br>    不可以当作构造函数 不能使用new关键字<br>    不可以使用arguments对象（伪数组  …扩展运算符：作用copy数组）<br>区别：</p><p>​    <strong>普通函数中this指向可以改变，普通函数中this谁调用指向谁</strong></p><p>​    <strong>箭头函数中的this是固定的,指向定义函数所在位置</strong></p><p><strong>改变this指向的方法:</strong></p><p><a href="https://www.jianshu.com/p/b86002cc4639">https://www.jianshu.com/p/b86002cc4639</a></p><p>​    1,call()方法,调用方法fun.call(thisArg, arg1, arg2, …)</p><p>​    2,apply()方法,调用方法fun.apply(thisArg, [argsArray])</p><p>​    3,bind()方法,fun.bind(thisArg, arg1, arg2, …)</p><p>区别:</p><p>apply() 与call（）非常相似，不同之处在于提供参数的方式，apply（）使用参数数组，而不是参数列表</p><p>bind()在react中常用,不会调用函数, 可以改变函数内部this指向.</p><h2 id="13-android-和-ios开发中遇到的问题"><a href="#13-android-和-ios开发中遇到的问题" class="headerlink" title="13.android 和   ios开发中遇到的问题"></a>13.android 和   ios开发中遇到的问题</h2><p><strong>(1)、iOS 滑动不流畅</strong><br>    q:上下滑动页面会产生卡顿，手指离开页面，页面立即停止运动。整体表现就是滑动不流畅，没有滑动惯性。</p><p>1.在滚动容器上增加滚动 touch 方法</p><p>将-webkit-overflow-scrolling 值设置为 touch</p><p>2.设置 overflow</p><p>设置外部 overflow 为 hidden,设置内容元素 overflow 为 auto。内部元素超出 body 即产生滚动，超出的部分 body 隐藏。</p><p><strong>(2)、iOS 上拉边界下拉出现白色空白</strong><br>    q：手指按住屏幕下拉，屏幕顶部会多出一块白色区域。手指按住屏幕上拉，底部多出一块白色区域。<br>    在 iOS 中，手指按住屏幕上下拖动，会触发 touchmove 事件。这个事件触发的对象是整个 webview 容器，容器自然会被拖动，剩下的部分会成空白。</p><p>a:监听事件禁止滑动<br>    滚动妥协填充空白，装饰成其他功能</p><p><strong>(3)、click 点击事件延时与穿透</strong></p><p>使用 fastclick 库</p><p><strong>(4)、软键盘将页面顶起来、收起未回落问题</strong></p><p>q:Android 手机中，点击 input 框时，键盘弹出，将页面顶起来，导致页面样式错乱。移开焦点时，键盘收起，键盘区域空白，未回落。</p><p>a:软键盘将页面顶起来的解决方案，主要是通过监听页面高度变化，强制恢复成弹出前的高度。</p><h2 id="14-require-和-import-区别"><a href="#14-require-和-import-区别" class="headerlink" title="14.require 和  import 区别"></a>14.require 和  import 区别</h2><p><strong>遵循规范</strong><br>–require 是 AMD规范引入方式<br>–import是es6的一个语法标准，如果要兼容浏览器的话必须转化成es5的语法</p><p><strong>调用时间</strong></p><p>–require是运行时调用，所以require理论上可以运用在代码的任何地方</p><p>–import是编译, 时调用，所以必须放在文件开头</p><p><strong>本质</strong></p><p>–require是赋值过程，其实require的结果就是对象、数字、字符串、函数等，再把require的结果赋值给某个变量</p><p>–import是解构过程，但是目前所有的引擎都还没有实现import，我们在node中使用babel支持ES6，也仅仅是将ES6转码为ES5再执行，import语法会被转码为require</p><p><strong>node的module遵循CommonJS规范，requirejs遵循AMD，seajs遵循CMD，虽各有不同，但总之还是希望保持较为统一的代码风格。</strong></p><h2 id="15-Hash和history的区别"><a href="#15-Hash和history的区别" class="headerlink" title="15.Hash和history的区别"></a>15.Hash和history的区别</h2><p>hash模式的原理是onhashchange事件</p><p>1,地址栏url中显示</p><p>​    hash有#显示,history没有;<strong>vue默认使用hash</strong></p><p>2,请求方式</p><p>​    hash的#虽然出现在url中,但是不会包含在http请求中,对后端没有影响,因此改变hash不会重新加载页面</p><p>​    在history模式中，刷新一下网页，明显可以看到请求url为完整的url，url完整地请求了后端</p><p>3,history模式下:<strong>提供了对历史记录进行修改的功能, back、forward、go方法</strong></p><p>​    利用了 HTML5 History Interface 中新增的 pushState() 和 replaceState() 方法。（需要特定浏览器支持）<br>这两个方法应用于浏览器的历史记录栈，在当前已有的 back、forward、go 的基础之上，它们提供了对历史记录进行修改的功能。只是当它们执行修改时，虽然改变了当前的 URL，但浏览器不会立即向后端发送请求。</p><p>通过history api,可以对浏览器的历史记录栈进行修改,但是只要刷新页面就会加载请求,（如果后端没有准备的话），则会刷新出来404页面。</p><h2 id="16-MVVM和MVC"><a href="#16-MVVM和MVC" class="headerlink" title="16.MVVM和MVC"></a>16.MVVM和MVC</h2><p>anjular–mvvm</p><p>vue–mvvm</p><p>react–mvc<br>​    MVC 和 MVVM 都是一种设计思想     mvc中 的  controller 演变成 MVVM中的 viewmodel<br>​    mvvm解决了 MVC中大量的DOM操作使得页面渲染性能变低，加载速度变低，影响用户体验。</p><p><a href="https://so.csdn.net/so/search?q=MVC&spm=1001.2101.3001.7020">MVC</a><strong>设计模式</strong></p><ul><li>M - Model  数据：数据实体,用来保存页面要展示的数据.</li><li>V - View      视图：负责显示数据的,一般其实就是指的html页面.</li><li>C - Controller 控制器： 控制整个业务逻辑,负责处理数据,比如数据的获取,以及数据的过滤，进而影响数据在视图上的展示.</li></ul><p><a href="https://so.csdn.net/so/search?q=MVVM&spm=1001.2101.3001.7020">MVVM</a><strong>设计模式</strong></p><ul><li>M - Model 数据：它是与应用程序的业务逻辑相关的数据的封装载体</li><li>V - View 视图：它专注于界面的显示和渲染</li><li>VM - ViewModel 视图-数据：它是View和Model的粘合体，负责View和Model的交互和协作</li></ul><p><a href="https://so.csdn.net/so/search?q=Angular&spm=1001.2101.3001.7020">Angular</a>是MVC还是<strong>MVVM</strong></p><ul><li>MVC的界面和逻辑关联紧密，数据直接从数据库读取。MVVM的界面与viewmodel是松耦合，界面数据从viewmodel中获取。所以angularjs更倾向于mvvm</li></ul><p><strong>MVVM的优点</strong></p><ol><li>低耦合：View可以独立于Model变化和修改，同一个ViewModel可以被多个View复用；并且可以做到View和Model的变化互不影响；</li><li>可重用性：可以把一些视图的逻辑放在ViewModel，让多个View复用；</li><li>独立开发：开发人员可以专注与业务逻辑和数据的开发<br>ViewModemvvm设计人员可以专注于UI(View)的设计；</li><li>可测试性：清晰的View分层，使得针对表现层业务逻辑的测试更容易，更简单。</li></ol><h2 id="17-移动端的性能优化"><a href="#17-移动端的性能优化" class="headerlink" title="17.移动端的性能优化"></a>17.移动端的性能优化</h2><p>​    1、首屏加载 按需加载  懒加载<br>​    2、资源预加载</p><h2 id="18、从输入-URL-到获取页面的完整过程"><a href="#18、从输入-URL-到获取页面的完整过程" class="headerlink" title="18、从输入 URL 到获取页面的完整过程"></a>18、从输入 URL 到获取页面的完整过程</h2><p>​    1、域名解析(查询DNS),获取域名对应的 IP地址，查询浏览器缓存<br>​    2、浏览器与服务器建立TCP连接<br>​    3、浏览器向服务器发送http 请求<br>​    4、服务器接收到请求后，根据路径参数，经过后端的一些处理,生成html代码 返回浏览器<br>​    5、浏览器拿到完整的HTML页面代码开始解析和渲染<br>​    6、浏览器根据拿到的资源对页面进行渲染 把一个完整的页面渲染出来</p><h2 id="三次握手-四次挥手"><a href="#三次握手-四次挥手" class="headerlink" title="三次握手,四次挥手"></a>三次握手,四次挥手</h2><p>三次握手是建立连接,四次挥手是关闭一个TCP连接</p><p><strong>三次握手:</strong></p><p>1,客户端==&gt;服务端(连接请求)</p><p>2,服务端==&gt;客户端(授予请求)</p><p>3,客户端==&gt;服务端(确认请求)</p><p><strong>四次挥手:</strong></p><p>客户端：我数据传完了，我要下线了<br>服务器：知道了，我还有点数据，你等下<br>   一段时间后:<br>服务器：我数据发完了，你可以下线了<br>客户端：好的<br>    首先是客户端发送给服务端的，发送请求报文我要断开了，此时，服务器接受到消息，就知道客户端想要和我断开，会立刻返回一个确认报文给客户端，因为此时服务器可能还有一些信息没有处理完成，就说，你等等，然后稍等片刻会给客户端发送一个消息，就说我这边消息已经发完了，你可以断开了，但是此时服务器不知道客户端是否能够收到消息，所以说最后客户端会返回一个确认报文,这样服务端才知道客户端是收到了同意分手的消息的，只有这样才能保证接的安全性，少一次都不行。</p><p><a href="https://blog.csdn.net/whuslei/article/details/6667471">https://blog.csdn.net/whuslei/article/details/6667471</a></p><h2 id="19、前端优化方法"><a href="#19、前端优化方法" class="headerlink" title="19、前端优化方法　　"></a>19、前端优化方法　　</h2><p>​    1、减少HTTP请求：通过将多个前端资源合并成一个实现减少HTTP请求提高性能。　　<br>​    2、设置响应头字段是部分及时性要求不高的静态资源在缓存在前端浏览器中。　　<br>​    3、启用传输压缩。例如gzip。　　<br>​    4、合理的布局前端代码结构，css，html，js代码的顺序由上至下。　　<br>​    5、对于一些可公开访问的资源，可以通过设置其他的域名的方式减少传输过程中的cookie。　　<br>​    6、使用CDN分发，将静态资源部署在各大网络运营商的机房中，这样子用户就可以非常快的就近获得资源。　　<br>​    7、使用反向代理将热门内容，静态资源或者一些可被缓存的计算结果缓存在代理服务器中。通过配置代理服务器可以实现代理服务器直接转发被缓存的资源。</p><h2 id="20、keep-alive"><a href="#20、keep-alive" class="headerlink" title="20、keep-alive"></a>20、keep-alive</h2><p>keep-alive:主要用于保留组件状态或避免重新渲染。<br>组件的缓存也是基于VNode节点的而不是直接存储DOM结构。它将满足条件（pruneCache与pruneCache）的组件在cache对象中缓存起来，在需要重新渲染的时候再将vnode节点从cache对象中取出并渲染。<br>被keep-alive包含的组件/路由，会多出两个生命周期：actived和deactived，actived在组件第一次渲染时会被调用，之后调用每次缓存组件被激活时调用机制，第一次进入缓存路由/组件，在mounted后面，beforeRouteEnter守卫传给next的回调函数之前调用</p><p>include包含的组件会被进行缓存，exclude包含的组件不会被缓存</p><h2 id="21、diff算法"><a href="#21、diff算法" class="headerlink" title="21、diff算法"></a>21、diff算法</h2><p>1.把树形结构按照层级分解,只比较同级元素<br>​    2.给列表结构的每个单元添加key属性,方便比较。在实际代码中,会对新旧两棵树进行一个深度优先的遍历,这样每个节点都会有一个标记<br>​    3.在深度优先遍历的时候,每遍历到一个节点就把该节点和新的树进行对比。如果有差异的话就记录到一个对象里面<br>​    Vritual DOM算法主要实现上面步骤的三个函数: element，diff，patch。然后就可以实际的进行使用<br>​    react只会匹配相同的class的component(这里的class指的是组件的名字)<br>​    合并操作,调用component的setState方法的时候，React将其标记为dirty。到每一个时间循环借宿，React检查所有标记dirty的component重新绘制<br>​    4.选择性子树渲染,可以重写shouldComponentUpdate提高diff的性能</p><h2 id="22、浏览器兼容性问题"><a href="#22、浏览器兼容性问题" class="headerlink" title="22、浏览器兼容性问题"></a>22、浏览器兼容性问题</h2><p>1.不同浏览器的默认margin和padding不同<br>解决方案：css里加通配符*{margin：0；padding：0}<br>2.图片默认有间距<br>解决方案：使用float（浮动）给图片布局<br>3.边距重叠问题；就是当相邻两个元素都设置了margin边距时，margin将取最大值，舍弃最小值<br>解决方案：<br>外层元素padding代替<br>    外层元素 overflow:hidden;<br>    内层元素绝对定位 postion:absolute:<br>    内层元素 加float:left;或display:inline-block;<br>    内层元素padding:1px;<br>    内层元素透明边框 border:1px solid transparent;<br>4.const声问题  就是Firefox（火狐浏览器）下，可以使用const关键字来定义常量；IE下，只能使用var关键字来定义常量。<br>        解决方法：统一使用var关键字来定义常量。</p><h2 id="23、vue-router钩子函数"><a href="#23、vue-router钩子函数" class="headerlink" title="23、vue-router钩子函数"></a>23、vue-router钩子函数</h2><p>​    全局的路由钩子函数：beforeEach、afterEach</p><pre><code class="hljs mipsasm">单个的路由钩子函数：<span class="hljs-keyword">beforeEnter</span><span class="hljs-keyword"></span><span class="hljs-keyword">组件内的路由钩子函数：beforeRouteEnter、beforeRouteLeave、beforeRouteUpdate</span></code></pre><p><strong>beforeEnter</strong> 有三个参数：</p><blockquote><p>to: 路由将要跳转的路径信息，信息是包含在对像里边的。</p><p>from: 路径跳转前的路径信息，也是一个对象的形式。</p><p>next: 路由的控制参数，常用的有next(true)和next(false)。</p></blockquote><p><strong>beforeRouteEnter</strong></p><blockquote><p>在路由进入前的钩子函数</p><p>不！能！获取组件实例 <code>this</code></p><p>因为组件实例还没被创建</p></blockquote><p><strong>beforeRouteUpdate</strong></p><blockquote><p>当前路由改变，该组件被复用时</p><p>对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</p><p>可以访问组件实例 <code>this</code></p></blockquote><p><strong>beforeRouteLeave</strong></p><blockquote><p>在路由离开前的钩子函数</p><p>可以访问组件实例 <code>this</code></p></blockquote><h2 id="24、VUE与React的区别"><a href="#24、VUE与React的区别" class="headerlink" title="24、VUE与React的区别"></a>24、VUE与React的区别</h2><p>相同点：<br>1.React采用特殊的JSX语法，Vue.js在组件开发中也推崇编写.vue特殊文件格式，对文件内容都有一些约定，两者都需要编译后使用；</p><p>2.中心思想相同：一切都是组件，组件实例之间可以嵌套；都提供合理的钩子函数，可以让开发者定制化地去处理需求；都不内置列数AJAX，Route等功能到核心包，而是以插件的方式加载；在组件开发中都支持mixins的特性。<br>不同点：<br>React采用的Virtual DOM(虚拟dom,dom树的虚拟表现)会对渲染出来的结果做脏检查；Vue.js在模板中提供了指令，过滤器等，可以非常方便，快捷地操作Virtual DOM。</p><p>1.数据更改的方面:<br>所以在react中，是单向数据流，react在setState之后会重新走渲染的流程，如果shouldComponentUpdate返回的是true，就继续渲染，如果返回了false，就不会重新渲染.</p><p>而vue的思想是响应式的，也就是基于是数据可变的，通过对每一个属性建立Watcher来监听，当属性变化的时候，响应式的更新对应的虚拟dom。</p><p>react的性能优化需要手动去做，而vue的性能优化是自动的，但是vue的响应式机制也有问题，就是当state特别多的时候，Watcher也会很多，会导致卡顿，所以大型应用（状态特别多的）一般用react，更加可控<br>2.通过js来操作一切，还是用各自的处理方式<br>react的思路all in js,是通过js来生成html，所以设计了jsx，还有通过js来操作css，社区的styled-component、jss等，</p><p>vue是把html，css，js组合到一起，用各自的处理方式，vue有单文件组件，可以把html、css、js写到一个文件中，html提供了模板引擎来处理。</p><h2 id="25、route和router的区别"><a href="#25、route和router的区别" class="headerlink" title="25、route和router的区别"></a>25、route和router的区别</h2><p>​    route是“路由信息对象”，包括path,params,hash,query,fullPath,matched,name等路由信息参数.</p><p>​    而router是“路由实例”包括了路由的跳转方法，钩子函数等、</p><h2 id="26、Vue-js的两个核心是什么？"><a href="#26、Vue-js的两个核心是什么？" class="headerlink" title="26、Vue.js的两个核心是什么？"></a>26、Vue.js的两个核心是什么？</h2><p>​    数据驱动，组件系统</p><h2 id="27、vue常用的修饰符"><a href="#27、vue常用的修饰符" class="headerlink" title="27、vue常用的修饰符"></a>27、vue常用的修饰符</h2><p>​    <strong>.stop</strong> 阻止事件冒泡,使用了.stop后，点击子节点不会捕获到父节点的事件</p><p>​    <strong>.prevent</strong>    用于取消默认事件</p><p>​    <strong>.capture</strong>    与事件冒泡的方向相反，事件捕获由外到内,捕获事件：嵌套两三层父子关系，然后所有都有点击事件，点击子节点，就会触发从外至内 父节点-》子节点的点击事件</p><p>​    <strong>.once</strong>只执行一次，如果我们在@click事件上添加.once修饰符，只要点击按钮只会执行一次。</p><p>​    <strong>.number</strong>     将输出字符串转为Number类型·（虽然type类型定义了是number类型，但是如果输入字符串，输出的是string）</p><p>​    <strong>.trim</strong>    自动过滤用户输入的首尾空格</p><h2 id="28、http状态码301-302的区别，304是啥"><a href="#28、http状态码301-302的区别，304是啥" class="headerlink" title="28、http状态码301 302的区别，304是啥"></a>28、http状态码301 302的区别，304是啥</h2><p><strong>200 OK</strong>是见得最多的成功状态码</p><p><strong>301 redirect: 301</strong> 代表永久性转移(Permanently Moved)<br>​<strong>302 redirect: 302</strong> 代表暂时性转移(Temporarily Moved )</p><p><strong>304 Not Modified</strong>: 当协商缓存命中时会返回这个状态码</p><p>401        请求的格式不对</p><p><strong>403 Forbidden</strong>: 这实际上并不是请求报文出错，而是服务器禁止访问</p><p><strong>404 Not Found</strong>: 资源未找到</p><p><strong>500 Internal Server Error</strong>: 仅仅告诉你服务器出错了</p><p><strong>503 Service Unavailable</strong>: 表示服务器当前很忙，暂时无法响应服务。</p><h2 id="29、强缓存和协商缓存"><a href="#29、强缓存和协商缓存" class="headerlink" title="29、强缓存和协商缓存"></a>29、强缓存和协商缓存</h2><p>强缓存：直接使用本地的缓存，不用跟服务器通信</p><p>协商缓存：将资源一些相关信息返回服务器，让服务器判断浏览器是否能直接使用 本地缓存，整个过程至少与服务器通信一次</p><h2 id="30、事件委托-、-优缺点"><a href="#30、事件委托-、-优缺点" class="headerlink" title="30、事件委托 、 优缺点"></a>30、事件委托 、 优缺点</h2><p>​    事件委托是利用事件冒泡原理，让节点的父级代为执行事件。而不需要循环遍历元素的子节点，大大减少dom操作；<br>缺点：<br>1.不适应所有的事件，只适用于支持事件冒泡的事件<br>2.原理上执行就近委托</p><h2 id="31、前端工程化思想"><a href="#31、前端工程化思想" class="headerlink" title="31、前端工程化思想"></a>31、前端工程化思想</h2><p><a href="https://www.jianshu.com/p/88ed70476adb">https://www.jianshu.com/p/88ed70476adb</a></p><p>​    前端工程化是使用软件工程的技术和方法来进行前端的开发流程、技术、工具、经验等规范化、标准化，其主要目的为了提高效率和降低成本，即提高开发过程中的开发效率，减少不必要的重复工作时间，而前端工程本质上是软件工程的一种，因此我们应该从软件工程的角度来研究前端工程。<br>​    前端工程化就是为了让前端开发能够“自成体系”，个人认为主要应该从<strong>模块化、组件化、规范化、自动化</strong>四个方面思考。<br>​    <strong>1、模块化</strong><br>​    简单来说，模块化就是将一个大文件拆分成相互依赖的小文件，再进行统一的拼装和加载。<br>​    JS的模块化<br>​    在ES6之前，JavaScript一直没有模块系统，这对开发大型复杂的前端工程造成了巨大的障碍。对此社区制定了一些模块加载方案，如CommonJS、AMD和CMD等。<br>​    css的模块化<br>​    虽然SASS、LESS、Stylus等预处理器实现了CSS的文件拆分，但没有解决CSS模块化的一个重要问题：选择器的全局污染问题。</p><p>​    资源的模块化<br>Webpack的强大之处不仅仅在于它统一了JS的各种模块系统，取代了Browserify、RequireJS、SeaJS的工作。更重要的是它的万能模块加载理念，即所有的资源都可以且也应该模块化。<br>依赖关系单一化。所有CSS和图片等资源的依赖关系统一走JS路线，无需额外处理CSS预处理器的依赖关系，也不需处理代码迁移时的图片合并、字体图片等路径问题；<br>资源处理集成化。现在可以用loader对各种资源做各种事情，比如复杂的vue-loader等等；<br>项目结构清晰化。使用Webpack后，你的项目结构总可以表示成这样的函数： dest = webpack(src, config)。</p><p><strong>2、组件化</strong><br>从UI拆分下来的每个包含模板(HTML)+样式(CSS)+逻辑(JS)功能完备的结构单元，我们称之为组件。</p><p>组件化≠模块化。模块化只是在文件层面上，对代码或资源的拆分；而组件化是在设计层面上，对UI（用户界面）的拆分。</p><p>其实，组件化更重要是一种分治思想。</p><p><strong>3、规范化</strong><br>规范化其实是工程化中很重要的一个部分，项目初期规范制定的好坏会直接影响到后期的开发质量。</p><p>目录结构的规范<br>编码规范<br>前后端接口规范</p><p><strong>4、自动化</strong><br>前端工程化的很多脏活累活都应该交给自动化工具完成。任何简单机械的重复劳动都应该让机器完成<br>图标合并<br>持续继承<br>自动化构建<br>自动化部署<br>自动化测试</p><h2 id="32、delete与vue-delete的区别"><a href="#32、delete与vue-delete的区别" class="headerlink" title="32、delete与vue.delete的区别"></a>32、delete与vue.delete的区别</h2><p>delete只是被删除的元素变成了 empty/undefined 其他的元素的键值还是不变。<br>Vue.delete 直接删除了数组 改变了数组的键值。</p><h2 id="33、设立”严格模式”的优点："><a href="#33、设立”严格模式”的优点：" class="headerlink" title="33、设立”严格模式”的优点："></a>33、设立”严格模式”的优点：</h2><ol><li>消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;</li><li>消除代码运行的一些不安全之处，保证代码运行的安全；</li><li>提高编译器效率，增加运行速度；</li><li>为未来新版本的Javascript做好铺垫。</li></ol><h2 id="34、类型强制Coercion"><a href="#34、类型强制Coercion" class="headerlink" title="34、类型强制Coercion"></a>34、类型强制Coercion</h2><p>是将值从一种类型转换为另一种类型的过程（例如字符串转换为数字，对象转换为布尔值等）。任何类型，无论是原始类型还是对象，都是类型强制的有效主体<br>　 coercion有两种表现形式：显式和隐式。</p><pre><code class="hljs x86asm"><span class="hljs-keyword">js</span>中的强制类型转换</code></pre><p>转换为数字方法一：Number（）<br>方法二：parseInt()<br>方法三：parseFloat()<br>方法四：加号运算符<br>转换为字符串方法一：toString()<br>方法二：String()<br>方法四：加号运算符<br>转换为布尔值方法一：Boolean()<br>方法二：逻辑运算符！</p><h2 id="36、性能优化"><a href="#36、性能优化" class="headerlink" title="36、性能优化"></a>36、性能优化</h2><h3 id="一-css优化"><a href="#一-css优化" class="headerlink" title="一.css优化"></a>一.css优化</h3><p>1.打包css文件</p><p>2.易维护：少用ID， !important，多用class</p><p>3.样式用外部样式，最好不要用行间样式，内嵌样式</p><p>4.选择器的层级最好不要超过4层，减少层级可减少渲染速度</p><p>5.可读性：类名的命名规范</p><p>6.可扩展性：css的整体设计，公用的样式抽取，减少冗余的，重复的样式</p><p>7.样式的引入放在头部</p><h3 id="二-js优化"><a href="#二-js优化" class="headerlink" title="二.js优化"></a>二.js优化</h3><p>1.打包js</p><p>2.减少全局变量，全局方法的定义</p><p>3.减少闭包的使用，避免多层循环的嵌套</p><p>4.减少dom节点的事件绑定</p><p>5.删除多余的代码，公用方法的抽取</p><p>6.减少http请求次数</p><p>7.js的引用放在底部</p><p>8.避免重写，重绘次数</p><p>9.行为与页面分离：js最好写在外部文件</p><p>10.按需加载,js的延迟加载 deffer</p><h3 id="三-h5的优化"><a href="#三-h5的优化" class="headerlink" title="三.h5的优化"></a>三.h5的优化</h3><p>1.减少多余的dom节点嵌套</p><p>2.标签的语义化使用，比如标题就用h1-h6，图文列表用figure figcaption，头部用 header，底部footer，导航nav，侧边菜单栏 aside，文章用article，模块用section等</p><p>3.使用数据缓存，sessionStorage，localStorage，离线缓存，indexedDB本地数据库</p><p>4.页面SEO的优化：title、keyword、description，图片的alt，a标签的title</p><h3 id="四-图片的优化"><a href="#四-图片的优化" class="headerlink" title="四.图片的优化"></a>四.图片的优化</h3><p>1.减小图片的的大小，小图标使用svg,png，背景图片用jpg</p><p>2.雪碧图的使用，减少对服务器的请求次数</p><p>3.图片预加载</p><p>4.字体图标的使用（阿里巴巴字体图标库IconFont）</p><h3 id="五-用户体验的优化"><a href="#五-用户体验的优化" class="headerlink" title="五.用户体验的优化"></a>五.用户体验的优化</h3><p>1.加载页面，请求接口的loading</p><p>2.页面的平滑滚动，颜色的渐变，适当的动画</p><p>3.减少操作次数，减少表单输入</p><p>4.优化页面加载的速度，缓存的合理使用，预加载的使用</p><p>5.操作图标的易读性</p><h2 id="37、-nextTick"><a href="#37、-nextTick" class="headerlink" title="37、$.nextTick"></a>37、$.nextTick</h2><p>异步操作dom</p><p>应用场景</p><p>下面了解下nextTick的主要应用的场景及原因。</p><ul><li>在Vue生命周期的created()钩子函数进行的DOM操作一定要放在Vue.nextTick()的回调函数中</li></ul><p>在created()钩子函数执行的时候DOM 其实并未进行任何渲染，而此时进行DOM操作无异于徒劳，所以此处一定要将DOM操作的js代码放进Vue.nextTick()的回调函数中。与之对应的就是mounted()钩子函数，因为该钩子函数执行时所有的DOM挂载和渲染都已完成，此时在该钩子函数中进行任何DOM操作都不会有问题 。</p><ul><li>在数据变化后要执行的某个操作，而这个操作需要使用随数据改变而改变的DOM结构的时候，这个操作都应该放进Vue.nextTick()的回调函数中。</li></ul><p>Vue.nextTick用于延迟执行一段代码，它接受2个参数（回调函数和执行回调函数的上下文环境），如果没有提供回调函数，那么将返回promise对象。</p><h2 id="38、vue2-0和vue3-0的区别"><a href="#38、vue2-0和vue3-0的区别" class="headerlink" title="38、vue2.0和vue3.0的区别"></a>38、<strong>vue2.0和vue3.0的区别</strong></h2><p>vue2.几版本之前都是使用object.defineProperty来实现双向数据绑定的</p><p>而在vue3.0中这个方法被取代了</p><ol><li>为什么要替换Object.defineProperty</li></ol><p>我感觉 替换不是因为不好，是因为有更好的方法使用效率更高</p><p>Object.defineProperty的缺点：</p><p>1.在Vue中，Object.defineProperty</p><p>无法监控到数组下标的变化，</p><p>导致直接通过数组的下标给数组设置值，不能实时响应。</p><ol start="2"><li>Object.defineProperty只能劫持对象的属性,因此我们需要对每个对象的每个属性进行遍历。</li></ol><p>Vue里，是通过递归以及遍历data对象来实现对数据的监控的，</p><p>如果属性值也是对象那么需要深度遍历,显然如果能劫持一个完整的对象，不管是对操作性还是性能都会有一个很大的提升。</p><p>而要取代它的Proxy有以下两个优点：</p><ol><li><p>可以劫持整个对象，并返回一个新对象</p></li><li><p>有13种劫持操作</p></li></ol><p><strong>vue3.0有了解吗？3.0在双向数据绑定方面有什么优化？</strong>–改用了proxy</p><p>vue3.0</p><p>改用proxy为双向数据绑定原理，有了解没?</p><p> 什么是Proxy？</p><p>Proxy是 ES6 中新增的一个特性，翻译过来意思是”代理”，用在这里表示由它来“代理”某些操作。 <strong>Proxy 让我们能够以简洁易懂的方式控制外部对对象的访问</strong>。</p><p>其功能非常类似于设计模式中的代理模式。</p><p>Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。</p><h2 id="39、图片上传原理"><a href="#39、图片上传原理" class="headerlink" title="39、图片上传原理"></a>39、图片上传原理</h2><p>图片是静态资源，计算机无法识别，以流的形式上传至服务器，服务器解析流，以字符串的形式返回一个链接地址，</p><h2 id="40、浏览器渲染"><a href="#40、浏览器渲染" class="headerlink" title="40、浏览器渲染"></a>40、浏览器渲染</h2><p>解析html以构建dom树 -&gt; 构建render树 -&gt; 布局render树 -&gt; 绘制render树</p><p><img src="/img/2021/2011110316263715.png"></p><h2 id="41、Event-currentTarget"><a href="#41、Event-currentTarget" class="headerlink" title="41、Event.currentTarget"></a>41、Event.currentTarget</h2><p>Event.target：返回触发事件的元素；</p><p>Event.currentTarget：返回绑定事件的元素。</p><h2 id="42、封装-vue-组件的过程"><a href="#42、封装-vue-组件的过程" class="headerlink" title="42、封装 vue 组件的过程?"></a>42、封装 vue 组件的过程?</h2><ul><li><p>首先，组件可以提升整个项目的开发效率。能够把页面抽象成多个相对独立的模块，解决了我们传统项目开 发：效率低、难维护、复用性等问题。</p></li><li><p>然后，使用 Vue.extend 方法创建一个组件，然后使用 Vue.component 方法注册组件。子组件需要数据，可以 在 props 中接受定义。而子组件修改好数据后，想把数据传递给父组件。可以采用 emit 方法</p></li></ul><h2 id="43-重绘和重排（重流）的关系"><a href="#43-重绘和重排（重流）的关系" class="headerlink" title="43.重绘和重排（重流）的关系"></a>43.重绘和重排（重流）的关系</h2><p><strong>回流必将引起重绘，而重绘不一定会引起回流</strong></p><ul><li>重绘：当渲染树中的元素外观（如：颜色）发生改变，不影响布局时，产生重绘</li><li>回流：当渲染树中的元素的布局（如：尺寸、位置、隐藏/状态状态）发生改变时，产生重绘回流</li></ul><p><strong>如何最小化重绘(repaint)和回流(reflow)？</strong><br>需要要对元素进行复杂的操作时，可以先隐藏(display:”none”)，操作完成后再显示<br>需要创建多个 DOM 节点时，使用 DocumentFragment 创建完后一次性的加入 document<br>缓存 Layout 属性值，如：var left = elem.offsetLeft; 这样，多次使用 left 只产生一次回流<br>尽量避免用 table 布局（table 元素一旦触发回流就会导致 table 里所有的其它元素回流）<br>避免使用 css 表达式(expression)，因为每次调用都会重新计算值（包括加载页面）,而且，css表达式是IE独有的，不建议使用<br>尽量使用 css 属性简写，如：用 border 代替 border-width, border-style, border-color 批量修改元素样式：elem.className 和 elem.style.cssText 代替 elem.style.xxx</p><h2 id="44-js的内置函数有哪些"><a href="#44-js的内置函数有哪些" class="headerlink" title="44.js的内置函数有哪些?"></a>44.js的内置函数有哪些?</h2><pre><code class="hljs arduino">数学函数:<span class="hljs-built_in">sin</span>方法    返回一个数的正弦值<span class="hljs-built_in">cos</span>方法    返回一个数的余弦值<span class="hljs-built_in">random</span>方法    返回一个<span class="hljs-number">0</span><span class="hljs-number">-1</span>之间的随机数<span class="hljs-built_in">parseInt</span>方法    返回从字符串转换过来的整数</code></pre><pre><code class="hljs excel">字符串函数<span class="hljs-symbol">:</span>charAt 方法 返回位于指定索引位置的字符charCodeAt方法  返回指定字符的<span class="hljs-built_in">Unicode</span>编码<span class="hljs-built_in">concat</span> 方法（Array） 返回一个由两个数组合并组成的新数组。</code></pre><pre><code class="hljs arcade">日期函数:getDate 方法 使用当地时间返回 <span class="hljs-built_in">Date</span> 对象的月份日期值。getDay 方法 使用当地时间返回 <span class="hljs-built_in">Date</span> 对象的星期几。</code></pre><h2 id="45-AMD和CMD是什么"><a href="#45-AMD和CMD是什么" class="headerlink" title="45.AMD和CMD是什么?"></a>45.AMD和CMD是什么?</h2><p>AMD:<br>异步模块加载。它是一个在浏览器端模块化开发的规范</p><p>特点:<br>适合在浏览器环境中异步加载模块。可以并行加载多个模块。<br>缺点：<br>提高了开发成本，并且不能按需加载，而是必须提前加载所有的依赖。</p><p>CMD:<br>1.对于依赖的模块AMD是提前执行，CMD是延迟执行。不过RequireJS从2.0开始，也改成可以延迟执行（根据写法不同，处理方式不通过）。</p><p>2.AMD推崇依赖前置（在定义模块的时候就要声明其依赖的模块），CMD推崇依赖就近（只有在用到某个模块的时候再去require——按需加载）。</p><h2 id="46-父子组件渲染的过程是什么"><a href="#46-父子组件渲染的过程是什么" class="headerlink" title="46.父子组件渲染的过程是什么?"></a>46.父子组件渲染的过程是什么?</h2><p>父组件的beforcreated先进行,created,beforMounted在进行子组件中的所有生命周期,再进行父组件的mounted再往下执行</p><h2 id="47-什么是BFC？"><a href="#47-什么是BFC？" class="headerlink" title="47.什么是BFC？"></a>47.什么是BFC？</h2><p>BFC 全称为 块格式化</p><p>里面不影响外面的,外面的也不影响里面的.</p><p><strong>BFC 特性(功能)</strong></p><ol><li>使 BFC 内部浮动元素不会到处乱跑；</li><li>和浮动元素产生边界。</li></ol><pre><code class="hljs gams">触发条件:浮动,<span class="hljs-keyword">display</span>overflow <span class="hljs-keyword">display</span>: <span class="hljs-keyword">table</span>-cell</code></pre><h2 id="48-继承"><a href="#48-继承" class="headerlink" title="48.继承"></a>48.继承</h2><p>（1）工厂模式：因为使用用一个接口创建很多对象会产生大量的重复代码,为了解决这个问题，人们就开始使用工厂模式。<br>（2）构造函数模式：也叫经典继承或伪造对象继承，使用构造函数模式我们能少些更多代码<br>（3）原型式继承，这种方法没有严格意义上的构造函数,想法是基于已有的对象来创建新对象,同时还不必创建自定义类型.<br>（4）组合继承也叫伪经典继承，指的是将原型链和借用构造函数的技术组合到一块,发挥二者之长的一种继承模式.其背后的思路是,通过原型链实现对原型属性和方法的继承,通过借用构造函数实现对实例属性的继承.这样就即实现了函数的复用,也保证了每个实例都有自己的属性.<br>（5）寄生式继承，寄生式继承的思路与寄生构造函数类似,即创建一个仅用于封装继承过程的函数,该函数在内部以某种方式来增强对象,最后在返回对象.<br>（6）组合寄生式继承，组合继承最大的问题就是无论什么情况下,都会调用两次超类型的构造函数:一次是在创建子类原型的时候,另一次是在子类构造函数的内部。所谓寄生组合式继承,即通过借用构造函数来继承属性,通过原型链的混成形式来继承方法.其基本思路是:不必为了指定子类型的原型而调用超类型的构造函数,我们所需要的只是超类型的一个副本而已.本质上就是使用寄生式继承来继承超类型的原型,然后再将结果指定给子类型的原型.</p><h2 id="49-uni-app用过没有？"><a href="#49-uni-app用过没有？" class="headerlink" title="49.uni app用过没有？"></a>49.uni app用过没有？</h2><p>uni-app，开发一次全端覆盖（iOS、Android、H5、微信小程序、百度小程序、支付宝小程序）</p><p>跨平台更多；（一套代码，多端发行；优雅的在一个项目里调用不同平台的特色功能！）<br>运行体验更好；（组件，api与微信小程序一致；兼容weex原生渲染）<br>通用技术栈，学习成本更低；（vue的语法，微信小程序的api内嵌mpvue）<br>开放生态，组件更丰富；<br>   -支持通过npm安装第三方包；</p><p>   -支持微信小程序自定义组件及SDK</p><p>   -兼容mpvue组件及项目</p><p>   -App端支持和原生混合编码</p><p>   -DCloud拥有插件市场</p><p>它类似于vue，微信小程序，这些前端的框架有很多的，公司用哪一个框架就学哪一个呗，坎级下基本很快就能上手的。</p><h2 id="50-cookie和-sessionStorage和-localStorage的区别"><a href="#50-cookie和-sessionStorage和-localStorage的区别" class="headerlink" title="50,cookie和 sessionStorage和 localStorage的区别"></a>50,cookie和 sessionStorage和 localStorage的区别</h2><p><strong>回答问题的思路：</strong></p><p><strong>共同点：</strong></p><p>都保存在浏览器端，且是同源的（顺便解释一下同源：域名、协议、端口号相同）</p><p><strong>不同点：</strong></p><p><strong>存储大小不同：</strong></p><p>cookie大小一般4k，sessionStorage一般5M，localStorage一般为5M</p><p><strong>有效期不同：</strong></p><p>cookie:设置有效期之前有效，当超过有效期之后会失效。 localstorage:永久有效，除非你进行手动删除</p><p>sessionStorage:当前会话有效，关闭浏览器会失效</p><p><strong>sessionStorage和localStorage的作用域的区别详情：</strong></p><p>不同浏览器无法共享localStorage和sessionStorage中的信息。</p><p>相同浏览器的不同页面间可以共享相同的localStorage（页面属于相同域名和端口），但是不同页面或标签页面无法共享sessionStorage的信息。</p><p><strong>带入项目：</strong></p><p>window.location.href跳转页面的时候会丢失cookie,不是其他的什么原因，而是需要设置cookie作用域的路径path</p><p>localhost使用出现的问题：</p><p>localStorage和sessionStorage兼容到ie8，判断浏览器是否支持：</p><pre><code class="hljs coffeescript"><span class="hljs-keyword">if</span>（<span class="hljs-built_in">window</span>.<span class="hljs-built_in">localStorage</span>）&#123;    alert(<span class="hljs-string">&quot;浏览器支持localStorage&quot;</span>)&#125;Copy</code></pre><p>存：localStorage.setItem(“arr”,JSON.stringify(data.body.data)),需要转换成字符串，不能直接存对象，切记</p><p>取：JSON.parse(localStorage.arr)</p><h2 id="滴滴面试题"><a href="#滴滴面试题" class="headerlink" title="滴滴面试题"></a>滴滴面试题</h2><h3 id="1，执行顺序："><a href="#1，执行顺序：" class="headerlink" title="1，执行顺序："></a>1，执行顺序：</h3><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">async1</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;async1 start&#x27;</span>)<span class="hljs-comment">//2</span>    <span class="hljs-keyword">await</span> async2()    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;async1 end&#x27;</span>)<span class="hljs-comment">//6</span>&#125;<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">async2</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;async2&#x27;</span>)<span class="hljs-comment">//3</span>&#125;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;script start&#x27;</span>)<span class="hljs-comment">//1</span><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;setTimeout&#x27;</span>)<span class="hljs-comment">//8</span>&#125;,<span class="hljs-number">0</span>)async1()<span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve</span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;promise1&#x27;</span>)<span class="hljs-comment">//4</span>    resolve()&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;promise2&#x27;</span>)<span class="hljs-comment">//7</span>&#125;)<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;script end&#x27;</span>)<span class="hljs-comment">//5</span></code></pre><h3 id="2-常见的数据类型"><a href="#2-常见的数据类型" class="headerlink" title="2,常见的数据类型"></a>2,常见的数据类型</h3><p>基本数据类型：undefined，string，number，boolean,null</p><p>引用数据类型：obj，array,function</p><h3 id="3，闭包的理解，用途及注意事项："><a href="#3，闭包的理解，用途及注意事项：" class="headerlink" title="3，闭包的理解，用途及注意事项："></a>3，闭包的理解，用途及注意事项：</h3><p>函数执行时创建了一个内部函数，这个内部函数作为返回值，或以某种方式保留下来（属性），之后才会调用，这就会形成了闭包。</p><p>特点：</p><p>1，一个闭包就是当一个函数返回时，一个没有释放资源的栈区。</p><p>2，作为一个函数变量的一个引用，当函数返回时，其处于激活状态。</p><p>场景：</p><p>1，匿名自执行函数</p><p>我们创建了一个匿名的函数，并立即执行它，<strong>由于外部无法引用它内部的变量，因此在函数执行完后会立刻释放资源，关键是不污染全局对象</strong>。</p><pre><code class="hljs scheme">(<span class="hljs-name">function</span>() &#123;var days = [<span class="hljs-symbol">&#x27;Sun</span>&#x27;, <span class="hljs-symbol">&#x27;Mon</span>&#x27;, <span class="hljs-symbol">&#x27;Tue</span>&#x27;, <span class="hljs-symbol">&#x27;Wed</span>&#x27;, <span class="hljs-symbol">&#x27;Thu</span>&#x27;, <span class="hljs-symbol">&#x27;Fri</span>&#x27;, <span class="hljs-symbol">&#x27;Sat</span>&#x27;],today = new Date(),msg = <span class="hljs-symbol">&#x27;Today</span> is &#x27; + days[<span class="hljs-name">today.getDay</span>()] + &#x27;, &#x27; + today.getDate()<span class="hljs-comment">;</span>alert(<span class="hljs-name">msg</span>)<span class="hljs-comment">;</span>&#125; ())<span class="hljs-comment">;</span></code></pre><p>2，结果缓存</p><p>我们开发中会碰到很多情况，设想我们有一个处理过程很耗时的函数对象，每次调用都会花费很长时间，那么我们就需要将计算出来的值存储起来，当调用这个函数的时候，首先在缓存中查找，如果找不到，则进行计算，然后更新缓存并返回值，如果找到了，直接返回查找到的值即可。<strong>闭包正是可以做到这一点，因为它不会释放外部的引用，从而函数内部的值可以得以保留。</strong></p><p>优点<br> 1.可以读取函数内部的变量<br> 2.可以让这些局部变量保存在内存中，实现变量数据共享。</p><p>缺点<br> 1.由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br> 2.闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p><p><a href="https://www.cnblogs.com/xuniannian/p/7452086.html">https://www.cnblogs.com/xuniannian/p/7452086.html</a></p><h3 id="4-垃圾回收机制"><a href="#4-垃圾回收机制" class="headerlink" title="4,垃圾回收机制:"></a>4,垃圾回收机制:</h3><p><a href="https://www.jianshu.com/p/23f8249886c6">https://www.jianshu.com/p/23f8249886c6</a></p><h3 id="5-协商缓存-强缓存"><a href="#5-协商缓存-强缓存" class="headerlink" title="5,协商缓存,强缓存"></a>5,协商缓存,强缓存</h3><p><a href="https://www.jianshu.com/p/9c95db596df5">https://www.jianshu.com/p/9c95db596df5</a></p><h3 id="6-微任务-宏任务"><a href="#6-微任务-宏任务" class="headerlink" title="6,微任务,宏任务:"></a>6,微任务,宏任务:</h3><h3 id="7-浏览器渲染过程"><a href="#7-浏览器渲染过程" class="headerlink" title="7,浏览器渲染过程:"></a>7,浏览器渲染过程:</h3><h3 id="8-es6新增"><a href="#8-es6新增" class="headerlink" title="8,es6新增:"></a>8,es6新增:</h3><p><a href="https://www.jianshu.com/p/0120580f39aa">https://www.jianshu.com/p/0120580f39aa</a></p><h3 id="9-怎么封装组件的"><a href="#9-怎么封装组件的" class="headerlink" title="9,怎么封装组件的:"></a>9,怎么封装组件的:</h3><h3 id="10-打包"><a href="#10-打包" class="headerlink" title="10,打包:"></a>10,打包:</h3><h1 id="小程序总结"><a href="#小程序总结" class="headerlink" title="小程序总结"></a>小程序总结</h1><h2 id="1-小程序之间的组件传值？"><a href="#1-小程序之间的组件传值？" class="headerlink" title="1.小程序之间的组件传值？"></a>1.小程序之间的组件传值？</h2><pre><code class="hljs javascript">第一种：全局传值<span class="hljs-comment">// 步骤一：在全局app.js文件中定义数据</span>App(&#123;  globalData: &#123;    userInfo: <span class="hljs-literal">null</span>,    userName: <span class="hljs-string">&#x27;全局变量传值&#x27;</span>,  &#125;&#125;)<span class="hljs-comment">// 步骤二：获取应用实例，不然无法调用全局变量</span><span class="hljs-keyword">const</span> app = getApp()<span class="hljs-comment">// 步骤三：调用全局变量</span>Page(&#123;  data: &#123;  &#125;,  onLoad: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">options</span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(app.globalData.userName);  &#125;,&#125;)</code></pre><pre><code class="hljs javascript">第二种：url传值<span class="hljs-comment">// 步骤一：使用关键字bindtap绑定一个点击事件方法，data-index是传入一个值</span>&lt;image <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;btn-detail&quot;</span> src=<span class="hljs-string">&#x27;/images/btn_detail.png&#x27;</span> bindtap=<span class="hljs-string">&#x27;toDetail&#x27;</span> data-index=<span class="hljs-string">&#x27;&#123;&#123;index&#125;&#125;&#x27;</span>&gt;&lt;/image&gt;<span class="hljs-comment">// 步骤二：在脚本文件中定义这个方法（方法并不是定义在一个methods集合中的）</span>Page(&#123;  data: &#123;&#125;,  onLoad: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;,  toDetail: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;    <span class="hljs-comment">// index代表的遍历对象的下标</span>    <span class="hljs-keyword">var</span> index = e.currentTarget.dataset.index;    <span class="hljs-keyword">var</span> proList = <span class="hljs-built_in">this</span>.data.proList;    <span class="hljs-keyword">var</span> title = proList[index].proName;    wx.navigateTo(&#123;      url: <span class="hljs-string">&#x27;/pages/detail/detail?title=&#x27;</span>+title,    &#125;)  &#125;&#125;)<span class="hljs-comment">// 步骤三：在detail组件的脚本文件中接收title这个传入过来的值</span>Page(&#123;  data: &#123;&#125;,  onLoad: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">options</span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(options.title);  &#125;,&#125;)</code></pre><pre><code class="hljs javascript">第三种：Storage传值<span class="hljs-comment">// 步骤一：使用关键字bindtap绑定一个点击事件方法，data-index是传入一个值</span>&lt;image <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;btn-detail&quot;</span> src=<span class="hljs-string">&#x27;/images/btn_detail.png&#x27;</span> bindtap=<span class="hljs-string">&#x27;toDetail&#x27;</span> data-index=<span class="hljs-string">&#x27;&#123;&#123;index&#125;&#125;&#x27;</span>&gt;&lt;/image&gt;<span class="hljs-comment">// 步骤二：在脚本文件中定义这个方法（方法并不是定义在一个methods集合中的）</span>Page(&#123;  data: &#123;&#125;,  onLoad: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;,  toDetail: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;    <span class="hljs-keyword">var</span> index = e.currentTarget.dataset.index;    <span class="hljs-keyword">var</span> proList = <span class="hljs-built_in">this</span>.data.proList;    <span class="hljs-keyword">var</span> title = proList[index].proName;    wx.setStorageSync(<span class="hljs-string">&#x27;titleName&#x27;</span>, title);    wx.navigateTo(&#123;      url: <span class="hljs-string">&#x27;/pages/detail/detail&#x27;</span>,    &#125;)  &#125;&#125;)<span class="hljs-comment">// 步骤三：在detail组件的脚本文件中使用wx.getStorageSync接收titleName这个传入过来的值</span>Page(&#123;  data: &#123;&#125;,  onLoad: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">options</span>) </span>&#123;    <span class="hljs-keyword">var</span> titlen = wx.getStorageSync(<span class="hljs-string">&#x27;titleName&#x27;</span>);    <span class="hljs-built_in">console</span>.log(titlen);  &#125;,&#125;)</code></pre><h2 id="2，小程序跳转的api？"><a href="#2，小程序跳转的api？" class="headerlink" title="2，小程序跳转的api？"></a>2，小程序跳转的api？</h2><p>一、wx.navigateTo(obj)<br>特点：<br>可以传值，新页面获取值用option.name<br>跳抓到新页面后有返回按钮 可以返回上一个页面</p><p>wx.navigateTo({<br>     url: ‘/pages/Deposit/Deposit?merchantId=’ + this.data.coach.coachId,<br>})</p><p>二、wx.redirectTo(obj)<br>特点：<br>可以传值，新页面获取值用option.name<br>跳抓到新页面后无返回按钮 不能返回上一个页面</p><p>wx.redirectTo({<br>        url: ‘/pages/Deposit/Deposit?merchantId=’ + this.data.coach.coachId,<br>})</p><p>三、wx.reLaunch(obj)<br>特点：<br>可以传值，新页面获取值用option.name<br>如果跳转的页面路径是 tabBar 页面则不能带参数<br>跳抓到新页面后无返回按钮 不能返回上一个页面</p><p>wx.reLaunch({<br>        url: ‘/pages/Deposit/Deposit?merchantId=’ + this.data.coach.coachId,<br>})</p><p>四、wx.switchTab(obj)<br>特点：<br>地址后面不可以带参数<br>跳转的 tabBar 页面的路径 需在 app.json 的 tabBar 字段定义的页面<br>跳抓到新页面后无返回按钮 不能返回上一个页面</p><p>wx.switchTab({<br>        url: ‘/index’<br>})</p><p>五、navigator标签的url跳转页面<br>六、wx.navigateBack(obj)<br>特点：<br>关闭当前页面，返回上一页面或多级页面。<br>可通过 getCurrentPages() 获取当前的页面栈，决定需要返回几层。<br>参数：<br>delta number类型 返回的页面数，如果 delta 大于现有页面数，则返回到首页</p><p>wx.navigateBack({<br>        delta: 2<br>})</p><h1 id="html-css"><a href="#html-css" class="headerlink" title="html,css"></a>html,css</h1><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><pre><code class="hljs less">动画<span class="hljs-attribute">animation</span>:    动画与过渡不同，它可以自动执行    动画创建的步骤:        <span class="hljs-number">1</span>. 绑定一个选择器        动画执行的两个必要条件：            动画的名称：            动画的过渡时间：        <span class="hljs-number">2</span>. 遵循<span class="hljs-variable">@keyframes</span> aniName&#123;                from...to                 或                百分比（建议）                &#125;动画属性的介绍：    <span class="hljs-selector-tag">animation-name</span>        动画的名称    <span class="hljs-selector-tag">animation-duration</span>    动画的过渡时间    <span class="hljs-selector-tag">animation-delay</span>       动画的延迟过渡时间    <span class="hljs-selector-tag">animation-timing-function</span>  动画的作用曲线，过渡的速率    <span class="hljs-selector-tag">animation-direction</span>        动画的播放顺序    <span class="hljs-selector-tag">normal</span>(默认，正向播放)    <span class="hljs-selector-tag">reverse</span>(反向播放)    <span class="hljs-selector-tag">alternate</span>(奇数次正向播放，偶数次反向播放)    <span class="hljs-selector-tag">alternate-reverse</span>(偶数次正向播放，奇数次反向播放)        <span class="hljs-selector-tag">animation-iteration-count</span>  动画的播放次数        默认播放一次，如果想要无限次播放，需要设置属性值为             <span class="hljs-selector-tag">infinate</span></code></pre><h2 id="过度"><a href="#过度" class="headerlink" title="过度"></a>过度</h2><pre><code class="hljs scss">过渡<span class="hljs-attribute">transition</span>：    从一种效果过渡到另外一种效果，需要触发条件才能实现过渡，如：鼠标滑过开始过渡    除了触发条件外，过渡的实现还需要两个必要条件：    过渡的属性：<span class="hljs-attribute">transition-property</span>     过渡的时间：<span class="hljs-attribute">transition-duration</span>过渡的属性如下：    <span class="hljs-attribute">transition-property</span>         过渡的属性    <span class="hljs-attribute">transition-duration</span>         过渡的时间    <span class="hljs-attribute">transition-delay</span>            过渡的延迟时间    <span class="hljs-attribute">transition-timing-function</span>  过渡的作用曲线，过渡的速率     过渡需要条件触发，目前使用hover设置3d变形<span class="hljs-attribute">transform-style</span>:flat(<span class="hljs-number">2</span>d) | preseve-<span class="hljs-number">3</span>d;<span class="hljs-attribute">transform-origin</span>:bottom | left right | center l top...;<span class="hljs-attribute">perspective</span>设置透视度</code></pre><h2 id="变形"><a href="#变形" class="headerlink" title="变形"></a>变形</h2><pre><code class="hljs less">变形<span class="hljs-selector-tag">transform</span>：    平移：<span class="hljs-selector-tag">translate</span>(x,y)    <span class="hljs-selector-tag">translate3D</span>(x,y,z) <span class="hljs-selector-tag">translateX0</span>     <span class="hljs-selector-tag">tramslateY0</span>    缩放：<span class="hljs-selector-tag">scale</span>(x,y)    <span class="hljs-selector-tag">scaleX0</span>    <span class="hljs-selector-tag">scaleY0</span>    旋转：<span class="hljs-selector-tag">rotate</span>()    <span class="hljs-selector-tag">rotate3D</span>()    <span class="hljs-selector-tag">rotateX0</span>    <span class="hljs-selector-tag">rotateY0</span>    <span class="hljs-selector-tag">rotateZ0</span>    单位： <span class="hljs-selector-tag">deg</span>(度)  <span class="hljs-selector-tag">turn</span>(圈)    倾斜：<span class="hljs-selector-tag">skew</span>()    <span class="hljs-selector-tag">skewX0</span>    <span class="hljs-selector-tag">skewY</span>(     矩阵：martrix()    设置中心原点：    transform-origin     属性值一般跟方向值即可、百分比也行    设置<span class="hljs-number">2</span>d还是<span class="hljs-number">3</span>d变形：        <span class="hljs-attribute">transform-style</span>:preserve-<span class="hljs-number">3</span>d(<span class="hljs-number">3</span>D变形) | flat(默认，<span class="hljs-number">2</span>d变形);    如果设置<span class="hljs-number">3</span>d变形，还需要设置一定的透视度，才能达到相应的效果：    <span class="hljs-attribute">perspective</span>:像素值;    注意：<span class="hljs-number">3</span>d变形与透视度需要在父元素中设置，在子元素中生效            <span class="hljs-number">1</span>.变形与过渡</code></pre><h2 id="felx布局"><a href="#felx布局" class="headerlink" title="felx布局"></a>felx布局</h2><p>回答思路：</p><p>1、flex的父元素的六个属性：</p><p> ①display =&gt; flex;</p><p> ②flex-direction =&gt; 决定主轴的方向，它包括row, row-reverse, column, column四个值，默认是row，从左向右排列元素</p><p> ③flex-wrap =&gt; 它有三个值：wrap（空间不足时换行），nowrap（空间不足时也换行，会挤在一起,这也是默认值），wrap-reverse(换行，但是第一行在下面)</p><p> ④flex-flow =&gt;flex-direction 和flex-wrap的简写，属性是【flex-direction，flex-wrap】的属性值</p><p> ⑤justify-content =&gt; flex-start 、 flex-end 、 center 、 space-between 、 space-around</p><p> ⑥align-items =&gt; flex-start 、 flex-end 、 center 、baseline 、 stretch</p><p>项目元素（子元素）的六个属性：</p><ul><li><code>order</code></li><li><code>flex-grow</code></li><li><code>flex-shrink</code></li><li><code>flex-basis</code></li><li><code>flex</code></li><li><code>align-self</code></li></ul><p>2、工作中写flex布局遇到的问题：</p><p>再写页面的时候,一行四个排列,调整flex布局,一般都是左右space-between,自动排列,最后一行如果剩余两个元素,就会左右两端各一个,这样就会不符合排列的规则;</p><p>解决方案:</p>]]></content>
    
    
    <categories>
      
      <category>知识点总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>配置简单node后台,配合mongodb数据库,模拟数据</title>
    <link href="/2020/09/29/%E9%85%8D%E7%BD%AE%E7%AE%80%E5%8D%95node%E5%90%8E%E5%8F%B0-%E9%85%8D%E5%90%88mongodb%E6%95%B0%E6%8D%AE%E5%BA%93-%E6%A8%A1%E6%8B%9F%E6%95%B0%E6%8D%AE/"/>
    <url>/2020/09/29/%E9%85%8D%E7%BD%AE%E7%AE%80%E5%8D%95node%E5%90%8E%E5%8F%B0-%E9%85%8D%E5%90%88mongodb%E6%95%B0%E6%8D%AE%E5%BA%93-%E6%A8%A1%E6%8B%9F%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="配置简单node后台-配合mongodb数据库-模拟数据"><a href="#配置简单node后台-配合mongodb数据库-模拟数据" class="headerlink" title="配置简单node后台,配合mongodb数据库,模拟数据"></a><a href="https://www.cnblogs.com/MrXXD/p/13306066.html">配置简单node后台,配合mongodb数据库,模拟数据</a></h2><h3 id="首先新建文件夹houtai"><a href="#首先新建文件夹houtai" class="headerlink" title="首先新建文件夹houtai"></a>首先新建文件夹houtai</h3><p>1,在当前文件夹下cmd运行,终端打开,输入命令</p><p>npm init初始化项目,几个enter确定之后,需要的一些配置<br>npm i express body-parser mongodb url path</p><p>然后基本的东西已经好了,</p><p><img src="/img/2021/1809041-20200715154107859-1320591019.png" alt="img"></p><p>2,新建一个app.js和routes文件夹</p><p><img src="/img/2021/1809041-20200715154232379-266190731.png" alt="img"></p><p>app.js内容如下:(备忘)</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>)<span class="hljs-keyword">const</span>  app= express();<span class="hljs-keyword">const</span> bodyParser=<span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;body-parser&quot;</span>)<span class="hljs-keyword">const</span> index = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./routes/index&quot;</span>)<span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<span class="hljs-comment">// app.use(express.static(path.join(__dirname, &#x27;public&#x27;)));</span>app.use(<span class="hljs-string">&#x27;/public&#x27;</span>,express.static(<span class="hljs-string">&#x27;public&#x27;</span>))<span class="hljs-comment">//跨域</span>app.all(<span class="hljs-string">&quot;*&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)</span>&#123;    res.header(<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>);     res.header(<span class="hljs-string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);    res.header(<span class="hljs-string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);    next();  &#125;);app.use(bodyParser.urlencoded(&#123;    extended: <span class="hljs-literal">false</span>&#125;))app.listen(<span class="hljs-string">&quot;8080&quot;</span>,<span class="hljs-function">()=&gt;</span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;欢迎访问后台8080&quot;</span>)&#125;)app.use(<span class="hljs-string">&quot;/&quot;</span>,index)</code></pre><p>routes文件夹下存放封装好的操作mongodb数据库的简单方法文件和一个存放后台接口方法的文件:</p><p><img src="/img/2021/1809041-20200715160412614-1173780135.png" alt="img"></p><p>封装的调取mongodb方法文件内容如下:(备忘)其中包括要链接mongodb的库名,需要修改</p><p><strong>dblianjie.js</strong></p><pre><code class="hljs js"><span class="hljs-keyword">var</span> mongo=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mongodb&#x27;</span>); <span class="hljs-comment">//引入模块</span><span class="hljs-keyword">var</span> MongoClient=mongo.MongoClient; <span class="hljs-comment">//mongodb 客户端</span><span class="hljs-keyword">var</span> url=<span class="hljs-string">&#x27;mongodb://127.0.0.1:27017&#x27;</span>; <span class="hljs-comment">//mongodb服务器地址</span><span class="hljs-keyword">var</span> dbName=<span class="hljs-string">&#x27;xxx&#x27;</span><span class="hljs-comment">//要连接的库,mongodb的库名</span><span class="hljs-comment">// 查找方法</span><span class="hljs-keyword">var</span>  find=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">client, collection, data, callback</span>)</span>&#123;    collection.find(data).toArray(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,result</span>)</span>&#123;        <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;查找成功&quot;</span>);        callback(result)<span class="hljs-comment">//数据传回回调函数</span>        client.close();<span class="hljs-comment">//释放连接</span>    &#125;)&#125;<span class="hljs-comment">// 删除一个方法&#123;age:1&#125;</span><span class="hljs-keyword">var</span>  del=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">client, collection, data, callback</span>)</span>&#123;    collection.deleteOne(data,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,result</span>)</span>&#123;        <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">throw</span> err;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;删除成功&quot;</span>);        callback(result);        client.close();<span class="hljs-comment">//释放连接</span>    &#125;)&#125;<span class="hljs-comment">// 增加一个方法</span><span class="hljs-keyword">var</span> insert=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">client, collection, data, callback</span>)</span>&#123;    collection.insert(data,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,result</span>)</span>&#123;        <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;插入成功&quot;</span>);        callback(result)        client.close();<span class="hljs-comment">//释放连接</span>    &#125;)&#125;<span class="hljs-comment">// 修改一个方法</span>    <span class="hljs-comment">// mongo(&quot;update&quot;,&quot;user&quot;,[&#123;name:&quot;老王&quot;&#125;,&#123;age:888&#125;],function()&#123;&#125;)</span><span class="hljs-keyword">var</span> update=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">client, collection, data, callback</span>)</span>&#123;    collection.update(data[<span class="hljs-number">0</span>],&#123;<span class="hljs-attr">$set</span>:data[<span class="hljs-number">1</span>]&#125;,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,result</span>)</span>&#123;        <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;修改成功&quot;</span>);        callback(result)        client.close();<span class="hljs-comment">//释放连接</span>    &#125;)&#125;<span class="hljs-comment">//删除多个</span><span class="hljs-keyword">var</span> deleteMany=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">client, collection, data, callback</span>)</span>&#123;    collection.deleteMany(data,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,result</span>)</span>&#123;        <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">throw</span> err;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;删除成功&quot;</span>);        callback(result);        client.close();<span class="hljs-comment">//释放连接</span>    &#125;)&#125;<span class="hljs-comment">//i 插入多个</span> <span class="hljs-keyword">var</span> insertMany=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;                <span class="hljs-comment">//            &#123;name:1&#125;</span>                <span class="hljs-comment">//         [&#123;&#125;,&#123;&#125;]</span>     collection.insertMany(data,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,result</span>)</span>&#123;         <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err;         <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;插入成功&quot;</span>);         callback(result)         client.close();<span class="hljs-comment">//释放连接</span>     &#125;) &#125;<span class="hljs-comment">// 修改多个</span><span class="hljs-keyword">var</span> updateMany=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">client, collection, data, callback    </span>)</span>&#123;        collection.updateMany(data[<span class="hljs-number">0</span>],&#123;<span class="hljs-attr">$set</span>:data[<span class="hljs-number">1</span>]&#125;,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,result</span>)</span>&#123;            <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;修改成功&quot;</span>);            callback(result)            client.close();<span class="hljs-comment">//释放连接</span>        &#125;)&#125;<span class="hljs-keyword">var</span> methodType=&#123;    find:find,    del:del,    insert:insert,    update:update,    deleteMany:deleteMany,    insertMany:insertMany,    updateMany:updateMany&#125;                    <span class="hljs-comment">// find    表           条件    回调函数  </span><span class="hljs-built_in">module</span>.exports=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">type, collections, data, callback</span>)</span>&#123;    <span class="hljs-comment">// 连接数据库</span>    MongoClient.connect(url, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, client</span>) </span>&#123;        <span class="hljs-keyword">if</span> (err) &#123;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;链接失败&#x27;</span>);            <span class="hljs-built_in">console</span>.log(err);        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 链接成功</span>            <span class="hljs-keyword">var</span> db = client.db(dbName); <span class="hljs-comment">// 对数据库的链接</span>            <span class="hljs-keyword">var</span> collection = db.collection(collections); <span class="hljs-comment">// 对集合的链接</span>            methodType[type](client, collection, data, callback);        &#125;    &#125;)&#125;</code></pre><p>index.js基本内容如下:(备忘)</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>) <span class="hljs-keyword">const</span> router = express.Router() <span class="hljs-keyword">const</span> mongodb = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mongodb&quot;</span>) <span class="hljs-comment">//需要可以自己下依赖</span> <span class="hljs-comment">// const fs = require(&quot;fs&quot;)</span> <span class="hljs-comment">// const jet = require(&quot;../jsonwebtoken&quot;)</span> <span class="hljs-keyword">const</span> mongo = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./dblianjie&quot;</span>) <span class="hljs-keyword">const</span> ObjectId = mongodb.ObjectId <span class="hljs-comment">// // 用户信息列表</span> <span class="hljs-comment">// router.get(&quot;/findUser&quot;, (req, res) =&gt; &#123;</span> <span class="hljs-comment">//     mongo(&quot;find&quot;, &quot;userList&quot;, &#123; iphone: req.query.name &#125;, (result) =&gt; &#123;</span> <span class="hljs-comment">//         console.log(result)</span> <span class="hljs-comment">//         res.send(result)</span> <span class="hljs-comment">//     &#125;)</span> <span class="hljs-comment">// &#125;)</span> <span class="hljs-comment">//获取首页数据</span> <span class="hljs-comment">// router.get(&quot;/getIndex&quot;, (req, res) =&gt; &#123;</span><span class="hljs-comment">//     mongo(&quot;find&quot;, &quot;tuiJ&quot;, &#123;&#125;, (result) =&gt; &#123;</span><span class="hljs-comment">//         res.send(result)</span> <span class="hljs-comment">//     &#125;)</span> <span class="hljs-comment">// &#125;)</span> <span class="hljs-comment">//导出</span> <span class="hljs-built_in">module</span>.exports = router </code></pre><h3 id="后台使用命令node-app就可以启动啦"><a href="#后台使用命令node-app就可以启动啦" class="headerlink" title="后台使用命令node app就可以启动啦"></a>后台使用命令node app就可以启动啦</h3><p>前台拿到数据就可以对数据进行基本的操作了</p><pre><code class="hljs js"><span class="hljs-comment">//请求后台接口就行啦</span>    axios(&#123;<span class="hljs-comment">//getIndex就是后台配置的接口地址 url: &quot;http://localhost:8080/getIndex&quot;,</span>      params: <span class="hljs-string">&quot;&quot;</span>,      method: <span class="hljs-string">&quot;get&quot;</span>    &#125;).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;      <span class="hljs-built_in">console</span>.log(res)    &#125;);</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>备忘录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文字竖向排列样式</title>
    <link href="/2020/09/29/%E6%96%87%E5%AD%97%E7%AB%96%E5%90%91%E6%8E%92%E5%88%97%E6%A0%B7%E5%BC%8F/"/>
    <url>/2020/09/29/%E6%96%87%E5%AD%97%E7%AB%96%E5%90%91%E6%8E%92%E5%88%97%E6%A0%B7%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="文字竖向排列样式"><a href="#文字竖向排列样式" class="headerlink" title="文字竖向排列样式"></a>文字竖向排列样式</h2><h3 id="属性定义及使用说明"><a href="#属性定义及使用说明" class="headerlink" title="属性定义及使用说明"></a>属性定义及使用说明</h3><p>writing-mode 属性定义了文本在水平或垂直方向上如何排布。</p><p>语法格式如下：</p><pre><code class="hljs vim">writing-<span class="hljs-keyword">mode</span>: horizontal-tb | <span class="hljs-keyword">vertical</span>-rl | <span class="hljs-keyword">vertical</span>-<span class="hljs-keyword">lr</span> | sideways-rl | sideways-<span class="hljs-keyword">lr</span></code></pre><ul><li>horizontal-tb：水平方向自上而下的书写方式。即 left-right-top-bottom</li><li>vertical-rl：垂直方向自右而左的书写方式。即 top-bottom-right-left</li><li>vertical-lr：垂直方向内内容从上到下，水平方向从左到右</li><li>sideways-rl：内容垂直方向从上到下排列</li><li>sideways-lr：内容垂直方向从下到上排列</li></ul>]]></content>
    
    
    <categories>
      
      <category>备忘录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>备忘录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>鼠标滚轮事件小demo</title>
    <link href="/2020/09/29/%E9%BC%A0%E6%A0%87%E6%BB%9A%E8%BD%AE%E4%BA%8B%E4%BB%B6%E5%B0%8Fdemo/"/>
    <url>/2020/09/29/%E9%BC%A0%E6%A0%87%E6%BB%9A%E8%BD%AE%E4%BA%8B%E4%BB%B6%E5%B0%8Fdemo/</url>
    
    <content type="html"><![CDATA[<h2 id="鼠标滚轮事件小demo"><a href="#鼠标滚轮事件小demo" class="headerlink" title="鼠标滚轮事件小demo"></a><a href="https://www.cnblogs.com/MrXXD/p/13298188.html">鼠标滚轮事件小demo</a></h2><p>一般很多网站都会有一些这样的效果来提升用户的体验度,返回顶部的功能啊,当然也包括一些顶部的菜单滑动显示隐藏的功能等</p><p>也是记录一下以便以后方便拿来用,有需要的也给您提供一份便捷.可能写的不太好,欢迎交流探讨</p><h3 id="简单的举个栗子"><a href="#简单的举个栗子" class="headerlink" title="简单的举个栗子:"></a>简单的举个栗子:</h3><p>上滑效果:</p><p><img src="/img/2021/1809041-20200714110315176-1377970511.png" alt="img"></p><p>上滑效果:</p><p><img src="/img/2021/1809041-20200714110321236-684601970.jpg" alt="img"></p><p>返回顶部效果:</p><p><img src="/img/2021/1809041-20200714110222524-536348246.png" alt="img"></p><h3 id="记录一些效果"><a href="#记录一些效果" class="headerlink" title="记录一些效果:"></a>记录一些效果:</h3><p>1,简单的动画实现返回顶部,或者你想要去到的位置</p><pre><code class="hljs js"><span class="hljs-comment">// 页面返回响应位置</span>$(<span class="hljs-string">&quot;.fixedmodular1&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-comment">// 返回.main元素的位置</span>    <span class="hljs-keyword">let</span> target_top = $(<span class="hljs-string">&quot;.main&quot;</span>).offset().top;            <span class="hljs-comment">//设置动画效果,不会中断滚动</span>    $(<span class="hljs-string">&quot;html,body&quot;</span>).animate(&#123; <span class="hljs-attr">scrollTop</span>: target_top &#125;, <span class="hljs-number">1000</span>);            <span class="hljs-comment">//返回顶部</span>           <span class="hljs-comment">//$(&quot;html,body&quot;).animate(&#123; scrollTop: 0&#125;, 1000);</span>&#125;)</code></pre><p>感觉这样确实不是很友好,很简单粗暴.</p><p>2,返回顶部的图标,显示隐藏,包括顶部的样式也是同样的套路</p><pre><code class="hljs js">$(<span class="hljs-built_in">window</span>).scroll(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> scrolltop = $(<span class="hljs-built_in">this</span>).scrollTop(); <span class="hljs-comment">//滚动条</span>    <span class="hljs-keyword">var</span> windowheight = $(<span class="hljs-built_in">this</span>).height(); <span class="hljs-comment">//可视化窗口高度</span>    <span class="hljs-keyword">if</span> (scrolltop &gt;= windowheight) &#123;        $(<span class="hljs-string">&#x27;#top&#x27;</span>).show()    &#125; <span class="hljs-keyword">else</span> &#123;        $(<span class="hljs-string">&#x27;#top&#x27;</span>).hide()    &#125;&#125;)</code></pre><p>3,返回顶部的操作</p><pre><code class="hljs js"><span class="hljs-keyword">var</span> timer = <span class="hljs-literal">null</span>$(<span class="hljs-string">&#x27;#top&#x27;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;    timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">var</span> osTop = <span class="hljs-built_in">document</span>.documentElement.scrollTop||<span class="hljs-built_in">document</span>.body.scrollTop;        <span class="hljs-keyword">var</span> ispeed = <span class="hljs-built_in">Math</span>.floor(-osTop / <span class="hljs-number">6</span>);        <span class="hljs-comment">//获取滚动条距离顶部的高度</span>        <span class="hljs-built_in">document</span>.documentElement.scrollTop = <span class="hljs-built_in">document</span>.body.scrollTop = osTop + ispeed;        <span class="hljs-keyword">if</span> (osTop == <span class="hljs-number">0</span>) &#123;            <span class="hljs-built_in">clearInterval</span>(timer);        &#125;    &#125;, <span class="hljs-number">30</span>);&#125;)<span class="hljs-comment">//在滚动的过程中滑动鼠标中止滚动,停到当前滚动的位置</span><span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;mousewheel&#x27;</span>, mouseScrollMove,<span class="hljs-literal">false</span>)<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mouseScrollMove</span>(<span class="hljs-params">e</span>) </span>&#123;   <span class="hljs-keyword">var</span> eM = e.wheelDelta || e.detail;   <span class="hljs-keyword">var</span> moveLen = <span class="hljs-built_in">Math</span>.max(<span class="hljs-number">-1</span>, <span class="hljs-built_in">Math</span>.min(<span class="hljs-number">1</span>, eM));   <span class="hljs-keyword">if</span> (moveLen &lt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">//向下滚动</span>       <span class="hljs-built_in">clearInterval</span>(timer);   &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//向上滚动</span>       <span class="hljs-built_in">clearInterval</span>(timer);   &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>小栗子</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小栗子</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>A网站的登陆跳转到B网站</title>
    <link href="/2020/09/29/A%E7%BD%91%E7%AB%99%E7%9A%84%E7%99%BB%E9%99%86%E8%B7%B3%E8%BD%AC%E5%88%B0B%E7%BD%91%E7%AB%99/"/>
    <url>/2020/09/29/A%E7%BD%91%E7%AB%99%E7%9A%84%E7%99%BB%E9%99%86%E8%B7%B3%E8%BD%AC%E5%88%B0B%E7%BD%91%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<h2 id="A网站的登陆跳转到B网站"><a href="#A网站的登陆跳转到B网站" class="headerlink" title="A网站的登陆跳转到B网站"></a>A网站的登陆跳转到B网站</h2><h3 id="业务需求："><a href="#业务需求：" class="headerlink" title="业务需求："></a>业务需求：</h3><p>a网站的登陆地方输入用户名密码，直接跳转到b网站的首页，当时公司b网站已经开发好了的，直接拿了他的登陆地址url，看了network里面的login请求需要的参数，找到登陆的页面url，直接让跳转，搞了半天才解决这个问题。</p><p>于是就在A页面写了ajax请求，拿到测试账号之后，获取数据，可以获取到数据，然后就写跳转的页面，能跳转过去，但是存不了这个登陆的状态</p><p><img src="/img/2021/1809041-20200712182312184-1769366477.png" alt="img"><img src="/img/2021/1809041-20200712181934300-195766155.png" alt="img"></p><p>cookie的存储状态拿到了，但是存不了，最后看来别人的分享之后直接一行代码解决，后知后觉才知道ajax请求是有同源策略的</p><p>一个刚进入开发的小博主分享，坚持遇见更好的自己！欢迎各位指点，评论，技术探讨。</p><h2 id="问题解决："><a href="#问题解决：" class="headerlink" title="问题解决："></a>问题解决：</h2><p>完整的无歧义的表述应该是这样：<br>1.ajax会自动带上同源的cookie，不会带上不同源的cookie<br>\2. 可以通过前端设置withCredentials为true， 后端设置Header的方式让ajax自动带上不同源的cookie，但是这个属性对同源请求没有任何影响。会被自动忽略。<br>\3. 这是MDN对withCredentials的解释： MDN-withCredentials ，我接着解释一下同源。<br>众所周知，ajax请求是有同源策略的，虽然可以应用CORS等手段来实现跨域，但是这并不是说这样就是“同源”了。ajax在请求时就会因为这个同源的问题而决定是否带上cookie<br>————————————————<br>原文链接：<a href="https://blog.csdn.net/Alice_124/article/details/81705099">https://blog.csdn.net/Alice_124/article/details/81705099</a></p><pre><code class="hljs js">$(<span class="hljs-string">&quot;.zhangButton&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">let</span> zhangName = $(<span class="hljs-string">&quot;input[name=&#x27;zhangName&#x27;]&quot;</span>).val()        <span class="hljs-keyword">let</span> zhangPass = $(<span class="hljs-string">&quot;input[name=&#x27;zhangPass&#x27;]&quot;</span>).val()        <span class="hljs-keyword">let</span> zhangUrl = <span class="hljs-string">&#x27;https://xxxxxxxx/login&#x27;</span><span class="hljs-comment">//登录接口</span>        layui.use(<span class="hljs-string">&#x27;layer&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;            <span class="hljs-keyword">var</span> layer = layui.layer;　　　　　　　　$.support.cors = <span class="hljs-literal">true</span>;<span class="hljs-comment">//允许ajax跨域</span>            $.ajax(&#123;                method: <span class="hljs-string">&#x27;post&#x27;</span>,                url: zhangUrl,                data: <span class="hljs-built_in">JSON</span>.stringify(&#123; <span class="hljs-attr">loginName</span>: zhangName, <span class="hljs-attr">password</span>: hex_md5(zhangPass) &#125;),                contentType: <span class="hljs-string">&quot;application/json&quot;</span>,<span class="hljs-comment">//传递数据格式</span>                xhrFields: &#123; <span class="hljs-attr">withCredentials</span>: <span class="hljs-literal">true</span> &#125;,<span class="hljs-comment">//允许携带cookie</span>                success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) </span>&#123;                    <span class="hljs-built_in">console</span>.log(res)                    <span class="hljs-keyword">if</span> (res.code == <span class="hljs-string">&quot;200&quot;</span>) &#123;                        layer.msg(<span class="hljs-string">&#x27;正在跳转请稍等...&#x27;</span>);                        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;                            <span class="hljs-built_in">window</span>.open(<span class="hljs-string">&#x27;https://xxxxxx/home&#x27;</span>)                            &#125;                        &#125;, <span class="hljs-number">1000</span>)                    &#125; <span class="hljs-keyword">else</span> &#123;                        layer.msg(<span class="hljs-string">&#x27;请输入正确的用户名和密码&#x27;</span>);                    &#125;                &#125;            &#125;);        &#125;);    &#125;)</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>bug</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>layui输入框提示不显示</title>
    <link href="/2020/09/29/layui%E8%BE%93%E5%85%A5%E6%A1%86%E6%8F%90%E7%A4%BA%E4%B8%8D%E6%98%BE%E7%A4%BA/"/>
    <url>/2020/09/29/layui%E8%BE%93%E5%85%A5%E6%A1%86%E6%8F%90%E7%A4%BA%E4%B8%8D%E6%98%BE%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="问题踩坑："><a href="#问题踩坑：" class="headerlink" title="问题踩坑："></a>问题踩坑：</h2><p><strong>在使用layui的时候，通常引入一个layui.all.js,把他放到js文件夹下，在写一些输入框的时候，表单验证的时候，提示弹窗显示不出来</strong></p><p><strong>以下是代码部分:</strong></p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-row&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;phone&quot;</span> <span class="hljs-attr">lay-verify</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入姓名&quot;</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sheng&quot;</span> <span class="hljs-attr">lay-verify</span>=<span class="hljs-string">&quot;sheng&quot;</span> <span class="hljs-attr">lay-filter</span>=<span class="hljs-string">&quot;sheng&quot;</span> <span class="hljs-attr">required</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>请选择省<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">lay-verify</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">required</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>请选择市<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre><pre><code class="hljs js"><span class="hljs-comment">//js代码layui.use([&#x27;form&#x27;, &#x27;layedit&#x27;], function () &#123;</span>        <span class="hljs-keyword">var</span> form = layui.form            , layer = layui.layer            , layedit = layui.layedit        <span class="hljs-comment">//自定义验证规则，用来验证表单输入信息的，标签要绑定lay-verify=&quot;sheng&quot;</span>        form.verify(&#123;            sheng: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123;                <span class="hljs-keyword">if</span> (value.length &lt; <span class="hljs-number">1</span>) &#123;                    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;请选择省份&#x27;</span>;                &#125;            &#125;,            phone: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">phone</span>) </span>&#123;                <span class="hljs-keyword">let</span> myreg = <span class="hljs-regexp">/^[1][3,4,5,6,7,8,9][0-9]&#123;9&#125;$/</span>;                <span class="hljs-keyword">if</span> (!myreg.test(phone)) &#123;                    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;请输入正确手机号&quot;</span>;                &#125;            &#125;,            address: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123;                <span class="hljs-keyword">if</span> (value.length &lt; <span class="hljs-number">1</span>) &#123;                    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;请选择市&#x27;</span>;                &#125;            &#125;,        &#125;)        <span class="hljs-comment">//监听省的数据，可以获取市的信息</span>        form.on(<span class="hljs-string">&#x27;select(sheng)&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;            getCityList(data.value);<span class="hljs-comment">//查找城市</span>        &#125;);&#125;)</code></pre><p><strong>解决问题：</strong></p><p> 　　给一张图片你就明白了。下载的layui压缩包内找到对应的文件拷贝到你的放js的文件里面，我把css文件包放进js文件里面就解决问题了，立马弹出提示</p><p><img src="/img/2021/1809041-20200712175227595-1333758996.png" alt="img"></p><p>其实代码都是一步步躺坑过来的，都有点怀疑自己了，到最后发现代码写的没有什么问题，其实问题出在用layui写页面的时候不能只仅仅引入他的js，所以他会报一些错误，js文件夹下的一些css文件找不到？？？，还有一些文件找不到，什么问题，只需要把缺少的一些文件拷贝过来就能出来你想要的结果。</p><p>博主还在继续踩坑，点滴分享，希望能够给您提供一些帮助！</p>]]></content>
    
    
    
    <tags>
      
      <tag>bug</tag>
      
      <tag>layui</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深浅拷贝</title>
    <link href="/2020/09/22/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <url>/2020/09/22/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
    
    <content type="html"><![CDATA[<h1 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝:"></a>深浅拷贝:</h1><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><p>当我们把一个对象赋值给一个新的变量时，赋的其实是该对象的在栈中的地址，而不是堆中的数据。也就是两个对象指向的是同一个存储空间，无论哪个对象发生改变，其实都是改变的存储空间的内容，因此，两个对象是联动的。</p><p>是赋值是将某一数值或对象赋给某个变量的过程，分为下面 2 部分</p><p>基本数据类型：赋值，赋值之后两个变量互不影响</p><p>引用数据类型：赋址，两个变量具有相同的引用，指向同一个对象，相互之间有影响</p><p>对基本类型进行赋值操作，两个变量互不影响。</p><pre><code class="hljs livecodeserver">let  <span class="hljs-keyword">a</span>= <span class="hljs-number">2</span>let b = <span class="hljs-keyword">a</span>b=<span class="hljs-number">3</span>console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">a</span>)console.<span class="hljs-built_in">log</span>(b)</code></pre><p>对引用类型进行赋址操作，两个变量指向同一个对象，改变变量 a 之后会影响变量 b，哪怕改变的只是对象 a 中的基本类型数据。</p><pre><code class="hljs apache"><span class="hljs-attribute">let</span> arr =[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,&#123;name:<span class="hljs-string">&quot;hello&quot;</span>&#125;]<span class="hljs-attribute">let</span> arr<span class="hljs-number">1</span> = arr<span class="hljs-attribute">arr1</span>[<span class="hljs-number">0</span>]=<span class="hljs-number">5</span><span class="hljs-attribute">arr1</span>[<span class="hljs-number">2</span>].name = <span class="hljs-string">&quot;world&quot;</span><span class="hljs-attribute">console</span>.log(arr)<span class="hljs-attribute">console</span>.log(arr<span class="hljs-number">1</span>)<span class="hljs-comment">## </span></code></pre><h2 id="浅拷贝-、深拷贝"><a href="#浅拷贝-、深拷贝" class="headerlink" title="浅拷贝 、深拷贝"></a>浅拷贝 、深拷贝</h2><p>浅拷贝是按位拷贝对象，它会创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值；如果属性是内存地址（引用类型），拷贝的就是内存地址 ，因此如果其中一个对象改变了这个地址，就会影响到另一个对象。即默认拷贝构造函数只是对对象进行浅拷贝复制(逐个成员依次拷贝)，即只复制对象空间而不复制资源。</p><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><pre><code class="hljs prolog"> var obj1 = &#123;    <span class="hljs-string">&#x27;name&#x27;</span> : <span class="hljs-string">&#x27;zhangsan&#x27;</span>,    <span class="hljs-string">&#x27;age&#x27;</span> :  <span class="hljs-string">&#x27;18&#x27;</span>,    <span class="hljs-string">&#x27;language&#x27;</span> : [<span class="hljs-number">1</span>,[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]],&#125;; var obj3 = shallowCopy(obj1);</code></pre><p>//对第一层修改</p><p><code> obj3.name = &quot;lisi&quot;;</code></p><p>//对第二层修改</p><pre><code class="hljs actionscript">obj3.language[<span class="hljs-number">1</span>] = [<span class="hljs-string">&quot;二&quot;</span>,<span class="hljs-string">&quot;三&quot;</span>];<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shallowCopy</span><span class="hljs-params">(src)</span> </span>&#123;<span class="hljs-keyword">var</span> b = &#123;&#125;;</code></pre><p>//对a的数据进行循环，判断如果有key，就把值赋到B对应的key位置<br>//这个循环，遇到数据类型为基本数据类型，赋的是值；遇到引用数据类型，赋的是指针地址</p><pre><code class="hljs stata"> <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> p <span class="hljs-keyword">in</span> a) &#123;        <span class="hljs-keyword">if</span> (a.hasOwnProperty(p)) &#123;            b[<span class="hljs-keyword">prop</span>] = a[<span class="hljs-keyword">prop</span>];        &#125;    &#125;    <span class="hljs-keyword">return</span> b;&#125;</code></pre><p>//浅拷贝，修改obj3后，第一层修改都不影响原数据，第二层以及以上层次的修改都影响原数据</p><p>console.log(‘obj1’,obj1)<br>console.log(‘obj3’,obj3)</p><h3 id="1-Object-assign"><a href="#1-Object-assign" class="headerlink" title="1.Object.assign()"></a>1.<code>Object.assign()</code></h3><p><code>Object.assign()</code> 方法可以把任意多个的源对象自身的可枚举属性拷贝给目标对象，然后返回目标对象。但是 <code>Object.assign()</code>进行的是浅拷贝，拷贝的是对象的属性的引用，而不是对象本身。<br>//当object只有一层时，是深拷贝</p><pre><code class="hljs pgsql">var obj1 = &#123;    <span class="hljs-type">name</span>:&quot;张三&quot;,    children:&#123;        <span class="hljs-type">name</span>:&quot;张三儿子&quot;    &#125;&#125;var obj2 = <span class="hljs-keyword">Object</span>.assign(&#123;&#125;, obj1); obj2.name=&quot;李四&quot;obj2.children.name=&quot;李四儿子&quot;console.log(obj1)console.log(obj2)</code></pre><h3 id="2、Array-prototype-slice-和Array-prototype-concat"><a href="#2、Array-prototype-slice-和Array-prototype-concat" class="headerlink" title="2、Array.prototype.slice()和Array.prototype.concat()"></a>2、<code>Array.prototype.slice()</code>和<code>Array.prototype.concat()</code></h3><pre><code class="hljs pgsql">let  arr = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,&#123;<span class="hljs-type">name</span>:&quot;zhang&quot;&#125;];let  arr1 = arr.concat()arr1[<span class="hljs-number">1</span>]=&quot;hello&quot;arr1[<span class="hljs-number">2</span>].name=&quot;zhangsan&quot;;console.log(arr)console.log(arr1)let  arr = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,&#123;<span class="hljs-type">name</span>:&quot;zhang&quot;&#125;];let  arr1 = arr.<span class="hljs-keyword">slice</span>()arr1[<span class="hljs-number">1</span>]=&quot;hello&quot;arr1[<span class="hljs-number">2</span>].name=&quot;zhangsan&quot;;console.log(arr)console.log(arr1)</code></pre><h3 id="3、扩展运算符-…"><a href="#3、扩展运算符-…" class="headerlink" title="3、扩展运算符 …"></a>3、扩展运算符 …</h3><pre><code class="hljs applescript">let  arr = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,&#123;<span class="hljs-built_in">name</span>:<span class="hljs-string">&quot;zhang&quot;</span>&#125;];let  arr1 = [...arr]arr1[<span class="hljs-number">1</span>]=<span class="hljs-string">&quot;hello&quot;</span>arr1[<span class="hljs-number">2</span>].<span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;zhangsan&quot;</span>;console.<span class="hljs-built_in">log</span>(arr)console.<span class="hljs-built_in">log</span>(arr1)</code></pre><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>将一个对象从内存中完整的拷贝一份出来,从堆内存中开辟一个新的区域存放新对象,且修改新对象不会影响原对象。</p><h3 id="1-JSON-parse-JSON-stringify"><a href="#1-JSON-parse-JSON-stringify" class="headerlink" title="1.JSON.parse(JSON.stringify())"></a>1.<code>JSON.parse(JSON.stringify())</code></h3><pre><code class="hljs javascript"><span class="hljs-keyword">let</span>  arr = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;zhang&quot;</span>&#125;];<span class="hljs-keyword">let</span>  arr1 = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">JSON</span>.stringify(arr))arr1[<span class="hljs-number">1</span>]=<span class="hljs-string">&quot;hello&quot;</span>arr1[<span class="hljs-number">2</span>].name=<span class="hljs-string">&quot;zhangsan&quot;</span>;<span class="hljs-built_in">console</span>.log(arr)<span class="hljs-built_in">console</span>.log(arr1)</code></pre><p>原理： 用<code>JSON.stringify</code>将对象转成<code>JSON</code>字符串，再用<code>JSON.parse()</code>把字符串解析成对象，一去一来，新的对象产生了，而且对象会开辟新的栈，实现深拷贝。<br>undefined、symbol 和函数这三种情况，会直接忽略。<br>这种方法虽然可以实现数组或对象深拷贝,但不能处理函数，得到的结果为null</p><pre><code class="hljs javascript"><span class="hljs-keyword">let</span>  arr = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;zhang&quot;</span>&#125;,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;];<span class="hljs-keyword">let</span>  arr1 = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">JSON</span>.stringify(arr))arr1[<span class="hljs-number">1</span>]=<span class="hljs-string">&quot;hello&quot;</span>arr1[<span class="hljs-number">2</span>].name=<span class="hljs-string">&quot;zhangsan&quot;</span>;<span class="hljs-built_in">console</span>.log(arr)<span class="hljs-built_in">console</span>.log(arr1)</code></pre><h3 id="2-手写递归方法"><a href="#2-手写递归方法" class="headerlink" title="2.手写递归方法"></a>2.手写递归方法</h3><p>递归方法实现深度克隆原理：遍历对象、数组直到里边都是基本数据类型，然后再去复制，就是深度拷贝</p><pre><code class="hljs reasonml">var a = &#123;     no: <span class="hljs-number">2</span>,     per: &#123;         name: <span class="hljs-string">&quot;jack&quot;</span>     &#125;,     per2: &#123;         name: <span class="hljs-string">&quot;rose&quot;</span>   &#125;&#125;<span class="hljs-keyword">let</span>  b = deep<span class="hljs-constructor">Clone(<span class="hljs-params">a</span>)</span>b.no = <span class="hljs-number">10</span>;b.per.=&#123;    name:<span class="hljs-string">&quot;zhang&quot;</span>&#125;console.log(a)console.log(b)<span class="hljs-keyword">function</span> deep<span class="hljs-constructor">Clone(<span class="hljs-params">obj</span>)</span>&#123;    <span class="hljs-keyword">let</span> objClone = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Array</span>.</span></span>is<span class="hljs-constructor">Array(<span class="hljs-params">obj</span>)</span>?<span class="hljs-literal">[]</span>:&#123;&#125;;    <span class="hljs-keyword">if</span>(obj<span class="hljs-operator"> &amp;&amp; </span>typeof obj===<span class="hljs-string">&quot;object&quot;</span>)&#123;        <span class="hljs-keyword">for</span>(key <span class="hljs-keyword">in</span> obj)&#123;            <span class="hljs-keyword">if</span>(obj.has<span class="hljs-constructor">OwnProperty(<span class="hljs-params">key</span>)</span>)&#123;                <span class="hljs-comment">//判断ojb子元素是否为对象，如果是，递归复制</span>                <span class="hljs-keyword">if</span>(obj<span class="hljs-literal">[<span class="hljs-identifier">key</span>]</span>&amp;&amp;typeof obj<span class="hljs-literal">[<span class="hljs-identifier">key</span>]</span> ===<span class="hljs-string">&quot;object&quot;</span>)&#123;                    objClone<span class="hljs-literal">[<span class="hljs-identifier">key</span>]</span> = deep<span class="hljs-constructor">Clone(<span class="hljs-params">obj</span>[<span class="hljs-params">key</span>])</span>;                &#125;<span class="hljs-keyword">else</span>&#123;                    <span class="hljs-comment">//如果不是，简单复制</span>                    objClone<span class="hljs-literal">[<span class="hljs-identifier">key</span>]</span> = obj<span class="hljs-literal">[<span class="hljs-identifier">key</span>]</span>;                &#125;            &#125;        &#125;    &#125;    return objClone;&#125;    </code></pre><h2 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h2><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p>语法: for(初始化; 循环执行条件; 每遍历一个元素后做的事情;){}</p><p>一个语句(<code>i = 0</code>)在整个循环开始之前执行；一个语句(<code>i &lt; 10</code>)定义循环运行长度；还有一个语句(<code>i++</code>)在每轮循环结束后执行</p><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a><code>forEach</code></h3><p>语法: <code>array.forEach(function(item)&#123;&#125;)</code>, 参数item表示数组每一项的元素<br><code>forEach</code>回调function默认有三个参数: item, index, array.<br>使用<code>forEach</code>循环有几点需要特别注意:<br><code>forEach</code>无法在IE中使用，只是在<code>firefox</code>和chrome中实现了该方法</p><p><code>forEach</code> 没有返回值，循环无法停止；不支持链式操作<br>注意这里我们说仅仅是<code>forEach()</code>这个方法不支持链式调用，在调用<code>forEach</code>之前，前面的数组你怎么玩链式都没问题，最后返回一个正常数组即可：<br><code>forEach()</code>不一定改变自身数组。我们可以看看数组中的元素是值类型和引用类型场景下，是否都能获得改变：</p><pre><code class="hljs xquery">var arr1 = [   <span class="hljs-built_in">&#123;name</span>:<span class="hljs-string">&#x27;鸣人&#x27;</span>,age:<span class="hljs-number">16</span>&#125;,   <span class="hljs-built_in">&#123;name</span>:<span class="hljs-string">&#x27;佐助&#x27;</span>,age:<span class="hljs-number">17</span>&#125;];var arr2 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];arr1.forEach(<span class="hljs-type">item</span> =&gt; &#123;   <span class="hljs-type">item</span>.age = <span class="hljs-type">item</span>.age + <span class="hljs-number">1</span>&#125;);//=&gt; [<span class="hljs-built_in">&#123;name</span>:<span class="hljs-string">&#x27;鸣人&#x27;</span>,age:<span class="hljs-number">17</span>&#125;,<span class="hljs-built_in">&#123;name</span>:<span class="hljs-string">&#x27;佐助&#x27;</span>,age:<span class="hljs-number">18</span>&#125;]arr2.forEach(<span class="hljs-type">item</span> =&gt; &#123;  <span class="hljs-type">item</span> = <span class="hljs-type">item</span> * <span class="hljs-number">2</span>&#125;)// =&gt; [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]</code></pre><p>当数组中元素是值类型，<code>forEach</code>绝对不会改变数组；当是引用类型，则可以改变数组</p><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>map方法的作用就是将原数组按照一定的规则映射成一个新的数组。再将其返回，返回的是一个新的数组，而不是将原数组直接改变。<code>forEach</code>和map的区别在于，<code>forEach</code>没有返回值。 map需要返回值，如果不给return，默认返回undefined。使用方法和参数都跟<code>forEach</code>相似。</p><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>filter方法用于过滤数组成员，满足条件的成员组成一个新数组返回。用法和参数跟map差不多。与map方法不同的是，filter方法的回调函数需要返回等于true或false的值。如果为true，则通过，否则，不通过。</p>]]></content>
    
    
    
    <tags>
      
      <tag>知识点总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>uni-app总结</title>
    <link href="/2020/09/19/uni-app%E6%80%BB%E7%BB%93/"/>
    <url>/2020/09/19/uni-app%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="uniapp学习"><a href="#uniapp学习" class="headerlink" title="uniapp学习"></a>uniapp学习</h1><h3 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1,创建项目"></a>1,创建项目</h3><p>hbuilderX创建项目,输入小程序id,微信开发者工具设置安全选项,建立连接</p><h3 id="2-样式不生效问题"><a href="#2-样式不生效问题" class="headerlink" title="2,样式不生效问题:"></a>2,样式不生效问题:</h3><p><img src="/img/2021/1598970919039.png" alt="1598970919039"></p><p>下载uniapp-hello文件,(gitHub)复制uni.css文件到自己的项目</p><p>同时在app.vue文件引入css模块</p><p>@import url(“./common/uni.css”);</p><p>同其他ui框架一样,会编译报错,缺少文件报错,找到static文件下面的相对应的文件,同样复制粘贴过来就OK啦,当时缺少了一个这样格式的文件—uni.ttf</p><h3 id="3-h5跨域问题"><a href="#3-h5跨域问题" class="headerlink" title="3.h5跨域问题"></a>3.h5跨域问题</h3><p>在配置文件manifest.json中底部添加此内容,在其他编辑器打开,</p><p>target是跨域的地址,port是端口号,</p><p>api是指代跨域地址,前端代码直接用api代替跨域的地址</p><pre><code class="hljs js"><span class="hljs-string">&quot;h5&quot;</span>: &#123;        <span class="hljs-string">&quot;devServer&quot;</span>: &#123;            <span class="hljs-string">&quot;port&quot;</span>:<span class="hljs-number">8080</span>,            <span class="hljs-string">&quot;disableHostCheck&quot;</span>: <span class="hljs-literal">true</span>,            <span class="hljs-string">&quot;proxy&quot;</span>: &#123;                <span class="hljs-string">&quot;/api&quot;</span>: &#123;                    <span class="hljs-string">&quot;target&quot;</span>: <span class="hljs-string">&quot;http://localhost:8888&quot;</span>,                     <span class="hljs-string">&quot;changeOrigin&quot;</span>: <span class="hljs-literal">true</span>,                    <span class="hljs-string">&quot;secure&quot;</span>: <span class="hljs-literal">false</span>,                    <span class="hljs-string">&quot;pathRewrite&quot;</span>: &#123;                        <span class="hljs-string">&quot;^/api&quot;</span>: <span class="hljs-string">&quot;&quot;</span>                     &#125;                &#125;            &#125;        &#125;,        <span class="hljs-string">&quot;doman&quot;</span>:<span class="hljs-string">&quot;http://localhost:8888&quot;</span>,        <span class="hljs-string">&quot;router&quot;</span>:&#123;            <span class="hljs-string">&quot;mode&quot;</span>:<span class="hljs-string">&quot;hash&quot;</span>        &#125;    &#125;</code></pre><h3 id="4-uniapp的条件编译"><a href="#4-uniapp的条件编译" class="headerlink" title="4,uniapp的条件编译"></a>4,uniapp的条件编译</h3><p>小程序,h5,支付宝等平台的差异代码渲染,<a href="https://uniapp.dcloud.io/platform?id=%E6%9D%A1%E4%BB%B6%E7%BC%96%E8%AF%91">https://uniapp.dcloud.io/platform?id=%e6%9d%a1%e4%bb%b6%e7%bc%96%e8%af%91</a></p><pre><code class="hljs js">uni.request(&#123;<span class="hljs-comment">// #ifdef  MP-WEIXIN</span>    url: <span class="hljs-string">&#x27;http://localhost:8888/getbanner&#x27;</span>, <span class="hljs-comment">//banner</span><span class="hljs-comment">// #endif</span><span class="hljs-comment">// #ifdef  H5</span>    url: <span class="hljs-string">&#x27;/api/getbanner&#x27;</span>, <span class="hljs-comment">// #endif</span><span class="hljs-comment">// #ifdef APP-PLUS</span>    <span class="hljs-comment">// APP需条件编译的代码</span><span class="hljs-comment">// #endif</span>    data: &#123;&#125;,    header: &#123;&#125;,    success: <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;        <span class="hljs-comment">// console.log(res.data);</span>        <span class="hljs-built_in">this</span>.bannerList = res.data[<span class="hljs-number">0</span>].my_swipe;    &#125;&#125;);</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>jeecg-boot总结</title>
    <link href="/2020/09/18/jeecg-boot%E6%80%BB%E7%BB%93/"/>
    <url>/2020/09/18/jeecg-boot%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="jeecgBoot总结"><a href="#jeecgBoot总结" class="headerlink" title="jeecgBoot总结"></a>jeecgBoot总结</h1><h2 id="源码文件解读"><a href="#源码文件解读" class="headerlink" title="源码文件解读:"></a>源码文件解读:</h2><h3 id="1-登录页面代码位置"><a href="#1-登录页面代码位置" class="headerlink" title="1.登录页面代码位置"></a>1.登录页面代码位置</h3><pre><code class="hljs reasonml">src\components\layouts\<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UserLayout</span>.</span></span>vuesrc/views/user/<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Login</span>.</span></span>vue</code></pre><h3 id="2-首页logo修改"><a href="#2-首页logo修改" class="headerlink" title="2.首页logo修改"></a>2.首页logo修改</h3><pre><code class="hljs awk">src<span class="hljs-regexp">/components/</span>tools/Logo.vue</code></pre><h3 id="3-图片预览路径"><a href="#3-图片预览路径" class="headerlink" title="3.图片预览路径"></a>3.图片预览路径</h3><pre><code class="hljs dust"><span class="xml">public/index.html</span><span class="xml"><span class="hljs-comment">&lt;!-- 全局配置 --&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><span class="xml">  window._CONFIG = </span><span class="hljs-template-variable">&#123;&#125;</span><span class="xml">;</span><span class="xml">  window._CONFIG[&#x27;imgDomainURL&#x27;] = &#x27;http://localhost:8080/jeecg-boot/sys/common/view&#x27;;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><span class="xml">图文访问路径： http://127.0.0.1:8080/jeecg-boot/sys/common/view/user/h.jpg</span></code></pre><h3 id="4-首页报表"><a href="#4-首页报表" class="headerlink" title="4.首页报表"></a>4.首页报表</h3><pre><code class="hljs awk">src<span class="hljs-regexp">/views/</span>dashboard/*src<span class="hljs-regexp">/views/</span>dashboard/Analysis.vue</code></pre><h3 id="5-登录退出逻辑"><a href="#5-登录退出逻辑" class="headerlink" title="5.登录退出逻辑"></a>5.登录退出逻辑</h3><pre><code class="hljs awk"><span class="hljs-number">1</span>.登录页面： src<span class="hljs-regexp">/views/u</span>ser/Login.vue<span class="hljs-number">2</span>.相关API定义位置： src<span class="hljs-regexp">/api/i</span>ndex.js（很多无用的删掉）                   src<span class="hljs-regexp">/api/i</span>ndex.js                   src<span class="hljs-regexp">/api/</span>login.js                   src<span class="hljs-regexp">/api/m</span>anage.js<span class="hljs-number">3</span>.左侧菜单加载页面：src<span class="hljs-regexp">/components/m</span>enu              src<span class="hljs-regexp">/utils/u</span>til.js              src/permission.js<span class="hljs-number">4</span>.隐藏路由配置   用途： 如果那个组件不想在菜单上配置，但有需要路由跳转，则需要在这个地方配置路由。   src<span class="hljs-regexp">/config/</span>router.config.js   对象： constantRouterMap<span class="hljs-number">5</span>. 接口:   <span class="hljs-regexp">/sys/</span>login        登录接口           <span class="hljs-regexp">/sys/</span>permission/queryByUser  获取用户信息接口（首页菜单）</code></pre><h3 id="6-首页风格设置"><a href="#6-首页风格设置" class="headerlink" title="6.首页风格设置"></a>6.首页风格设置</h3><p>src/defaultSettings.js</p><h3 id="7-首页样式自定义（-统一修改样式-）"><a href="#7-首页样式自定义（-统一修改样式-）" class="headerlink" title="7.首页样式自定义（ 统一修改样式 ）"></a>7.首页样式自定义（ 统一修改样式 ）</h3><p>src\assets\less\common.less</p><h2 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h2><h3 id="1-JDictSelectTag字典标签"><a href="#1-JDictSelectTag字典标签" class="headerlink" title="1.JDictSelectTag字典标签"></a>1.JDictSelectTag字典标签</h3><p>提供了一个标签实现下拉和radio组件。JDictSelectTag 标签： 用于表单的标签使用，比如通过性别字典编码：sex，可以直接渲染出下拉组件。</p><pre><code class="hljs js"><span class="hljs-comment">//第一步：</span><span class="hljs-keyword">import</span> JAreaLinkage <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/jeecg/JAreaLinkage&#x27;</span><span class="hljs-comment">//导出：</span>components: &#123;JAreaLinkage&#125;,<span class="hljs-comment">//运用标签</span>    <span class="hljs-comment">//查询：</span>    <span class="hljs-comment">//type=&quot;radio&quot;单选框，不写就是下拉选择</span>    <span class="hljs-comment">//v-model=&quot;queryParam.onShelves&quot;查询字典表</span>        &lt;j-dict-select-tag                type=<span class="hljs-string">&quot;radio&quot;</span>                v-model=<span class="hljs-string">&quot;queryParam.onShelves&quot;</span>                placeholder=<span class="hljs-string">&quot;请选择状态&quot;</span>                dictCode=<span class="hljs-string">&quot;goods_on_shelves&quot;</span>              /&gt;    <span class="hljs-comment">//添加</span>    <span class="hljs-comment">//:triggerChange=&quot;true&quot;定义值可以被更改</span>    <span class="hljs-comment">//v-decorator=&quot;[&#x27;status&#x27;,  &#123;&#125;]&quot;绑定值===v-model</span>        &lt;j-dict-select-tag            v-decorator=<span class="hljs-string">&quot;[&#x27;status&#x27;,  &#123;&#125;]&quot;</span>            :triggerChange=<span class="hljs-string">&quot;true&quot;</span>            placeholder=<span class="hljs-string">&quot;当前状态&quot;</span>            dictCode=<span class="hljs-string">&quot;website_news_status&quot;</span>          /&gt;</code></pre><h3 id="2，时间引用"><a href="#2，时间引用" class="headerlink" title="2，时间引用"></a>2，时间引用</h3><pre><code class="hljs js"><span class="hljs-comment">//导入</span><span class="hljs-keyword">import</span> pick <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;lodash.pick&#x27;</span><span class="hljs-keyword">import</span> moment <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;moment&#x27;</span><span class="hljs-comment">//使用,createTime往后端传的字段</span>&lt;a-date-picker showTime format=<span class="hljs-string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span> v-decorator=<span class="hljs-string">&quot;[ &#x27;createTime&#x27;, &#123;&#125;]&quot;</span> /&gt; <span class="hljs-comment">//edit方法里面修改时间格式</span>    <span class="hljs-comment">// 时间格式化,输出到页面</span>     <span class="hljs-built_in">this</span>.form.setFieldsValue(&#123; <span class="hljs-attr">createTime</span>: <span class="hljs-built_in">this</span>.model.createTime ? moment(<span class="hljs-built_in">this</span>.model.createTime) : <span class="hljs-literal">null</span> &#125;)</code></pre><h3 id="3，富文本编辑器"><a href="#3，富文本编辑器" class="headerlink" title="3，富文本编辑器"></a>3，富文本编辑器</h3><h4 id="第一种：quillEdit"><a href="#第一种：quillEdit" class="headerlink" title="第一种：quillEdit"></a>第一种：quillEdit</h4><pre><code class="hljs js"><span class="hljs-comment">//引用：</span><span class="hljs-keyword">import</span> quillEdit <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/quillEdit&#x27;</span><span class="hljs-comment">//导出：</span>components: &#123; quillEdit&#125;,<span class="hljs-comment">//使用:</span>    &lt;a-form-item :labelCol=<span class="hljs-string">&quot;labelCol&quot;</span> :wrapperCol=<span class="hljs-string">&quot;wrapperCol&quot;</span> label=<span class="hljs-string">&quot;文章内容&quot;</span>&gt;          &lt;quillEdit ref=<span class="hljs-string">&quot;quillEditForm&quot;</span> v-decorator=<span class="hljs-string">&quot;[&#x27;deltaContent&#x27;, &#123;&#125;]&quot;</span> @change=<span class="hljs-string">&quot;getEdit&quot;</span>&gt;&lt;/quillEdit&gt;        &lt;/a-form-item&gt;<span class="hljs-comment">//触发富文本事件的方法：</span>getEdit(value, valuestr) &#123;      <span class="hljs-built_in">console</span>.log(valuestr, value)      <span class="hljs-built_in">this</span>.model.deltaContent = <span class="hljs-built_in">JSON</span>.stringify(value)      <span class="hljs-built_in">this</span>.model.content = valuestr &#125;,<span class="hljs-comment">//edit方法中</span><span class="hljs-keyword">if</span> (record.id) &#123;        <span class="hljs-comment">// this.imageUrl = record.shopBossImg //编辑时改变给当前imageUrl变量</span>        <span class="hljs-comment">// this.imageUrl2 = record.headFiles</span>        <span class="hljs-keyword">let</span> id = record.id        <span class="hljs-keyword">let</span> that = <span class="hljs-built_in">this</span>        <span class="hljs-built_in">this</span>.axios(&#123;          url: <span class="hljs-string">&#x27;/admin/websiteNews/queryById?id=&#x27;</span> + id,          method: <span class="hljs-string">&#x27;get&#x27;</span>        &#125;)          .then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) </span>&#123;            <span class="hljs-comment">//  setTimeout(hide, 0);</span>            <span class="hljs-comment">// console.log(that.model, &#x27;this.model&#x27;)</span>            <span class="hljs-comment">// console.log(res.result.summary)</span>            that.summary = res.result.summary <span class="hljs-comment">//新闻摘要</span>            that.keywords = res.result.keywords <span class="hljs-comment">//新闻关键字</span>            that.description = res.result.description <span class="hljs-comment">//新闻描述</span>            <span class="hljs-comment">// console.log(res, &#x27;res=====&#x27;)</span>            <span class="hljs-keyword">let</span> fleg = <span class="hljs-built_in">JSON</span>.stringify(res.result) == <span class="hljs-string">&#x27;&#123;&#125;&#x27;</span>            <span class="hljs-keyword">if</span> (!fleg &amp;&amp; res.result.content != <span class="hljs-string">&#x27;&#x27;</span>) &#123;              <span class="hljs-comment">// console.log(111)</span>              res.result.deltaContent = <span class="hljs-built_in">JSON</span>.parse(res.result.deltaContent)              <span class="hljs-comment">//富文本赋值</span>              that.$refs.quillEditForm.edit(res.result.deltaContent)            &#125;          &#125;)          .catch(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>) </span>&#123;            <span class="hljs-built_in">console</span>.log(err)          &#125;)      &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">let</span> that = <span class="hljs-built_in">this</span>        that.summary = <span class="hljs-string">&#x27;&#x27;</span>        that.keywords = <span class="hljs-string">&#x27;&#x27;</span>        that.description = <span class="hljs-string">&#x27;&#x27;</span>        <span class="hljs-comment">// that.$refs.quillEditForm.edit(&#x27;record.deltaContent&#x27;)</span>      &#125;<span class="hljs-comment">//提交时赋值</span>formData.deltaContent = <span class="hljs-built_in">JSON</span>.stringify(<span class="hljs-built_in">this</span>.model.deltaContent) <span class="hljs-comment">//内容</span></code></pre><p><strong>编辑器引入的js二次封装，解决图片上传base64格式，太耗性能问题，改用图片路径的格式存储：</strong>代码如下</p><pre><code class="hljs js">&lt;template&gt;  &lt;div&gt;    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;quill-editor&quot;</span>&gt;&lt;/div&gt;    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;quill-editor-imgUpload&quot;</span>&gt;      &lt;a-upload        name=<span class="hljs-string">&quot;file&quot;</span>        :data=<span class="hljs-string">&quot;upData&quot;</span>        :multiple=<span class="hljs-string">&quot;false&quot;</span>        action=<span class="hljs-string">&quot;/admin/files/add&quot;</span>        @change=<span class="hljs-string">&quot;handleChange&quot;</span>      &gt;        &lt;a-button id=<span class="hljs-string">&quot;checkImg&quot;</span> display=<span class="hljs-string">&quot;none&quot;</span>&gt;&lt;/a-button&gt;      &lt;/a-upload&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;<span class="hljs-keyword">import</span> Quill <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;quill&#x27;</span><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;quill/dist/quill.snow.css&#x27;</span><span class="hljs-comment">//富文本图片拼接路径域名</span><span class="hljs-comment">// var dataUrl = &quot;http://admin.hongtianjiaju.com/&quot;;//线上</span><span class="hljs-keyword">var</span> dataUrl = <span class="hljs-string">&quot;http://192.168.3.68:8085/&quot;</span><span class="hljs-comment">//线下</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;  name: <span class="hljs-string">&#x27;editor&#x27;</span>,  props: &#123;    value: <span class="hljs-built_in">Object</span>  &#125;,  data() &#123;    <span class="hljs-keyword">return</span> &#123;      upData: &#123;        <span class="hljs-comment">//展示图片</span>        subjectType: <span class="hljs-string">&#x27;08&#x27;</span>,        fileType: <span class="hljs-string">&#x27;1&#x27;</span>,        fileSubpath: <span class="hljs-string">&#x27;quill&#x27;</span> <span class="hljs-comment">//图片路径</span>      &#125;,      quill:<span class="hljs-literal">null</span>,      options: &#123;        theme: <span class="hljs-string">&#x27;snow&#x27;</span>,        modules: &#123;            toolbar: [              [<span class="hljs-string">&#x27;bold&#x27;</span>, <span class="hljs-string">&#x27;italic&#x27;</span>, <span class="hljs-string">&#x27;underline&#x27;</span>, <span class="hljs-string">&#x27;strike&#x27;</span>],              [<span class="hljs-string">&#x27;blockquote&#x27;</span>, <span class="hljs-string">&#x27;code-block&#x27;</span>],              [&#123; <span class="hljs-string">&#x27;header&#x27;</span>: <span class="hljs-number">1</span> &#125;, &#123; <span class="hljs-string">&#x27;header&#x27;</span>: <span class="hljs-number">2</span> &#125;],              [&#123; <span class="hljs-string">&#x27;list&#x27;</span>: <span class="hljs-string">&#x27;ordered&#x27;</span> &#125;, &#123; <span class="hljs-string">&#x27;list&#x27;</span>: <span class="hljs-string">&#x27;bullet&#x27;</span> &#125;],              [&#123; <span class="hljs-string">&#x27;script&#x27;</span>: <span class="hljs-string">&#x27;sub&#x27;</span> &#125;, &#123; <span class="hljs-string">&#x27;script&#x27;</span>: <span class="hljs-string">&#x27;super&#x27;</span> &#125;],              [&#123; <span class="hljs-string">&#x27;indent&#x27;</span>: <span class="hljs-string">&#x27;-1&#x27;</span> &#125;, &#123; <span class="hljs-string">&#x27;indent&#x27;</span>: <span class="hljs-string">&#x27;+1&#x27;</span> &#125;],              [&#123; <span class="hljs-string">&#x27;direction&#x27;</span>: <span class="hljs-string">&#x27;rtl&#x27;</span> &#125;],              [&#123; <span class="hljs-string">&#x27;size&#x27;</span>: [<span class="hljs-string">&#x27;small&#x27;</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">&#x27;large&#x27;</span>, <span class="hljs-string">&#x27;huge&#x27;</span>] &#125;],              [&#123; <span class="hljs-string">&#x27;header&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-literal">false</span>] &#125;],              [&#123; <span class="hljs-string">&#x27;color&#x27;</span>: [] &#125;, &#123; <span class="hljs-string">&#x27;background&#x27;</span>: [] &#125;],              [&#123; <span class="hljs-string">&#x27;font&#x27;</span>: [] &#125;],              [&#123; <span class="hljs-string">&#x27;align&#x27;</span>: [] &#125;],              [<span class="hljs-string">&#x27;clean&#x27;</span>],              [<span class="hljs-string">&#x27;link&#x27;</span>, <span class="hljs-string">&#x27;image&#x27;</span>, <span class="hljs-string">&#x27;video&#x27;</span>]            ]          &#125;,          placeholder: <span class="hljs-string">&#x27;请输入商品详情...&#x27;</span>      &#125;    &#125;  &#125;,  methods:&#123;    gobacke()&#123;      <span class="hljs-keyword">let</span> that=<span class="hljs-built_in">this</span>      <span class="hljs-keyword">if</span>(that.formName!=<span class="hljs-string">&#x27;&#x27;</span>)&#123;          that.$router.push(&#123;<span class="hljs-attr">name</span>:that.formName&#125;)      &#125;<span class="hljs-keyword">else</span>&#123;          <span class="hljs-built_in">window</span>.history.go(<span class="hljs-number">-1</span>)      &#125;    &#125;,    edit(item)&#123;       <span class="hljs-built_in">this</span>.quill.setContents(item)    &#125;,    handleChange(info) &#123;      <span class="hljs-keyword">if</span> (info.file.status !== <span class="hljs-string">&#x27;uploading&#x27;</span>) &#123;        <span class="hljs-built_in">console</span>.log(info.file, info.fileList);      &#125;      <span class="hljs-keyword">if</span> (info.file.status === <span class="hljs-string">&#x27;done&#x27;</span>) &#123;        <span class="hljs-built_in">this</span>.$message.success(<span class="hljs-string">`<span class="hljs-subst">$&#123;info.file.name&#125;</span> 上传成功`</span>);        <span class="hljs-comment">// 获取富文本组件实例</span>        <span class="hljs-keyword">let</span> quill = <span class="hljs-built_in">this</span>.quill        <span class="hljs-comment">// 如果上传成功</span>        <span class="hljs-comment">// 获取光标所在位置</span>        <span class="hljs-keyword">let</span> length = quill.getSelection().index;        <span class="hljs-comment">// 插入图片，res为服务器返回的图片链接地址</span>        <span class="hljs-keyword">if</span> (!!info.file.response) &#123;          <span class="hljs-comment">//如果存在这个参数显示</span>          <span class="hljs-keyword">let</span> response = info.file.response          <span class="hljs-comment">//取出图片路径赋值显示</span>          quill.insertEmbed(length, <span class="hljs-string">&#x27;image&#x27;</span>,dataUrl+response.result.fileUrl)        &#125;        <span class="hljs-comment">// 调整光标到最后</span>        quill.setSelection(length + <span class="hljs-number">1</span>)      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (info.file.status === <span class="hljs-string">&#x27;error&#x27;</span>) &#123;        <span class="hljs-built_in">this</span>.$message.error(<span class="hljs-string">`<span class="hljs-subst">$&#123;info.file.name&#125;</span> 上传失败`</span>);      &#125;    &#125;,  &#125;,  mounted() &#123;    <span class="hljs-keyword">let</span> quillEditor = <span class="hljs-built_in">this</span>.$el.querySelector(<span class="hljs-string">&#x27;.quill-editor&#x27;</span>)    <span class="hljs-built_in">this</span>.quill = <span class="hljs-keyword">new</span> Quill(quillEditor, <span class="hljs-built_in">this</span>.options);    <span class="hljs-built_in">this</span>.quill.setContents(<span class="hljs-built_in">this</span>.value)    <span class="hljs-built_in">this</span>.quill.on(<span class="hljs-string">&#x27;text-change&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;      <span class="hljs-built_in">this</span>.$emit(<span class="hljs-string">&#x27;change&#x27;</span>, <span class="hljs-built_in">this</span>.quill.getContents(),<span class="hljs-built_in">this</span>.quill.container.firstChild.innerHTML)    &#125;);    <span class="hljs-keyword">var</span> toolbar = <span class="hljs-built_in">this</span>.quill.getModule(<span class="hljs-string">&#x27;toolbar&#x27;</span>);    toolbar.addHandler(<span class="hljs-string">&#x27;image&#x27;</span>, <span class="hljs-function">()=&gt;</span>&#123;      <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;checkImg&quot;</span>).click();    &#125;);  &#125;&#125;&lt;/script&gt;&lt;style scoped=<span class="hljs-string">&quot;scoped&quot;</span>&gt;  .quill-editor&#123;    height: <span class="hljs-number">500</span>px;  &#125;  .quill-editor-imgUpload &#123;    display: none;  &#125;&lt;/style&gt;</code></pre><h4 id="第二种：JEditor"><a href="#第二种：JEditor" class="headerlink" title="第二种：JEditor"></a>第二种：JEditor</h4><pre><code class="hljs js"><span class="hljs-comment">//引入</span><span class="hljs-keyword">import</span> JEditor <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/jeecg/JEditor&#x27;</span><span class="hljs-comment">//导出：</span>components: &#123;    editor: JEditor  &#125;,<span class="hljs-comment">//添加方法</span>add() &#123;      <span class="hljs-built_in">this</span>.edit(&#123;&#125;)    &#125;,<span class="hljs-comment">//编辑方法</span>edit(record) &#123;      <span class="hljs-comment">//////////////////////////////////////////</span>      <span class="hljs-built_in">this</span>.findNewsCategoryList()      <span class="hljs-built_in">this</span>.form.resetFields()      <span class="hljs-built_in">this</span>.model = <span class="hljs-built_in">Object</span>.assign(&#123;&#125;, record)      <span class="hljs-built_in">this</span>.visible = <span class="hljs-literal">true</span>      <span class="hljs-built_in">this</span>.$nextTick(<span class="hljs-function">() =&gt;</span> &#123;        <span class="hljs-built_in">this</span>.form.setFieldsValue(          pick(            <span class="hljs-built_in">this</span>.model,            <span class="hljs-string">&#x27;title&#x27;</span>,            <span class="hljs-string">&#x27;categoryId&#x27;</span>,            <span class="hljs-string">&#x27;summary&#x27;</span>,            <span class="hljs-string">&#x27;thumbnail&#x27;</span>,            <span class="hljs-string">&#x27;browseCount&#x27;</span>,            <span class="hljs-string">&#x27;keywords&#x27;</span>,            <span class="hljs-string">&#x27;description&#x27;</span>,            <span class="hljs-string">&#x27;status&#x27;</span>,            <span class="hljs-string">&#x27;content&#x27;</span>          )        )        <span class="hljs-comment">//时间格式化</span>      &#125;)      <span class="hljs-keyword">if</span> (record == <span class="hljs-literal">null</span>) &#123;        <span class="hljs-comment">// 新增新闻</span>        <span class="hljs-built_in">this</span>.model.thumbnail = <span class="hljs-built_in">this</span>.picUrl      &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-comment">// 修改新闻</span>        <span class="hljs-built_in">this</span>.picUrl = <span class="hljs-built_in">this</span>.model.thumbnail      &#125;      <span class="hljs-keyword">if</span> (record.id) &#123;        <span class="hljs-keyword">let</span> id = record.id        <span class="hljs-keyword">let</span> that = <span class="hljs-built_in">this</span>        <span class="hljs-built_in">this</span>.axios(&#123;          url: <span class="hljs-string">&#x27;/admin/news/queryById?id=&#x27;</span> + id,          method: <span class="hljs-string">&#x27;get&#x27;</span>        &#125;)          .then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) </span>&#123;            that.summary = res.result.summary <span class="hljs-comment">//新闻摘要</span>            that.description = res.result.description <span class="hljs-comment">//seo描述</span>            that.keywords = res.result.keywords <span class="hljs-comment">//seo</span>            that.model.content = res.result.content <span class="hljs-comment">//内容</span>            <span class="hljs-comment">// console.log(that.model)</span>          &#125;)          .catch(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>) </span>&#123;            <span class="hljs-built_in">console</span>.log(err)          &#125;)      &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">let</span> that= <span class="hljs-built_in">this</span>;        that.summary = <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">//新闻摘要</span>        that.description = <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">//seo描述</span>        that.keywords = <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">//seo</span>        that.model.content = record.content <span class="hljs-comment">//seo</span>      &#125;    &#125;,</code></pre><p><strong>JEditor富文本js文件：解决base64存储太大问题二次封装：代码如下</strong></p><h3 id="4，图片上传引用"><a href="#4，图片上传引用" class="headerlink" title="4，图片上传引用"></a>4，图片上传引用</h3><pre><code class="hljs js">&lt;!-- 图片上传 --&gt;        &lt;a-form-item :labelCol=<span class="hljs-string">&quot;labelCol&quot;</span> :wrapperCol=<span class="hljs-string">&quot;wrapperCol&quot;</span> label=<span class="hljs-string">&quot;图片&quot;</span>&gt;          &lt;a-upload            name=<span class="hljs-string">&quot;file&quot;</span>            list-type=<span class="hljs-string">&quot;picture-card&quot;</span>            <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;avatar-uploader&quot;</span>            :show-upload-list=<span class="hljs-string">&quot;false&quot;</span>            action=<span class="hljs-string">&quot;/admin/files/add&quot;</span>            :before-upload=<span class="hljs-string">&quot;beforeUpload&quot;</span>            @change=<span class="hljs-string">&quot;handleChange&quot;</span>          &gt;            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;imageUrlshow&quot;</span>&gt;              &lt;img v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;imageUrl&quot;</span> :src=<span class="hljs-string">&quot;imageUrl&quot;</span> alt=<span class="hljs-string">&quot;avatar&quot;</span> width=<span class="hljs-string">&quot;200px&quot;</span> /&gt;              &lt;div v-<span class="hljs-keyword">else</span>&gt;                &lt;a-icon :type=<span class="hljs-string">&quot;loading ? &#x27;loading&#x27; : &#x27;plus&#x27;&quot;</span> /&gt;                &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;ant-upload-text&quot;</span>&gt;上传&lt;/div&gt;              &lt;/div&gt;            &lt;/div&gt;          &lt;/a-upload&gt;&lt;/a-form-item&gt;data()&#123;    imageUrl: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-comment">//存放img显示的变量</span>    loading: <span class="hljs-literal">false</span>, <span class="hljs-comment">//正在加载</span>&#125;,handleChange(info) &#123;      <span class="hljs-comment">//change事件,图片上传中,上传成功,失败都会调用</span>      <span class="hljs-keyword">if</span> (info.file.status === <span class="hljs-string">&#x27;uploading&#x27;</span>) &#123;        <span class="hljs-comment">//正在上传时</span>        <span class="hljs-built_in">this</span>.loading = <span class="hljs-literal">true</span> <span class="hljs-comment">//显示加载状态</span>        <span class="hljs-keyword">return</span>      &#125;      <span class="hljs-keyword">if</span> (!!info.file.response) &#123;        <span class="hljs-comment">//如果存在这个参数显示</span>        <span class="hljs-built_in">console</span>.log(info)        <span class="hljs-keyword">let</span> response = info.file.response        <span class="hljs-built_in">this</span>.imageUrl = response.result.fileUrl <span class="hljs-comment">//取出图片路径赋值显示</span>        <span class="hljs-built_in">this</span>.model.userHead = response.result.fileUrl        <span class="hljs-built_in">this</span>.loading = <span class="hljs-literal">false</span>      &#125;&#125;,beforeUpload(file) &#123;      <span class="hljs-comment">//图片上传前的回调函数</span>      <span class="hljs-keyword">const</span> isJpgOrPng = file.type === <span class="hljs-string">&#x27;image/jpeg&#x27;</span> || file.type === <span class="hljs-string">&#x27;image/png&#x27;</span> || file.type === <span class="hljs-string">&#x27;image/gif&#x27;</span>      <span class="hljs-keyword">if</span> (!isJpgOrPng) &#123;        <span class="hljs-built_in">this</span>.$message.error(<span class="hljs-string">&#x27;头像图片只能上传jpg或者是png,gif的图片!&#x27;</span>)        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>      &#125;      <span class="hljs-keyword">const</span> isLt2M = file.size / <span class="hljs-number">1024</span> / <span class="hljs-number">1024</span> &lt; <span class="hljs-number">2</span>      <span class="hljs-keyword">if</span> (!isLt2M) &#123;        <span class="hljs-built_in">this</span>.$message.error(<span class="hljs-string">&#x27;头像图片不能超过2MB!&#x27;</span>)        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>      &#125;&#125;,edit(record) &#123;   <span class="hljs-comment">// console.log(record)</span>   <span class="hljs-built_in">this</span>.imageUrl = record.userHead <span class="hljs-comment">//修改时赋值</span>    that.model = <span class="hljs-built_in">Object</span>.assign(&#123;&#125;, record)      that.$nextTick(<span class="hljs-function">() =&gt;</span> &#123;        that.form.setFieldsValue(          pick(            <span class="hljs-built_in">this</span>.model,            <span class="hljs-string">&#x27;userHead&#x27;</span>          )<span class="hljs-comment">//userHead向后台传的图片变量</span>        )      &#125;)&#125;</code></pre><h3 id="5，表格常用属性"><a href="#5，表格常用属性" class="headerlink" title="5，表格常用属性"></a>5，表格常用属性</h3><pre><code class="hljs js">&#123;         title: <span class="hljs-string">&#x27;问题&#x27;</span>,         align: <span class="hljs-string">&quot;center&quot;</span>,         dataIndex: <span class="hljs-string">&#x27;title&#x27;</span>,         ellipsis: <span class="hljs-literal">true</span>,<span class="hljs-comment">//溢出隐藏显示...</span>         width:<span class="hljs-string">&#x27;20%&#x27;</span>,       &#125;,</code></pre><h3 id="6-文本域"><a href="#6-文本域" class="headerlink" title="6,文本域"></a>6,文本域</h3><pre><code class="hljs js">&lt;a-textarea style=<span class="hljs-string">&quot;height:150px;&quot;</span> placeholder=<span class="hljs-string">&quot;请输入问题回答&quot;</span> v-decorator=<span class="hljs-string">&quot;[&#x27;content&#x27;, &#123;&#125; ]&quot;</span> /&gt;</code></pre><h3 id="7-单选框特殊性"><a href="#7-单选框特殊性" class="headerlink" title="7.单选框特殊性"></a>7.单选框特殊性</h3><pre><code class="hljs js"><span class="hljs-comment">//Form 表单开发特殊性</span><span class="hljs-comment">//v-decorator 属性</span><span class="hljs-comment">//针对特殊控件： select、radio、checkbox</span>&lt;a-radio-group buttonStyle=<span class="hljs-string">&quot;solid&quot;</span> v-decorator=<span class="hljs-string">&quot;[ &#x27;status&#x27;, &#123;&#x27;initialValue&#x27;:0&#125;]&quot;</span>&gt;    &lt;a-radio-button :value=<span class="hljs-string">&quot;0&quot;</span>&gt;正常&lt;/a-radio-button&gt;    &lt;a-radio-button :value=<span class="hljs-string">&quot;-1&quot;</span>&gt;停止&lt;/a-radio-button&gt;&lt;/a-radio-group&gt;<span class="hljs-comment">//注意： 此处的默认值只能通过&#123;&#x27;initialValue&#x27;:0&#125; 这样的设置，不能通过属性。</span><span class="hljs-comment">//表单编辑赋值操作：</span><span class="hljs-built_in">this</span>.$nextTick(<span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-built_in">this</span>.form.setFieldsValue(pick(<span class="hljs-built_in">this</span>.model,<span class="hljs-string">&#x27;description&#x27;</span>,<span class="hljs-string">&#x27;status&#x27;</span>));&#125;);</code></pre><h3 id="8，省市区三级联动"><a href="#8，省市区三级联动" class="headerlink" title="8，省市区三级联动"></a>8，省市区三级联动</h3><pre><code class="hljs js"><span class="hljs-comment">//引入</span><span class="hljs-keyword">import</span> JAreaLinkage <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@comp/jeecg/JAreaLinkage&#x27;</span><span class="hljs-comment">//导出</span>components: &#123;    JAreaLinkage&#125;,&lt;!-- 位置 --&gt;&lt;a-form-item :labelCol=<span class="hljs-string">&quot;labelCol&quot;</span> :wrapperCol=<span class="hljs-string">&quot;wrapperCol&quot;</span> label=<span class="hljs-string">&quot;位置&quot;</span>&gt;    &lt;!-- 省市县级联 --&gt;    &lt;j-area-linkage v-decorator=<span class="hljs-string">&quot;[&#x27;location&#x27;, &#123;&#125;]&quot;</span> type=<span class="hljs-string">&quot;select&quot;</span> /&gt;&lt;/a-form-item&gt;</code></pre><h3 id="9，时间选择器"><a href="#9，时间选择器" class="headerlink" title="9，时间选择器"></a>9，时间选择器</h3><pre><code class="hljs js">&lt;a-form-item :labelCol=<span class="hljs-string">&quot;labelCol&quot;</span> :wrapperCol=<span class="hljs-string">&quot;wrapperCol&quot;</span> label=<span class="hljs-string">&quot;创建时间&quot;</span>&gt;     &lt;a-date-picker showTime format=<span class="hljs-string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span> v-decorator=<span class="hljs-string">&quot;[ &#x27;createTime&#x27;, &#123;&#125;]&quot;</span> /&gt;&lt;/a-form-item&gt;<span class="hljs-comment">//添加</span>add() &#123;   <span class="hljs-built_in">this</span>.edit(&#123;&#125;)&#125;,edit(record) &#123;<span class="hljs-comment">//编辑时调用的函数</span>  <span class="hljs-built_in">this</span>.imageUrl = record.thumbnail <span class="hljs-comment">//编辑时改变给当前imageUrl变量</span>  <span class="hljs-built_in">this</span>.form.resetFields()  <span class="hljs-built_in">this</span>.model = <span class="hljs-built_in">Object</span>.assign(&#123;&#125;, record)  <span class="hljs-comment">// console.log(this.model, &#x27;this.model&#x27;)</span>      <span class="hljs-built_in">this</span>.visible = <span class="hljs-literal">true</span>      <span class="hljs-built_in">this</span>.$nextTick(<span class="hljs-function">() =&gt;</span> &#123;        <span class="hljs-built_in">this</span>.form.setFieldsValue(          pick(            <span class="hljs-built_in">this</span>.model,            <span class="hljs-string">&#x27;title&#x27;</span>,            <span class="hljs-string">&#x27;categoryType&#x27;</span>,            <span class="hljs-string">&#x27;summary&#x27;</span>,            <span class="hljs-string">&#x27;thumbnail&#x27;</span>          )        )        <span class="hljs-comment">////////////////////////////////////////////////////////////</span>        <span class="hljs-comment">// 时间格式化,输出到页面</span>        <span class="hljs-built_in">this</span>.form.setFieldsValue(&#123; <span class="hljs-attr">createTime</span>: <span class="hljs-built_in">this</span>.model.createTime ? moment(<span class="hljs-built_in">this</span>.model.createTime) : <span class="hljs-literal">null</span> &#125;)      &#125;)    &#125;,<span class="hljs-comment">//表单验证</span>handleOk() &#123;      <span class="hljs-keyword">const</span> that = <span class="hljs-built_in">this</span>      <span class="hljs-comment">// 触发表单验证</span>      <span class="hljs-built_in">this</span>.form.validateFields(<span class="hljs-function">(<span class="hljs-params">err, values</span>) =&gt;</span> &#123;        <span class="hljs-keyword">if</span> (!err) &#123;          that.confirmLoading = <span class="hljs-literal">true</span>          <span class="hljs-comment">// console.log(this.model)</span>          <span class="hljs-keyword">let</span> httpurl = <span class="hljs-string">&#x27;&#x27;</span>          <span class="hljs-keyword">let</span> method = <span class="hljs-string">&#x27;&#x27;</span>          <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.model.id) &#123;            httpurl += <span class="hljs-built_in">this</span>.url.add            method = <span class="hljs-string">&#x27;post&#x27;</span>          &#125; <span class="hljs-keyword">else</span> &#123;            httpurl += <span class="hljs-built_in">this</span>.url.edit            method = <span class="hljs-string">&#x27;put&#x27;</span>          &#125;          <span class="hljs-keyword">let</span> formData = <span class="hljs-built_in">Object</span>.assign(<span class="hljs-built_in">this</span>.model, values)          <span class="hljs-comment">// 时间格式化</span>          formData.createTime = formData.createTime ? formData.createTime.format(<span class="hljs-string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>) : <span class="hljs-literal">null</span>         httpAction(httpurl, formData, method)            .then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;              <span class="hljs-keyword">if</span> (res.success) &#123;                that.$message.success(res.message)                that.$emit(<span class="hljs-string">&#x27;ok&#x27;</span>)              &#125; <span class="hljs-keyword">else</span> &#123;                that.$message.warning(res.message)              &#125;            &#125;)            .finally(<span class="hljs-function">() =&gt;</span> &#123;              that.confirmLoading = <span class="hljs-literal">false</span>              that.close()            &#125;)        &#125;      &#125;)    &#125;,</code></pre><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h1 id="ant-design-vue总结"><a href="#ant-design-vue总结" class="headerlink" title="ant-design-vue总结"></a>ant-design-vue总结</h1><h2 id="input常用"><a href="#input常用" class="headerlink" title="input常用"></a>input常用</h2><h3 id="1，文本域"><a href="#1，文本域" class="headerlink" title="1，文本域"></a>1，文本域</h3><pre><code class="hljs js">&lt;a-textarea style=<span class="hljs-string">&quot;height:150px;&quot;</span> placeholder=<span class="hljs-string">&quot;请输入问题回答&quot;</span> v-decorator=<span class="hljs-string">&quot;[&#x27;content&#x27;, &#123;&#125; ]&quot;</span> /&gt;</code></pre><h3 id="2，input"><a href="#2，input" class="headerlink" title="2，input"></a>2，input</h3><pre><code class="hljs js">&lt;a-input placeholder=<span class="hljs-string">&quot;请输入人员数量&quot;</span> v-decorator=<span class="hljs-string">&quot;[&#x27;personNumber&#x27;, &#123;&#125;]&quot;</span> /&gt;</code></pre><h3 id="3，单选框-配合jeecg-boot"><a href="#3，单选框-配合jeecg-boot" class="headerlink" title="3，单选框//配合jeecg-boot"></a>3，单选框//配合jeecg-boot</h3><pre><code class="hljs js"><span class="hljs-comment">//编辑时赋值，修改</span>&lt;a-form-item :labelCol=<span class="hljs-string">&quot;labelCol&quot;</span> :wrapperCol=<span class="hljs-string">&quot;wrapperCol&quot;</span> label=<span class="hljs-string">&quot;状态&quot;</span>&gt;    &lt;a-radio-group v-decorator=<span class="hljs-string">&quot;[&#x27;status&#x27;, &#123;&#125;]&quot;</span> &gt;        &lt;a-radio  :value=<span class="hljs-string">&quot;0&quot;</span>&gt;正常&lt;/a-radio&gt;       &lt;a-radio :value=<span class="hljs-string">&quot;1&quot;</span>&gt;关闭&lt;/a-radio&gt;     &lt;/a-radio-group&gt;&lt;/a-form-item&gt;</code></pre><h3 id="3，插槽使用，插入自定义显示内容"><a href="#3，插槽使用，插入自定义显示内容" class="headerlink" title="3，插槽使用，插入自定义显示内容"></a>3，插槽使用，插入自定义显示内容</h3><pre><code class="hljs js"><span class="hljs-comment">//columns变量，绑定表格的标题及属性</span>&lt;a-table        ref=<span class="hljs-string">&quot;table&quot;</span>        size=<span class="hljs-string">&quot;middle&quot;</span>        bordered        rowKey=<span class="hljs-string">&quot;id&quot;</span>        :columns=<span class="hljs-string">&quot;columns&quot;</span>        :dataSource=<span class="hljs-string">&quot;dataSource&quot;</span>        :pagination=<span class="hljs-string">&quot;ipagination&quot;</span>        :loading=<span class="hljs-string">&quot;loading&quot;</span>        :rowSelection=<span class="hljs-string">&quot;&#123;selectedRowKeys: selectedRowKeys, onChange: onSelectChange&#125;&quot;</span>        @change=<span class="hljs-string">&quot;handleTableChange&quot;</span>      &gt;       <span class="hljs-comment">//插槽显示img，通过slot绑定插槽，slot-scope携带插槽内引用的数据</span>        &lt;img          style=<span class="hljs-string">&quot;width:34px;heigth:42px&quot;</span>          slot=<span class="hljs-string">&quot;pic&quot;</span>          slot-scope=<span class="hljs-string">&quot;text, record&quot;</span>          :src=<span class="hljs-string">&quot;record.shopBossImg&quot;</span>        /&gt;        <span class="hljs-comment">//插槽显示操作按钮方法</span>        &lt;div style=<span class="hljs-string">&quot;min-width: 100px&quot;</span> slot=<span class="hljs-string">&quot;action&quot;</span> slot-scope=<span class="hljs-string">&quot;text, record&quot;</span>&gt;          &lt;a @click=<span class="hljs-string">&quot;handleEdit(record)&quot;</span>&gt;编辑&lt;/a&gt;&amp;nbsp;          &lt;a-popconfirm title=<span class="hljs-string">&quot;确定删除吗?&quot;</span> @confirm=<span class="hljs-string">&quot;() =&gt; handleDelete(record.id)&quot;</span>&gt;            &lt;a&gt;删除&lt;/a&gt;          &lt;/a-popconfirm&gt;&lt;!--   <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a-divider</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;vertical&quot;</span> /&gt;</span></span><span class="hljs-comment">//一条竖线分割按钮的</span>         &lt;a-dropdown&gt;           &lt;a <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;ant-dropdown-link&quot;</span>&gt;             更多             &lt;a-icon type=<span class="hljs-string">&quot;down&quot;</span> /&gt;           &lt;/a&gt;           &lt;a-menu slot=<span class="hljs-string">&quot;overlay&quot;</span>&gt;             &lt;a-menu-item&gt;--&gt;               &lt;a-popconfirm title=<span class="hljs-string">&quot;确定删除吗?&quot;</span> @confirm=<span class="hljs-string">&quot;() =&gt; handleDelete(record.id)&quot;</span>&gt;                 &lt;a&gt;删除&lt;/a&gt;                &lt;/a-popconfirm&gt;             &lt;/a-menu-item&gt;           &lt;/a-menu&gt;         &lt;/a-dropdown&gt;--&gt;        &lt;/div&gt;&lt;/a-table&gt;data()&#123;    <span class="hljs-keyword">return</span>&#123;        columns: [        &#123;<span class="hljs-comment">//表格第一列前的序号</span>          title: <span class="hljs-string">&#x27;#&#x27;</span>,          dataIndex: <span class="hljs-string">&#x27;&#x27;</span>,          key: <span class="hljs-string">&#x27;rowIndex&#x27;</span>,          width: <span class="hljs-number">60</span>,          align: <span class="hljs-string">&#x27;center&#x27;</span>,          customRender: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">t, r, index</span>) </span>&#123;            <span class="hljs-keyword">return</span> <span class="hljs-built_in">parseInt</span>(index) + <span class="hljs-number">1</span>          &#125;        &#125;,        &#123;          title: <span class="hljs-string">&#x27;头像&#x27;</span>,          align: <span class="hljs-string">&#x27;center&#x27;</span>,          dataIndex: <span class="hljs-string">&#x27;shopBossImg&#x27;</span>,          key: <span class="hljs-string">&#x27;pic&#x27;</span>,          scopedSlots: &#123; <span class="hljs-attr">customRender</span>: <span class="hljs-string">&#x27;pic&#x27;</span> &#125;        &#125;,        &#123;<span class="hljs-comment">//action插槽名称</span>          title: <span class="hljs-string">&#x27;操作&#x27;</span>,          width: <span class="hljs-number">150</span>,          dataIndex: <span class="hljs-string">&#x27;action&#x27;</span>,          align: <span class="hljs-string">&#x27;center&#x27;</span>,          scopedSlots: &#123; <span class="hljs-attr">customRender</span>: <span class="hljs-string">&#x27;action&#x27;</span> &#125;        &#125;,         &#123;            title: <span class="hljs-string">&#x27;支付渠道&#x27;</span>,            align: <span class="hljs-string">&quot;center&quot;</span>,            dataIndex: <span class="hljs-string">&#x27;payChannel&#x27;</span>,            customRender: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">text</span>) </span>&#123;              <span class="hljs-keyword">if</span> (text == <span class="hljs-number">1</span>) &#123;                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;微信支付&#x27;</span>              &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (text == <span class="hljs-number">2</span>) &#123;                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;支付宝支付&#x27;</span>              &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (text == <span class="hljs-number">3</span>) &#123;                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;线下支付&#x27;</span>              &#125;             &#125;          &#125;,      ],    &#125;&#125;</code></pre><h3 id="4，显示头像的展示"><a href="#4，显示头像的展示" class="headerlink" title="4，显示头像的展示"></a>4，显示头像的展示</h3><p>参数为空自动显示默认头像的img</p><pre><code class="hljs js">&lt;a-avatar src=<span class="hljs-string">&quot;图片路径&quot;</span> /&gt;</code></pre><h3 id="5，金额格式化"><a href="#5，金额格式化" class="headerlink" title="5，金额格式化"></a>5，金额格式化</h3><pre><code class="hljs js">&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;pressNum&quot;</span> slot=<span class="hljs-string">&quot;factoryPrice&quot;</span> slot-scope=<span class="hljs-string">&quot;text, record&quot;</span>&gt;          &lt;!-- <span class="hljs-comment">//商品出厂价 --&gt;</span>          &lt;a-statistic valueStyle=<span class="hljs-string">&quot;font-size:16px;&quot;</span> :precision=<span class="hljs-string">&quot;2&quot;</span> :value=<span class="hljs-string">&quot;record.factoryPrice&quot;</span> /&gt;          &lt;!-- <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>元<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span> --&gt;&lt;/div&gt;</code></pre><h3 id="6，模态框调用，父子组件传值，以及逻辑业务处理demo"><a href="#6，模态框调用，父子组件传值，以及逻辑业务处理demo" class="headerlink" title="6，模态框调用，父子组件传值，以及逻辑业务处理demo"></a>6，模态框调用，父子组件传值，以及逻辑业务处理demo</h3><p><strong>预览时：</strong>引入子组件，进行父===》子组件的传值，查找数据 ，进行渲染，ref方法传值</p><p><strong>点击发货请求时：</strong>调用模态框进行逻辑业务处理 </p><p><strong>父组件：</strong></p><pre><code class="hljs vue">&lt;template&gt;  &lt;a-card :bordered&#x3D;&quot;false&quot;&gt;    &lt;!-- 查询区域 --&gt;    &lt;div class&#x3D;&quot;table-page-search-wrapper&quot;&gt;      &lt;a-form layout&#x3D;&quot;inline&quot;&gt;        &lt;a-row :gutter&#x3D;&quot;24&quot;&gt;          &lt;a-col :md&#x3D;&quot;6&quot; :sm&#x3D;&quot;8&quot;&gt;            &lt;a-form-item label&#x3D;&quot;订单编号&quot;&gt;              &lt;a-input placeholder&#x3D;&quot;订单编号&quot; v-model&#x3D;&quot;queryParam.orderNo&quot;&gt;&lt;&#x2F;a-input&gt;            &lt;&#x2F;a-form-item&gt;          &lt;&#x2F;a-col&gt;          &lt;a-col :md&#x3D;&quot;6&quot; :sm&#x3D;&quot;8&quot;&gt;            &lt;a-form-item label&#x3D;&quot;收货人电话&quot;&gt;              &lt;a-input placeholder&#x3D;&quot;请输入手机号&quot; v-model&#x3D;&quot;queryParam.consigneeTelephone&quot;&gt;&lt;&#x2F;a-input&gt;            &lt;&#x2F;a-form-item&gt;          &lt;&#x2F;a-col&gt;          &lt;a-col :md&#x3D;&quot;6&quot; :sm&#x3D;&quot;8&quot;&gt;            &lt;a-form-item label&#x3D;&quot;订单状态&quot;&gt;              &lt;j-dict-select-tag                v-model&#x3D;&quot;queryParam.orderGoodsStatus&quot;                placeholder&#x3D;&quot;当前状态&quot;                dictCode&#x3D;&quot;order_status &quot;              &#x2F;&gt;            &lt;&#x2F;a-form-item&gt;          &lt;&#x2F;a-col&gt;          &lt;a-col :md&#x3D;&quot;6&quot; :sm&#x3D;&quot;8&quot;&gt;            &lt;span style&#x3D;&quot;float: left;overflow: hidden;&quot; class&#x3D;&quot;table-page-search-submitButtons&quot;&gt;              &lt;a-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;searchQuery&quot; icon&#x3D;&quot;search&quot;&gt;查询&lt;&#x2F;a-button&gt;              &lt;a-button                type&#x3D;&quot;primary&quot;                @click&#x3D;&quot;searchReset&quot;                icon&#x3D;&quot;reload&quot;                style&#x3D;&quot;margin-left: 8px&quot;              &gt;重置&lt;&#x2F;a-button&gt;            &lt;&#x2F;span&gt;          &lt;&#x2F;a-col&gt;        &lt;&#x2F;a-row&gt;      &lt;&#x2F;a-form&gt;    &lt;&#x2F;div&gt;    &lt;!-- 查询区域end --&gt;    &lt;!-- table区域-begin --&gt;    &lt;div&gt;      &lt;a-table        ref&#x3D;&quot;table&quot;        size&#x3D;&quot;middle&quot;        bordered        rowKey&#x3D;&quot;id&quot;        :columns&#x3D;&quot;columns&quot;        :dataSource&#x3D;&quot;dataSource&quot;        :pagination&#x3D;&quot;ipagination&quot;        :loading&#x3D;&quot;loading&quot;        @change&#x3D;&quot;handleTableChange&quot;      &gt;        &lt;img          style&#x3D;&quot;width:50px;heigth:50px&quot;          slot&#x3D;&quot;files&quot;          slot-scope&#x3D;&quot;text, record&quot;          :src&#x3D;&quot;record.files[0].fileUrl&quot;        &#x2F;&gt;        &lt;!-- 插槽按钮 --&gt;        &lt;span slot&#x3D;&quot;action&quot; slot-scope&#x3D;&quot;text, record&quot;&gt;          &lt;!-- 查看详情按钮 --&gt;          &lt;a @click&#x3D;&quot;orderView(record)&quot;&gt;详情&lt;&#x2F;a&gt;          &lt;!-- 发货按钮 --&gt;          &lt;span&gt;            &lt;a-divider type&#x3D;&quot;vertical&quot; &#x2F;&gt;            &lt;a @click&#x3D;&quot;deliverShow(record)&quot;&gt;发货&lt;&#x2F;a&gt;          &lt;&#x2F;span&gt;        &lt;&#x2F;span&gt;      &lt;&#x2F;a-table&gt;    &lt;&#x2F;div&gt;    &lt;!-- table区域-end --&gt;    &lt;!-- 模态弹框 --&gt;    &lt;a-modal      :title&#x3D;&quot;itemObj.orderNo&quot;      width&#x3D;&quot;416px&quot;      :visible&#x3D;&quot;deliverWin&quot;      :closable&#x3D;&quot;false&quot;      @ok&#x3D;&quot;handleOk&quot;      :confirmLoading&#x3D;&quot;confirmLoading&quot;      @cancel&#x3D;&quot;handleCancel&quot;    &gt;      &lt;a-form :form&#x3D;&quot;form&quot; :label-col&#x3D;&quot;&#123; span: 5 &#125;&quot; :wrapper-col&#x3D;&quot;&#123; span: 19 &#125;&quot;&gt;        &lt;a-form-item label&#x3D;&quot;物流公司&quot;&gt;          &lt;a-input            placeholder&#x3D;&quot;请输入物流公司名称&quot;            v-decorator&#x3D;&quot;[&#39;logisticsCompany&#39;, &#123; rules: [&#123; required: true, message: &#39;请输入物流公司名称!&#39; &#125;] &#125;]&quot;          &#x2F;&gt;        &lt;&#x2F;a-form-item&gt;        &lt;a-form-item label&#x3D;&quot;物流单号&quot;&gt;          &lt;a-input            placeholder&#x3D;&quot;请输入物流单号&quot;            v-decorator&#x3D;&quot;[&#39;logisticsNo&#39;, &#123; rules: [&#123; required: true, message: &#39;请输入物流公司单号!&#39; &#125;] &#125;]&quot;          &#x2F;&gt;        &lt;&#x2F;a-form-item&gt;        &lt;a-form-item label&#x3D;&quot;物流备注&quot;&gt;          &lt;a-textarea placeholder&#x3D;&quot;请输入物流备注&quot; v-decorator&#x3D;&quot;[&#39;logisticsRemark&#39;, &#123;  &#125;]&quot; &#x2F;&gt;        &lt;&#x2F;a-form-item&gt;      &lt;&#x2F;a-form&gt;    &lt;&#x2F;a-modal&gt;    &lt;!-- 模态弹框end --&gt;     &lt;!--子组件的调用--&gt;    &lt;details-model ref&#x3D;&quot;detailsView&quot;&gt;&lt;&#x2F;details-model&gt;  &lt;&#x2F;a-card&gt;&lt;&#x2F;template&gt;&lt;script&gt;import Vue from &#39;vue&#39;import &#123; JeecgListMixin &#125; from &#39;@&#x2F;mixins&#x2F;JeecgListMixin&#39;import &#123; USER_INFO &#125; from &#39;@&#x2F;store&#x2F;mutation-types&#39;&#x2F;&#x2F;子组件的引入import detailsModel from &#39;.&#x2F;modules&#x2F;detailsModel&#39;export default &#123;  name: &#39;&#39;,  mixins: [JeecgListMixin],  components: &#123;    &#x2F;&#x2F;子组件的挂载    detailsModel  &#125;,  data() &#123;    return &#123;      description: &#39;&#39;,      disableMixinCreated: true,      userInfo: &#123;&#125;,      confirmLoading: false,      form: this.$form.createForm(this, &#123;&#125;),      itemObj: &#123;&#125;,      deliverWin: false,      &#x2F;&#x2F; 表单数据，部分省略      columns: [        &#123;          title: &#39;订单编号&#39;,          align: &#39;center&#39;,          dataIndex: &#39;orderNo&#39;        &#125;,        &#123;          title: &#39;下单人&#39;,          align: &#39;center&#39;,          dataIndex: &#39;sysAccountName&#39;        &#125;      ],      url: &#123;        list: &#39;&#x2F;admin&#x2F;caseInfo&#x2F;list&#39;,        delete: &#39;&#x2F;admin&#x2F;caseInfo&#x2F;delete&#39;,        deleteBatch: &#39;&#x2F;admin&#x2F;caseInfo&#x2F;deleteBatch&#39;,        exportXlsUrl: &#39;admin&#x2F;caseInfo&#x2F;exportXls&#39;,        importExcelUrl: &#39;admin&#x2F;caseInfo&#x2F;importExcel&#39;      &#125;    &#125;  &#125;,  computed: &#123;    importExcelUrl: function() &#123;      return &#96;$&#123;window._CONFIG[&#39;domianURL&#39;]&#125;&#x2F;$&#123;this.url.importExcelUrl&#125;&#96;    &#125;  &#125;,  methods: &#123;    deliverShow(item) &#123;      this.itemObj &#x3D; item      this.form.resetFields()      this.deliverWin &#x3D; true    &#125;,    orderView(item) &#123;      this.$refs.detailsView.view(item)    &#125;,    handleOk(e) &#123;&#x2F;&#x2F;确认按钮的事件，给后台传递数据      var newDate &#x3D; new Date()      var year &#x3D; newDate.getFullYear()      var month &#x3D; newDate.getMonth() &lt; 10 ? &#39;0&#39; + (newDate.getMonth() + 1) : newDate.getMonth() + 1      var day &#x3D; newDate.getDate() &lt; 10 ? &#39;0&#39; + newDate.getDate() : newDate.getDate()      var h &#x3D; newDate.getHours() &lt; 10 ? &#39;0&#39; + newDate.getHours() : newDate.getHours()      var m &#x3D; newDate.getMinutes() &lt; 10 ? &#39;0&#39; + newDate.getMinutes() : newDate.getMinutes()      var s &#x3D; newDate.getSeconds() &lt; 10 ? &#39;0&#39; + newDate.getSeconds() : newDate.getSeconds()      e.preventDefault()      this.form.validateFields((err, values) &#x3D;&gt; &#123;        if (!err) &#123;          values.id &#x3D; this.itemObj.id          values.orderGoodsStatus &#x3D; 2          values.deliveryTime &#x3D; year + &#39;-&#39; + month + &#39;-&#39; + day + &#39; &#39; + h + &#39;:&#39; + m + &#39;:&#39; + s          const hide &#x3D; this.$message.loading(&#39;正在提交物流信息..&#39;, 0)          this.confirmLoading &#x3D; true          var that &#x3D; this          this.axios(&#123;            url: &#39;&#x2F;admin&#x2F;bsOrderGoods&#x2F;send&#39;,            method: &#39;put&#39;,            data: values          &#125;)            .then(function(res) &#123;              setTimeout(hide, 0)              if (res.success) &#123;                that.$message.success(&#39;物流信息提交成功&#39;)                that.deliverWin &#x3D; false                that.searchQuery()                that.confirmLoading &#x3D; false              &#125;            &#125;)            .catch(function(err) &#123;              setTimeout(hide, 0)              that.confirmLoading &#x3D; false              console.log(err)            &#125;)        &#125;      &#125;)    &#125;,    handleCancel() &#123;      this.deliverWin &#x3D; false    &#125;,    getOrder() &#123;      this.url.list &#x3D; &#39;&#x2F;admin&#x2F;bsOrderGoods&#x2F;list&#39;       this.searchQuery()    &#125;  &#125;,  mounted() &#123;    this.userInfo &#x3D; Vue.ls.get(USER_INFO)  console.log(this.userInfo,&#39;this.userInfo&#39;)    this.getOrder()  &#125;,  beforeRouteEnter(to, from, next) &#123;    console.log(to, from, next)    &#x2F;&#x2F; 注意，在路由进入之前，组件实例还未渲染，所以无法获取this实例，只能通过vm来访问组件实例    next(vm &#x3D;&gt; &#123;      if (!!from) &#123;        vm.userInfo &#x3D; Vue.ls.get(USER_INFO)        vm.getOrder()      &#125;    &#125;)  &#125;&#125;&lt;&#x2F;script&gt;&lt;style scoped&gt;&#x2F;* 引入css文件*&#x2F;@import &#39;~@assets&#x2F;less&#x2F;common.less&#39;;&lt;&#x2F;style&gt;</code></pre><p><strong>子组件：</strong></p><pre><code class="hljs vue"></code></pre><h3 id="7，input必选，以及提示"><a href="#7，input必选，以及提示" class="headerlink" title="7，input必选，以及提示"></a>7，input必选，以及提示</h3><pre><code class="hljs js">&lt;a-input placeholder=<span class="hljs-string">&quot;请输入物流单号&quot;</span> v-decorator=<span class="hljs-string">&quot;[&#x27;logisticsNo&#x27;, &#123; rules: [&#123; required: true, message: &#x27;请输入物流公司单号!&#x27; &#125;] &#125;]&quot;</span>/&gt;<span class="hljs-comment">//第二种</span>&lt;a-form-item :labelCol=<span class="hljs-string">&quot;labelCol&quot;</span> :wrapperCol=<span class="hljs-string">&quot;wrapperCol&quot;</span> label=<span class="hljs-string">&quot;案例标题&quot;</span>&gt;   &lt;a-input placeholder=<span class="hljs-string">&quot;请输入案例标题&quot;</span> v-decorator=<span class="hljs-string">&quot;[&#x27;title&#x27;, validatorRules.title]&quot;</span> /&gt;&lt;/a-form-item&gt;validatorRules: &#123;   title: &#123;       rules: [         &#123;           required: <span class="hljs-literal">true</span>,           message: <span class="hljs-string">&#x27;请输入案例标题!&#x27;</span>          &#125;       ]   &#125;,&#125;</code></pre><h3 id="8，图片预览"><a href="#8，图片预览" class="headerlink" title="8，图片预览"></a>8，图片预览</h3><pre><code class="hljs js"><span class="hljs-comment">//预览的组件，ant框架</span>&lt;a-modal :visible=<span class="hljs-string">&quot;previewVisible&quot;</span> :footer=<span class="hljs-string">&quot;null&quot;</span> @cancel=<span class="hljs-string">&quot;yulanVisible&quot;</span>&gt;    &lt;img alt=<span class="hljs-string">&quot;example&quot;</span> style=<span class="hljs-string">&quot;width: 100%&quot;</span> :src=<span class="hljs-string">&quot;previewImage&quot;</span> /&gt;&lt;/a-modal&gt;yulanVisible() &#123;  <span class="hljs-built_in">this</span>.previewVisible = <span class="hljs-literal">false</span>;&#125;,handlePreview()&#123;<span class="hljs-comment">//绑定a-upload图片上传的事件@preview=&quot;handlePreview&quot;</span>  <span class="hljs-comment">//预览图片时的回调函数</span>  <span class="hljs-comment">// console.log(file)</span>  <span class="hljs-built_in">this</span>.previewImage = file.url  <span class="hljs-built_in">this</span>.previewVisible = <span class="hljs-literal">true</span>&#125;</code></pre><h3 id="9，删除——确定按钮"><a href="#9，删除——确定按钮" class="headerlink" title="9，删除——确定按钮"></a>9，删除——确定按钮</h3><pre><code class="hljs js"><span class="hljs-comment">//更多滑过显示删除，点击删除有弹出二次确认</span>&lt;a-divider type=<span class="hljs-string">&quot;vertical&quot;</span> /&gt;          &lt;a-dropdown&gt;            &lt;!-- <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ant-dropdown-link&quot;</span>&gt;</span>更多 <span class="hljs-tag">&lt;<span class="hljs-name">a-icon</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;down&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span> --&gt;            &lt;!-- <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a-menu</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;overlay&quot;</span>&gt;</span> --&gt;</span>              &lt;!-- &lt;a-menu-item&gt; --&gt;                &lt;a-popconfirm title=&quot;确定删除吗?&quot; @confirm=&quot;() =&gt; handleDelete(record.id)&quot;&gt;                  &lt;a&gt;删除&lt;/a&gt;                &lt;/a-popconfirm&gt;<span class="xml">              <span class="hljs-comment">&lt;!-- &lt;/a-menu-item&gt; --&gt;</span></span><span class="xml">            <span class="hljs-comment">&lt;!-- &lt;/a-menu&gt;</span></span> --&gt;          &lt;/a-dropdown&gt;</code></pre><h3 id="10-vue引入组件"><a href="#10-vue引入组件" class="headerlink" title="10,vue引入组件"></a>10,vue引入组件</h3><pre><code class="hljs js"><span class="hljs-comment">//点击事件弹出模态框record传递参数</span>&lt;a @click=<span class="hljs-string">&quot;orderView(record)&quot;</span>&gt;详情&lt;/a&gt;<span class="hljs-comment">//引入</span><span class="hljs-keyword">import</span> detailsModel <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./modules/detailsModel&#x27;</span><span class="hljs-comment">//导出：</span>components: &#123;    detailsModel,&#125;,<span class="hljs-comment">//引用</span>&lt;details-model ref=<span class="hljs-string">&quot;detailsView&quot;</span>&gt;&lt;/details-model&gt;methods:&#123;    orderView(item) &#123;      <span class="hljs-built_in">this</span>.$refs.detailsView.view(item)    &#125;,&#125;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vacation知识点总结</title>
    <link href="/2020/09/18/vacation_%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <url>/2020/09/18/vacation_%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="第二次"><a href="#第二次" class="headerlink" title="第二次"></a>第二次</h1><h3 id="七、flex布局"><a href="#七、flex布局" class="headerlink" title="七、flex布局"></a>七、flex布局</h3><p>回答思路：</p><p>1、flex的父元素的六个属性：</p><p>​        ①display   =&gt;    flex;</p><p>​        ②flex-direction  =&gt;  决定主轴的方向，它包括row, row-reverse, column, column四个值，默认是row，从左向右排列元素</p><p>​        ③flex-wrap  =&gt;  它有三个值：wrap（空间不足时换行），nowrap（空间不足时也换行，会挤在一起,这也是默认值），wrap-reverse(换行，但是第一行在下面)</p><p>​        ④flex-flow =&gt;flex-direction 和flex-wrap的简写，属性是【flex-direction，flex-wrap】的属性值</p><p>​        ⑤justify-content =&gt;  flex-start  、 flex-end  、 center 、 space-between  、 space-around</p><p>​        ⑥align-items  =&gt; flex-start   、 flex-end 、 center 、baseline  、 stretch </p><p>项目元素（子元素）的六个属性：</p><ul><li><code>order</code></li><li><code>flex-grow</code></li><li><code>flex-shrink</code></li><li><code>flex-basis</code></li><li><code>flex</code></li><li><code>align-self</code></li></ul><p>2、工作中写flex布局遇到的问题：</p><h1 id="第三次"><a href="#第三次" class="headerlink" title="第三次"></a>第三次</h1><h1 id="第四次"><a href="#第四次" class="headerlink" title="第四次"></a>第四次</h1><h2 id="19、cookie和-sessionStorage和-localStorage的区别："><a href="#19、cookie和-sessionStorage和-localStorage的区别：" class="headerlink" title="19、cookie和 sessionStorage和 localStorage的区别："></a>19、<code>cookie</code>和 <code>sessionStorage</code>和<code> localStorage</code>的区别：</h2><h3 id="回答问题的思路："><a href="#回答问题的思路：" class="headerlink" title="回答问题的思路："></a>回答问题的思路：</h3><h4 id="共同点："><a href="#共同点：" class="headerlink" title="共同点："></a>共同点：</h4><p>都保存在浏览器端，且是同源的（顺便解释一下同源：域名、协议、端口号相同）</p><h4 id="不同点："><a href="#不同点：" class="headerlink" title="不同点："></a>不同点：</h4><h5 id="存储大小不同："><a href="#存储大小不同：" class="headerlink" title="存储大小不同："></a>存储大小不同：</h5><p>cookie大小一般4k，sessionStorage一般5M，localStorage一般为5M</p><h5 id="有效期不同："><a href="#有效期不同：" class="headerlink" title="有效期不同："></a>有效期不同：</h5><p>cookie:设置有效期之前有效，当超过有效期之后会失效。  localstorage:永久有效，除非你进行手动删除 </p><p>sessionStorage:当前会话有效，关闭浏览器会失效</p><h5 id="sessionStorage和localStorage的作用域的区别详情："><a href="#sessionStorage和localStorage的作用域的区别详情：" class="headerlink" title="sessionStorage和localStorage的作用域的区别详情："></a>sessionStorage和localStorage的作用域的区别详情：</h5><p>不同浏览器无法共享localStorage和sessionStorage中的信息。</p><p>相同浏览器的不同页面间可以共享相同的localStorage（页面属于相同域名和端口），但是不同页面或标签页面无法共享sessionStorage的信息。</p><h3 id="带入项目："><a href="#带入项目：" class="headerlink" title="带入项目："></a>带入项目：</h3><p>window.location.href跳转页面的时候会丢失cookie,不是其他的什么原因，而是需要设置cookie作用域的路径path</p><p>localhost使用出现的问题：</p><p>localStorage和sessionStorage兼容到ie8，判断浏览器是否支持：</p><pre><code class="hljs html">if（window.localStorage）&#123;    alert(&quot;浏览器支持localStorage&quot;)&#125;</code></pre><p>存：localStorage.setItem(“arr”,JSON.stringify(data.body.data)),需要转换成字符串，不能直接存对象，切记</p><p>取：JSON.parse(localStorage.arr)</p><h2 id="20、0-1-0-2-0-3怎么处理"><a href="#20、0-1-0-2-0-3怎么处理" class="headerlink" title="20、0.1+0.2!=0.3怎么处理"></a>20、0.1+0.2!=0.3怎么处理</h2><p>机器精度—误差范围，一般为2-52</p><p>考察js中的数值的理解程度</p><p>解决方案：</p><p>快速说出因为js的浮点数运算不精确的问题，说出两种解决浮点数问题的方案</p><p>涉及、扩展：</p><p>方法1：通过toFixed（num）方法来保留小数，计算结果不精确</p><p>方法2：把计算的数值升级，乘以10的n次方，转换成计算机能够识别的精确的整数，再降幂，推荐使用。</p><h2 id="21、数组的常用方法："><a href="#21、数组的常用方法：" class="headerlink" title="21、数组的常用方法："></a>21、数组的常用方法：</h2><p>①　push( ) 添加：向数组末位添加一个会多个值。unshift（）向数组开头添加一个或多个值。<br>②　pop( ) 删除：删除数组中最后一个值。shift（）删除数组第一个值。<br>③　indexOf（）查找：查找数组中是否有某一个值，存在返回其下标，不存在返回-1.<br> lastIndexOf()查找最后一个重复，返回其下标值。<br>④　join()转换：把数组转换为字符串，括号内填写连接符，默认逗号隔开。<br>⑤　sort()排序：从大到小或从小到大，字符串从a-z；<br>⑥　concat()拼接：将两个数组拼接在一起形成一个新的数组。<br>⑦　reverse()反转：将数组值反序排列。<br>⑧　forEach()遍历：遍历数组，每个元素都执行回调函数。<br>⑨　splice（x,n，z）添加/修改/删除：从下标x（包含x），{从第几个开始删除，删除几个，替换}  删除n个值（值为为0实现添                加），添加z值。删除几个添加几个对应的值实现修改。<br>⑩　filter（）查找到符合条件的值，返回新的数组。<br>⑪　find（）返回第一个符合条件的数组值。<br>⑫　findIndex（）返回第一个符合条件数组值的下标。<br>⑬　include（）查找：能查到返回true，不存在返回false。（Ie不支持）<br>⑭　every() 验证数组中的每个值是否都符合条件，是为true，一个不符合，返回false。<br>⑮　fill() 修改：使用一个值来替换任意值，包括开头，不包括结束。<br>⑯　Array.isArray() 检测是否是数组。<br>⑰　map（）处理数组的每一个值，返回处理后的结果。<br>⑱　some() 检测数组中是否有一个值符合条件，是返回true，全部都不符合，返回false。</p><h2 id="22、new对象的四个过程"><a href="#22、new对象的四个过程" class="headerlink" title="22、new对象的四个过程"></a>22、new对象的四个过程</h2><p>1、创建一个空对象</p><pre><code class="hljs dart"><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();</code></pre><p>2、让person中的this指向obj，并执行person的函数体</p><pre><code class="hljs nim"><span class="hljs-keyword">var</span> <span class="hljs-literal">result</span> = person.call(obj);</code></pre><p>3、设置原型链，将obj的<code>__proto__</code>成员指向了person函数对象的prototype成员对象</p><pre><code class="hljs ini"><span class="hljs-attr">obj.__proto__</span> = person.prototype<span class="hljs-comment">;</span></code></pre><p>4、判断person的返回值类型，如果是值类型，返回obj。如果是引用类型，就是返回这个引用类型的对象。</p><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">if</span>(<span class="hljs-title">typeof</span>(<span class="hljs-variable"><span class="hljs-class">result</span></span>)==<span class="hljs-string">&quot;object&quot;</span>)&#123;</span><span class="hljs-function">    <span class="hljs-variable">person</span> = <span class="hljs-variable"><span class="hljs-class">result</span></span></span><span class="hljs-function">&#125;<span class="hljs-variable"><span class="hljs-keyword">else</span></span>&#123;</span><span class="hljs-function">    <span class="hljs-variable">person</span> = <span class="hljs-variable">obj</span></span><span class="hljs-function">&#125;</span></code></pre><h3 id="涉及、扩展"><a href="#涉及、扩展" class="headerlink" title="涉及、扩展"></a>涉及、扩展</h3><p>1，构造函数的写法</p><p>2，构造函数中的this指向，指向当前实例化的对象</p><p>3，prototype  <code>__proto__</code> 是什么？</p><p>prototype：每个函数都有的一个prototype属性，该属性是一个指针，指向一个对象。而这个对象的用途式包括由特定类型的所有实例共享的属性和方法。使用这个对象的好处就是可以让所有的实录i对象共享它所拥有的属性和方法。</p><p><code>__proto__</code> :每个实例化对象都有一个<code>__proto__</code>属性，用于指向构造函数的原型对象，<code>__proto__</code> 属性实在调用构造函数创建的实例对象时产生的。 </p><h3 id="遇到的问题："><a href="#遇到的问题：" class="headerlink" title="遇到的问题："></a>遇到的问题：</h3><p>构造函数与一个普通函数并无不同，如果你故意不使用new，或者忘记用new，都会出现奇怪的现象。</p><p>构造函数自身有返回值</p><p>简单总结：</p><p>显式的返回值是以下的值：undefined、null 、 boolean 、number等基础类型，并不会代替new式调用的默认行为</p><p>但是显式返回的值：{}，[],RegExp,Date,Function,均会代替new调用的默认返回值this</p><h2 id="23、JS的继承"><a href="#23、JS的继承" class="headerlink" title="23、JS的继承"></a>23、JS的继承</h2><p>①原型链继承<br>重点：让新实例的原型等于父类的实例。<br>　　　　特点：1、实例可继承的属性有：实例的构造函数的属性，父类构造函数属性，父类原型的属性。（新实例不会继承父类实例的属性！）<br>　　　　缺点：1、新实例无法向父类构造函数传参。<br>　　　　　　　2、继承单一。<br>　　　　　　　3、所有新实例都会共享父类实例的属性。（原型上的属性是共享的，一个实例修改了原型属性，另一个实例的原型属性也会被修改！）<br>②二、借用构造函数继承<br>　　　　重点：用.call()和.apply()将父类构造函数引入子类函数（在子类函数中做了父类函数的自执行（复制））<br>　　　　特点：1、只继承了父类构造函数的属性，没有继承父类原型的属性。<br>　　　　　　　2、解决了原型链继承缺点1、2、3。<br>　　　　　　　3、可以继承多个构造函数属性（call多个）。<br>　　　　　　　4、在子实例中可向父实例传参。<br>　　　　缺点：1、只能继承父类构造函数的属性。<br>　　　　　　　2、无法实现构造函数的复用。（每次用每次都要重新调用）<br>　　　　　　　3、每个新实例都有父类构造函数的副本，臃肿。<br>③　三、组合继承（组合原型链继承和借用构造函数继承）（常用）<br>　　　　重点：结合了两种模式的优点，传参和复用<br>　　　　特点：1、可以继承父类原型上的属性，可以传参，可复用。<br>　　　　　　　2、每个新实例引入的构造函数属性是私有的。<br>　　　　缺点：调用了两次父类构造函数（耗内存），子类的构造函数会代替原型上的那个父类构造函数。<br>④　四、原型式继承<br>　　　　重点：用一个函数包装一个对象，然后返回这个函数的调用，这个函数就变成了个可以随意增添属性的实例或对象。object.create()就是这个原理。<br>　　　　特点：类似于复制一个对象，用函数来包装。<br>　　　　缺点：1、所有实例都会继承原型上的属性。<br>　　　　　　　2、无法实现复用。（新实例属性都是后面添加的）<br>⑤寄生式继承<br>　　　　重点：就是给原型式继承外面套了个壳子。<br>　　　　优点：没有创建自定义类型，因为只是套了个壳子返回对象（这个），这个函数顺理成章就成了创建的新对象。<br>　　　　缺点：没用到原型，无法复用。<br>⑥寄生组合式继承（常用）<br>　　　　寄生：在函数内返回对象然后调用<br>　　　　组合：1、函数的原型等于另一个实例。2、在函数中用apply或者call引入另一个构造函数，可传参　<br>　　　　<br>　　　　重点：修复了组合继承的问题</p><h2 id="24、get和post的区别"><a href="#24、get和post的区别" class="headerlink" title="24、get和post的区别"></a>24、get和post的区别</h2><ol><li>get是不安全的，因为在传输过程，数据被放在请求的URL中post的所有操作对用户来说都是不可见的。</li><li>get传送的数据量较小，这主要是因为受URL长度限制；post传送的数据量较大，一般被默认为不受限制。</li><li>get限制form表单的数据集的值必须为ASCII字符；而post支持整个ISO10646字符集。</li><li>get执行效率却比post方法好。get是form提交的默认方法。 收起  </li></ol><h1 id="第五次"><a href="#第五次" class="headerlink" title="第五次"></a>第五次</h1><h1 id="第六次"><a href="#第六次" class="headerlink" title="第六次"></a>第六次</h1><h2 id="31、性能优化"><a href="#31、性能优化" class="headerlink" title="31、性能优化"></a>31、性能优化</h2><h3 id="1、分析题目：回答"><a href="#1、分析题目：回答" class="headerlink" title="1、分析题目：回答"></a>1、分析题目：回答</h3><p>网站的性能优化，如何做优化，用户体验度</p><h3 id="2、面试官员想要的答案："><a href="#2、面试官员想要的答案：" class="headerlink" title="2、面试官员想要的答案："></a>2、面试官员想要的答案：</h3><p>对网页性能的优化</p><p>通过哪些方式进行优化</p><p>如何减轻服务器的压力的</p><h3 id="3-回答该问题思路"><a href="#3-回答该问题思路" class="headerlink" title="3.回答该问题思路"></a>3.回答该问题思路</h3><pre><code class="hljs angelscript">一、 内容层面    <span class="hljs-number">1</span>、DNS解析优化(DNS缓存、减少DNS查找、keep-alive. 适当的主机域名)    <span class="hljs-number">2</span>、避免惠害向，(还是需要的)    <span class="hljs-number">3</span>、切分到多个域名    <span class="hljs-number">4</span>、杜绝<span class="hljs-number">404</span>二、网络传输阶段<span class="hljs-number">1.</span>减少传输过程中实体的大小    <span class="hljs-number">1</span>)缓存    <span class="hljs-number">2</span>) cookie优化    <span class="hljs-number">3</span>)文件压缩(Accept- Encoding: g-zip)<span class="hljs-number">2</span>、减少请求的次数    <span class="hljs-number">1</span>、文件适当的合并    <span class="hljs-number">2</span>、雪碧图    <span class="hljs-number">3</span>、<span class="hljs-number">1</span>异步加载(并发,requirejs)    <span class="hljs-number">4</span>、预加载、延后加载、按需加载上三、渲染阶段<span class="hljs-number">1</span>、js放底部，  css放顶部<span class="hljs-number">2</span>、减少重绘和回流<span class="hljs-number">3</span>、合理使用Viewport等meta头部<span class="hljs-number">4</span>、减少dom节点<span class="hljs-number">5</span>、BigPipe四、脚本执行阶段  <span class="hljs-number">1</span>、缓存节点，尽量减少节点的查找  <span class="hljs-number">2</span>、减少节点的操作(innerHTML)  <span class="hljs-number">3</span>、避免无谓的循环，<span class="hljs-keyword">break</span>、 <span class="hljs-keyword">continue</span>、 <span class="hljs-keyword">return</span>的适 当使用      <span class="hljs-number">4</span>、事件委托</code></pre><h3 id="4、涉及、扩展的知识点"><a href="#4、涉及、扩展的知识点" class="headerlink" title="4、涉及、扩展的知识点"></a>4、涉及、扩展的知识点</h3><p>回答：性能优化、项目的工程化、前期项目的构建</p><h3 id="5、带入项目，使用场景"><a href="#5、带入项目，使用场景" class="headerlink" title="5、带入项目，使用场景"></a>5、带入项目，使用场景</h3><p><img src="/img/2021/22.png" alt="img"></p><h3 id="6、使用过程中可能出现的问题？以及如何解决？"><a href="#6、使用过程中可能出现的问题？以及如何解决？" class="headerlink" title="6、使用过程中可能出现的问题？以及如何解决？"></a>6、使用过程中可能出现的问题？以及如何解决？</h3><p>回答：复用组件时，有可能出现互相影响的情况，</p><p>解决：降低耦合度（高内聚，低耦合思想），高度解耦</p><h2 id="32、对MVC和MVVM的理解"><a href="#32、对MVC和MVVM的理解" class="headerlink" title="32、对MVC和MVVM的理解"></a>32、对MVC和MVVM的理解</h2><p>1、编程中共有28中设计模式，其中MVC最为经典</p><p>例：工厂模式、单例模式、观察者模式等</p><p>2、M：Model（数据层）V：View（视图层-页面）C：Controller（控制器）-就是一个作用域对象。</p><p>3、MVVM：M：代表Model、V：代表View、VM：代表ViewModel</p><p>4、VM就是讲视图（view）和数据层（model）连接起来，实现了数据双向绑定</p><p>5、MVC体现产品为Angular框架，MVVM体现产品为Vue框架</p><h3 id="扩展知识点："><a href="#扩展知识点：" class="headerlink" title="扩展知识点："></a>扩展知识点：</h3><p>1、 模块化思想</p><p>例：AMD、CMD、CommonJS、ES6 Module等</p><p>2、设计模式</p><p>3、模块化编程，集中管理</p><p>4、数据双向绑定</p><p>例：Vue数据双向绑定原理：数据劫持</p><p>Angular数据双向绑定原理：脏检查模式</p><p>5、带入项目，使用场景</p><p><img src="/img/2021/23.png"></p><h2 id="33、Vue2双向数据绑定原理"><a href="#33、Vue2双向数据绑定原理" class="headerlink" title="33、Vue2双向数据绑定原理"></a>33、Vue2双向数据绑定原理</h2><p>Vue采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty劫持data属性的setter、getter，在数据变动时发布消息给订阅者，触发相应的监听回调。</p><p>1、          Object.defineProperty()</p><p>Object.defineProperty()方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回这个对象。</p><p>   Get：</p><p>​      一个给属性提供getter的方法，如果没有getter则为undefined。当访问该属性时，该方法会被执行，方法执行时没有参数传入，但是会传入this对象（由于继承关系，这里的this并不一定是定义该属性的对象）。默认为undefined。</p><p>Set：</p><p>  一个给属性提供setter的方法，如果没有setter则为undefined。当属性值修改时，触发执行该方法。该方法将接受唯一参数，即该属性新的参数值。默认为undefined。</p><h3 id="扩展知识点：-1"><a href="#扩展知识点：-1" class="headerlink" title="扩展知识点："></a>扩展知识点：</h3><p>1、vue双向绑定</p><p><img src="/img/2021/clip_image002.jpg"></p><p>具体步骤：</p><p><img src="/img/2021/clip_image004.jpg"></p><p>2、vue3核心原理Proxy（es6）</p><p><img src="/img/2021/clip_image006.jpg"></p><p>3、          使用过程中可能会出现的问题，以及如何解决？</p><p>Object.defineProperty()只能对属性进行数据劫持，不能对整个对象进行劫持，同理无法对数组进行劫持</p><p>解决方案：vue提供了Vue.set(object,propertyName,value)/vm.$set(object,propertyName,value),来实现为对象添加响应属性。</p><h2 id="34、v-model双向绑定原理"><a href="#34、v-model双向绑定原理" class="headerlink" title="34、v-model双向绑定原理"></a>34、v-model双向绑定原理</h2><p>v-model指令可以在表单<code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>及<code>&lt;select&gt;</code>元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。但v-model本质上不是语法糖。</p><p>完整写法：<code>&lt;input v-bind:value=&quot;&quot; v-on:input=&quot;&quot;/&gt;</code></p><p>v-model会忽略所有表单元素的value、checked、selected特性的初始值，而总是将Vue实例的数据作为数据来源。你应该通过JavaScript在组件的data选项中声明初始值。</p><p>v-model在内部为不同的输入元素使用不同的属性并抛出不同的事件：</p><p>text和textarea元素使用value属性和input事件</p><p>checkbox和radio使用checked属性和change事件</p><p>select字段将value作为prop并将change作为事件</p><h3 id="扩展知识点：-2"><a href="#扩展知识点：-2" class="headerlink" title="扩展知识点："></a>扩展知识点：</h3><p>1、          修饰符</p><p>v-model.lazy只有在input输入框发生一个blur时才触发</p><p>v-model.trim将用户输入的前后的空格去掉</p><p>v-model.number将用户输入的字符串转换成number</p><p>带入项目，使用场景</p><p><img src="/img/2021/clip_image008.jpg"></p><p><img src="/img/2021/clip_image010.jpg"></p><p><img src="/img/2021/clip_image012.jpg"></p><h2 id="35、vue的生命周期"><a href="#35、vue的生命周期" class="headerlink" title="35、vue的生命周期"></a>35、vue的生命周期</h2><p>vue实例从创建到销毁的过程，就是生命周期。也就是从开始创建、初始化数据、编译模板、挂载Dom-&gt;渲染、更新-&gt;渲染、销毁等一系列过程，称之为vue生命周期。</p><h3 id="扩展知识点：-3"><a href="#扩展知识点：-3" class="headerlink" title="扩展知识点："></a>扩展知识点：</h3><p><img src="/img/2021/clip_image014.jpg"></p><h3 id="带入项目，使用场景"><a href="#带入项目，使用场景" class="headerlink" title="带入项目，使用场景"></a>带入项目，使用场景</h3><p><img src="/img/2021/clip_image016.jpg"></p><h3 id="使用过程中可能会出现的问题，以及如何解决？"><a href="#使用过程中可能会出现的问题，以及如何解决？" class="headerlink" title="使用过程中可能会出现的问题，以及如何解决？"></a>使用过程中可能会出现的问题，以及如何解决？</h3><p><img src="/img/2021/clip_image018.jpg"></p><h2 id="36、组件data为什么返回函数"><a href="#36、组件data为什么返回函数" class="headerlink" title="36、组件data为什么返回函数"></a>36、组件data为什么返回函数</h2><p>如果是对象，对象是对同一地址的引用，而不是独立存在的。会造成数据污染。如果写成函数的话，那么他们有一个作用域的概念在里面，相互隔阂，不受影响。每一次都是新的数据。</p><p>1、Data数据如何绑定到view：</p><p>v-model：主要提供了两个功能，view层输入值影响data的属性值，data属性值发生改变会更新view层的数值变化。</p><p>2、为什么使用组件</p><p>1）组件比应用程序小，比类大，如果接口相同还可以替换原来组件。可实现无缝升级。</p><p>2）组件功能是独立的，可以重复使用。</p><p>3）减少代码量，使得代码更容易维护。</p><p>4）是可扩展的html元素，也是Vue实例。</p><p>5）可以接受相同的选项对象（除了一些根级特有的选项）并提供相同的生命周期钩子。</p><p>3、如何创建组件</p><p>全局组件  局部组件</p><p>脚手架：.vue独立组件</p><p>4、          组件通信</p><p><img src="/img/2021/clip_image020.jpg"></p><h1 id="第七次"><a href="#第七次" class="headerlink" title="第七次"></a>第七次</h1>]]></content>
    
    
    <categories>
      
      <category>知识点总结</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>vue中路由跳转传递参数的三种方式</title>
    <link href="/2020/09/18/vue%E4%B8%AD%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <url>/2020/09/18/vue%E4%B8%AD%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="vue中路由跳转传递参数的三种方式"><a href="#vue中路由跳转传递参数的三种方式" class="headerlink" title="vue中路由跳转传递参数的三种方式"></a>vue中路由跳转传递参数的三种方式</h1><p>日常业务中，路由跳转的同时传递参数是比较常见的，传参的方式有三种：</p><h2 id="1）通过动态路由方式"><a href="#1）通过动态路由方式" class="headerlink" title="1）通过动态路由方式"></a>1）通过动态路由方式</h2><p>//路由配置文件中 配置动态路由<br>{<br>     path: ‘/detail/:id’,<br>     name: ‘Detail’,<br>     component: Detail<br>   }<br>//跳转时页面<br>var id = 1;<br>this.$router.push(‘/detail/‘ + id)</p><p>//跳转后页面获取参数<br>this.$route.params.id</p><h2 id="2）通过query属性传值"><a href="#2）通过query属性传值" class="headerlink" title="2）通过query属性传值"></a>2）通过query属性传值</h2><p>//路由配置文件中<br>{<br>     path: ‘/detail’,<br>     name: ‘Detail’,<br>     component: Detail<br>   }<br>//跳转时页面<br>this.$router.push({<br>  path: ‘/detail’,<br>  query: {<br>    name: ‘张三’,<br>    id: 1,<br>  }<br>})</p><p>//跳转后页面获取参数对象<br>this.$route.query </p><h2 id="3）通过params属性传值"><a href="#3）通过params属性传值" class="headerlink" title="3）通过params属性传值"></a>3）通过params属性传值</h2><p>//路由配置文件中<br>{<br>     path: ‘/detail’,<br>     name: ‘Detail’,<br>     component: Detail<br>   }<br>//跳转时页面<br>this.$router.push({<br>  name: ‘Detail’,<br>  params: {<br>    name: ‘张三’，<br>    id: 1,<br>  }<br>})</p><p>//跳转后页面获取参数对象<br>this.$route.params </p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>1.动态路由和query属性传值 页面刷新参数不会丢失， params会丢失 2.动态路由一般用来传一个参数时居多(如详情页的id), query、params可以传递一个也可以传递多个参数 。</p>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue新版本</title>
    <link href="/2020/09/18/vue%E6%96%B0%E7%89%88%E6%9C%AC%E5%AE%89%E8%A3%85/"/>
    <url>/2020/09/18/vue%E6%96%B0%E7%89%88%E6%9C%AC%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="vue新版本"><a href="#vue新版本" class="headerlink" title="vue新版本"></a>vue新版本</h1><h2 id="1-安装node-npm-或cnpm-并测试版本"><a href="#1-安装node-npm-或cnpm-并测试版本" class="headerlink" title="1.安装node npm 或cnpm,并测试版本"></a>1.安装node npm 或cnpm,并测试版本</h2><p>cnpm -v </p><p>npm -v</p><p>vue -V</p><h2 id="2-全局输入："><a href="#2-全局输入：" class="headerlink" title="2.全局输入："></a>2.全局输入：</h2><p>cnpm i -g @vue/cli</p><p>cnpm i -g @vue/cli-init</p><h2 id="使用vue-cli-新版本"><a href="#使用vue-cli-新版本" class="headerlink" title="使用vue/cli(新版本)"></a>使用vue/cli(新版本)</h2><p>vue create demo1</p><p>cd demo1</p><p>npm run serve</p><h2 id="具体步骤："><a href="#具体步骤：" class="headerlink" title="具体步骤："></a>具体步骤：</h2><p><img src="/img/2021/2.png" alt="2.png"></p><p><img src="/img/2021/3.png" alt="img"></p><p><img src="/img/2021/4.png" alt="img"></p><p><img src="/img/2021/5.png" alt="img"></p><p><img src="/img/2021/6.png" alt="img"></p><p>三次回车</p><p><img src="/img/2021/7.png" alt="img"></p><p><img src="/img/2021/8.png" alt="img"></p><p><img src="/img/2021/9.png" alt="img"></p><p><img src="/img/2021/10.png" alt="img"></p><p> <img src="/img/2021/11.png" alt="img"></p><p>\1.  npm install -g @vue/cli                       安装脚手架</p><p>\2.  vue -V                                                   查看脚手架版本,(注:不是vue版本,是脚手架版本)</p><p>\3.  vue create 你的项目名称                  安装项目</p><p>\4.  弹出两个选项,选择第二项,                      ( 注:第一项是代码提示,类似严谨模式,第二项为自定义安装 )</p><p>\5.  选择完出现安装选项,选择Babel (空格选择) 回车确定      其余没讲,暂且略过</p><p>\6.  回车后,出现两个选项,是配置文件,两者皆可,    然后回车–&gt;yes–&gt;再回车</p><p>\7.  cd 你的项目名称                              (进入你的项目)</p><p>\8.  npm run serve </p><p>\9.  出 现  Local  , 是你地址,复制,粘贴到浏览器,             </p><p>\10.  看到 Welcome to Your Vue.js App   恭喜你,菜鸟,安装完成</p><p>Welcome to Your Vue.js App   恭喜你,菜鸟,安装完成</p>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue老版本安装2.0</title>
    <link href="/2020/09/18/vue%E8%80%81%E7%89%88%E6%9C%AC%E5%AE%89%E8%A3%852.0/"/>
    <url>/2020/09/18/vue%E8%80%81%E7%89%88%E6%9C%AC%E5%AE%89%E8%A3%852.0/</url>
    
    <content type="html"><![CDATA[<h1 id="vue老版本安装2-0"><a href="#vue老版本安装2-0" class="headerlink" title="vue老版本安装2.0"></a>vue老版本安装2.0</h1><h2 id="1-安装node-npm-或cnpm-并测试版本"><a href="#1-安装node-npm-或cnpm-并测试版本" class="headerlink" title="1.安装node npm 或cnpm,并测试版本"></a>1.安装node npm 或cnpm,并测试版本</h2><p>cnpm -v </p><p>npm -v</p><p>vue -V</p><h2 id="2-全局输入："><a href="#2-全局输入：" class="headerlink" title="2.全局输入："></a>2.全局输入：</h2><p>cnpm i -g @vue/cli</p><p>cnpm i -g @vue/cli-init</p><h2 id="使用vue-cli-老版本"><a href="#使用vue-cli-老版本" class="headerlink" title="使用vue-cli(老版本)"></a>使用vue-cli(老版本)</h2><p>下载：vue init webpack demo0</p><p>进入项目：cd demo</p><p>启动：npm run dev</p><p><img src="/img/2021/1.png" alt="21.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原理总结</title>
    <link href="/2020/09/18/%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/"/>
    <url>/2020/09/18/%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="原理总结"><a href="#原理总结" class="headerlink" title="原理总结"></a>原理总结</h1><h3 id="1-vue中data为什么是一个函数"><a href="#1-vue中data为什么是一个函数" class="headerlink" title="1.vue中data为什么是一个函数"></a>1.vue中data为什么是一个函数</h3><pre><code class="hljs haskell"><span class="hljs-meta">### 理解：</span>函数有自己的作用域,a组件调用<span class="hljs-class"><span class="hljs-keyword">data</span>函数的时候在a里生效,跟其他的无关,各个组件之间不影响</span>而<span class="hljs-class"><span class="hljs-keyword">data</span>对象永驻内存,`<span class="hljs-keyword">data</span>`是一个对象的话。那么所有组件都共享了同一个对象。改变时各个组件都会变化,那么项目无法进行下去.为了保证组件的数据独立性要求每个组件必须通过`<span class="hljs-keyword">data</span>`函数返回一个对象作为组件的状态。</span>作用:<span class="hljs-number">1.</span>降低高内聚低耦合<span class="hljs-number">2.</span>提高性能</code></pre><h3 id="2-谈一下你对MVVM-原理的理解"><a href="#2-谈一下你对MVVM-原理的理解" class="headerlink" title="2.谈一下你对MVVM 原理的理解"></a>2.谈一下你对<code>MVVM </code>原理的理解</h3><ul><li>传统的<code>MVC</code>指的是,用户操作会请求服务端路由，路由会调用对应的控制器来处理,控制器会获取数据。将结果返回给前端,页面重新渲染</li><li><code>MVVM</code>:传统的前端会将数据手动渲染到页面上,<code>MVVM</code>模式不需要用户收到操作<code>dom</code>元素,将数据绑定到<code>viewModel</code>层上，会自动将数据渲染到页面中，视图变化会通知<code>viewModel层</code>更新数据。<code>ViewModel</code>就是我们<code>MVVM</code>模式中的桥梁.</li></ul><h3 id="3-请说一下响应式数据的原理？"><a href="#3-请说一下响应式数据的原理？" class="headerlink" title="3.请说一下响应式数据的原理？"></a>3.请说一下响应式数据的原理？</h3><p><img src="/img/2021/%E5%93%8D%E5%BA%94%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%8E%9F%E7%90%86.webp"></p><pre><code class="hljs csharp">Object.defineProperty(obj, key, &#123;    enumerable: <span class="hljs-literal">true</span>,    configurable: <span class="hljs-literal">true</span>,    <span class="hljs-keyword">get</span>: <span class="hljs-function">function <span class="hljs-title">reactiveGetter</span> (<span class="hljs-params"></span>)</span> &#123;      <span class="hljs-keyword">const</span> <span class="hljs-keyword">value</span> = getter ? getter.call(obj) : val      <span class="hljs-keyword">if</span> (Dep.target) &#123;        dep.depend() <span class="hljs-comment">// ** 收集依赖 ** /</span>        <span class="hljs-keyword">if</span> (childOb) &#123;          childOb.dep.depend()          <span class="hljs-keyword">if</span> (Array.isArray(<span class="hljs-keyword">value</span>)) &#123;            dependArray(<span class="hljs-keyword">value</span>)          &#125;        &#125;      &#125;      <span class="hljs-keyword">return</span> <span class="hljs-keyword">value</span>    &#125;,    <span class="hljs-keyword">set</span>: <span class="hljs-function">function <span class="hljs-title">reactiveSetter</span> (<span class="hljs-params">newVal</span>)</span> &#123;      <span class="hljs-keyword">const</span> <span class="hljs-keyword">value</span> = getter ? getter.call(obj) : val      <span class="hljs-keyword">if</span> (newVal === <span class="hljs-keyword">value</span> || (newVal !== newVal &amp;&amp; <span class="hljs-keyword">value</span> !== <span class="hljs-keyword">value</span>)) &#123;        <span class="hljs-keyword">return</span>      &#125;      <span class="hljs-keyword">if</span> (process.env.NODE_ENV !== <span class="hljs-string">&#x27;production&#x27;</span> &amp;&amp; customSetter) &#123;        customSetter()      &#125;      val = newVal      childOb = !shallow &amp;&amp; observe(newVal)      dep.notify() <span class="hljs-comment">/**通知相关依赖进行更新**/</span>    &#125;  &#125;)</code></pre><h2 id="3-Vue中是如何检测数组变化"><a href="#3-Vue中是如何检测数组变化" class="headerlink" title="3.Vue中是如何检测数组变化?"></a>3.<code>Vue</code>中是如何检测数组变化?</h2><h3 id="理解"><a href="#理解" class="headerlink" title="理解:"></a>理解:</h3><ul><li>使用函数劫持的方式，重写了数组的方法</li><li><code>Vue</code>将<code>data</code>中的数组，进行了原型链重写。指向了自己定义的数组原型方法，这样当调用数组<code>api</code>时，可以通知依赖更新.如果数组中包含着引用类型。会对数组中的引用类型再次进行监控。</li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理:"></a>原理:</h3><p><img src="C:/Users/xxd/Desktop/%E7%BF%9F_%E6%95%B4%E7%90%86%E9%9D%A2%E8%AF%95/winner/note.assets/%E6%95%B0%E7%BB%84%E5%93%8D%E5%BA%94%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%8E%9F%E7%90%86.png"></p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arrayProto = <span class="hljs-built_in">Array</span>.prototype<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> arrayMethods = <span class="hljs-built_in">Object</span>.create(arrayProto)<span class="hljs-keyword">const</span> methodsToPatch = [  <span class="hljs-string">&#x27;push&#x27;</span>,  <span class="hljs-string">&#x27;pop&#x27;</span>,  <span class="hljs-string">&#x27;shift&#x27;</span>,  <span class="hljs-string">&#x27;unshift&#x27;</span>,  <span class="hljs-string">&#x27;splice&#x27;</span>,  <span class="hljs-string">&#x27;sort&#x27;</span>,  <span class="hljs-string">&#x27;reverse&#x27;</span>]methodsToPatch.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">method</span>) </span>&#123; <span class="hljs-comment">// 重写原型方法</span>  <span class="hljs-keyword">const</span> original = arrayProto[method] <span class="hljs-comment">// 调用原数组的方法</span>  def(arrayMethods, method, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mutator</span> (<span class="hljs-params">...args</span>) </span>&#123;    <span class="hljs-keyword">const</span> result = original.apply(<span class="hljs-built_in">this</span>, args)    <span class="hljs-keyword">const</span> ob = <span class="hljs-built_in">this</span>.__ob__    <span class="hljs-keyword">let</span> inserted    <span class="hljs-keyword">switch</span> (method) &#123;      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;push&#x27;</span>:      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;unshift&#x27;</span>:        inserted = args        <span class="hljs-keyword">break</span>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;splice&#x27;</span>:        inserted = args.slice(<span class="hljs-number">2</span>)        <span class="hljs-keyword">break</span>    &#125;    <span class="hljs-keyword">if</span> (inserted) ob.observeArray(inserted)    <span class="hljs-comment">// notify change</span>    ob.dep.notify() <span class="hljs-comment">// 当调用数组方法后，手动通知视图更新</span>    <span class="hljs-keyword">return</span> result  &#125;)&#125;)<span class="hljs-built_in">this</span>.observeArray(value) <span class="hljs-comment">// 进行深度监控</span></code></pre><h2 id="4-为何Vue采用异步渲染"><a href="#4-为何Vue采用异步渲染" class="headerlink" title="4.为何Vue采用异步渲染?"></a>4.为何<code>Vue</code>采用异步渲染?</h2><h3 id="理解："><a href="#理解：" class="headerlink" title="理解："></a>理解：</h3><p>因为如果不采用异步更新，那么每次更新数据都会对当前组件进行重新渲染.所以为了性能考虑。<code>Vue</code>会在本轮数据更新后，再去异步更新视图!</p><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理:"></a>原理:</h3><p><img src="C:/Users/xxd/Desktop/%E7%BF%9F_%E6%95%B4%E7%90%86%E9%9D%A2%E8%AF%95/winner/note.assets/%E4%B8%BA%E4%BD%95%E5%BC%82%E6%AD%A5%E6%B8%B2%E6%9F%93.png"></p><pre><code class="hljs javascript">update () &#123;    <span class="hljs-comment">/* istanbul ignore else */</span>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.lazy) &#123;      <span class="hljs-built_in">this</span>.dirty = <span class="hljs-literal">true</span>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.sync) &#123;      <span class="hljs-built_in">this</span>.run()    &#125; <span class="hljs-keyword">else</span> &#123;      queueWatcher(<span class="hljs-built_in">this</span>); <span class="hljs-comment">// 当数据发生变化时会将watcher放到一个队列中批量更新</span>    &#125;&#125;<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">queueWatcher</span> (<span class="hljs-params">watcher: Watcher</span>) </span>&#123;  <span class="hljs-keyword">const</span> id = watcher.id <span class="hljs-comment">// 会对相同的watcher进行过滤</span>  <span class="hljs-keyword">if</span> (has[id] == <span class="hljs-literal">null</span>) &#123;    has[id] = <span class="hljs-literal">true</span>    <span class="hljs-keyword">if</span> (!flushing) &#123;      queue.push(watcher)    &#125; <span class="hljs-keyword">else</span> &#123;      <span class="hljs-keyword">let</span> i = queue.length - <span class="hljs-number">1</span>      <span class="hljs-keyword">while</span> (i &gt; index &amp;&amp; queue[i].id &gt; watcher.id) &#123;        i--      &#125;      queue.splice(i + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, watcher)    &#125;    <span class="hljs-comment">// queue the flush</span>    <span class="hljs-keyword">if</span> (!waiting) &#123;      waiting = <span class="hljs-literal">true</span>      <span class="hljs-keyword">if</span> (process.env.NODE_ENV !== <span class="hljs-string">&#x27;production&#x27;</span> &amp;&amp; !config.async) &#123;        flushSchedulerQueue()        <span class="hljs-keyword">return</span>      &#125;      nextTick(flushSchedulerQueue) <span class="hljs-comment">// 调用nextTick方法 批量的进行更新</span>    &#125;  &#125;&#125;</code></pre><h2 id="5-nextTick实现原理"><a href="#5-nextTick实现原理" class="headerlink" title="5.nextTick实现原理?"></a>5.<code>nextTick</code>实现原理?</h2><h3 id="理解-宏任务和微任务-异步方法"><a href="#理解-宏任务和微任务-异步方法" class="headerlink" title="理解:(宏任务和微任务) 异步方法"></a>理解:(<strong>宏任务</strong>和<strong>微任务</strong>) 异步方法</h3><p><code>nextTick</code>方法主要是使用了<strong>宏任务</strong>和<strong>微任务</strong>,定义了一个异步方法.多次调用<code>nextTick</code> 会将方法存入队列中，通过这个异步方法清空当前队列。 所以这个<code>nextTick</code>方法就是异步方法</p><h3 id="原理-2"><a href="#原理-2" class="headerlink" title="原理:"></a>原理:</h3><p><img src="C:/Users/xxd/Desktop/%E7%BF%9F_%E6%95%B4%E7%90%86%E9%9D%A2%E8%AF%95/winner/note.assets/nextTick%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90.png"></p><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> timerFunc  <span class="hljs-comment">// 会定义一个异步方法</span><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Promise</span> !== <span class="hljs-string">&#x27;undefined&#x27;</span> &amp;&amp; isNative(<span class="hljs-built_in">Promise</span>)) &#123;  <span class="hljs-comment">// promise</span>  <span class="hljs-keyword">const</span> p = <span class="hljs-built_in">Promise</span>.resolve()  timerFunc = <span class="hljs-function">() =&gt;</span> &#123;    p.then(flushCallbacks)    <span class="hljs-keyword">if</span> (isIOS) <span class="hljs-built_in">setTimeout</span>(noop)  &#125;  isUsingMicroTask = <span class="hljs-literal">true</span>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!isIE &amp;&amp; <span class="hljs-keyword">typeof</span> MutationObserver !== <span class="hljs-string">&#x27;undefined&#x27;</span> &amp;&amp; ( <span class="hljs-comment">// MutationObserver</span>  isNative(MutationObserver) ||  MutationObserver.toString() === <span class="hljs-string">&#x27;[object MutationObserverConstructor]&#x27;</span>)) &#123;  <span class="hljs-keyword">let</span> counter = <span class="hljs-number">1</span>  <span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> MutationObserver(flushCallbacks)  <span class="hljs-keyword">const</span> textNode = <span class="hljs-built_in">document</span>.createTextNode(<span class="hljs-built_in">String</span>(counter))  observer.observe(textNode, &#123;    characterData: <span class="hljs-literal">true</span>  &#125;)  timerFunc = <span class="hljs-function">() =&gt;</span> &#123;    counter = (counter + <span class="hljs-number">1</span>) % <span class="hljs-number">2</span>    textNode.data = <span class="hljs-built_in">String</span>(counter)  &#125;  isUsingMicroTask = <span class="hljs-literal">true</span>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> setImmediate !== <span class="hljs-string">&#x27;undefined&#x27;</span> ) &#123; <span class="hljs-comment">// setImmediate</span>  timerFunc = <span class="hljs-function">() =&gt;</span> &#123;    setImmediate(flushCallbacks)  &#125;&#125; <span class="hljs-keyword">else</span> &#123;  timerFunc = <span class="hljs-function">() =&gt;</span> &#123;   <span class="hljs-comment">// setTimeout</span>    <span class="hljs-built_in">setTimeout</span>(flushCallbacks, <span class="hljs-number">0</span>)  &#125;&#125;<span class="hljs-comment">// nextTick实现</span><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">nextTick</span> (<span class="hljs-params">cb?: Function, ctx?: Object</span>) </span>&#123;  <span class="hljs-keyword">let</span> _resolve  callbacks.push(<span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-keyword">if</span> (cb) &#123;      <span class="hljs-keyword">try</span> &#123;        cb.call(ctx)      &#125; <span class="hljs-keyword">catch</span> (e) &#123;        handleError(e, ctx, <span class="hljs-string">&#x27;nextTick&#x27;</span>)      &#125;    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (_resolve) &#123;      _resolve(ctx)    &#125;  &#125;)  <span class="hljs-keyword">if</span> (!pending) &#123;    pending = <span class="hljs-literal">true</span>    timerFunc()  &#125;&#125;</code></pre><h2 id="6-Vue中Computed的特点"><a href="#6-Vue中Computed的特点" class="headerlink" title="6.Vue中Computed的特点"></a>6.<code>Vue</code>中<code>Computed</code>的特点</h2><h3 id="理解-1"><a href="#理解-1" class="headerlink" title="理解:"></a>理解:</h3><ul><li>默认<code>computed</code>也是一个<code>watcher</code>是具备缓存的，只要当依赖的属性发生变化时才会更新视图</li></ul><h3 id="原理-3"><a href="#原理-3" class="headerlink" title="原理:"></a>原理:</h3><p><img src="C:/Users/xxd/Desktop/%E7%BF%9F_%E6%95%B4%E7%90%86%E9%9D%A2%E8%AF%95/winner/note.assets/%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7.png"></p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">initComputed</span> (<span class="hljs-params">vm: Component, computed: Object</span>) </span>&#123;  <span class="hljs-keyword">const</span> watchers = vm._computedWatchers = <span class="hljs-built_in">Object</span>.create(<span class="hljs-literal">null</span>)  <span class="hljs-keyword">const</span> isSSR = isServerRendering()  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> computed) &#123;    <span class="hljs-keyword">const</span> userDef = computed[key]    <span class="hljs-keyword">const</span> getter = <span class="hljs-keyword">typeof</span> userDef === <span class="hljs-string">&#x27;function&#x27;</span> ? userDef : userDef.get    <span class="hljs-keyword">if</span> (!isSSR) &#123;      <span class="hljs-comment">// create internal watcher for the computed property.</span>      watchers[key] = <span class="hljs-keyword">new</span> Watcher(        vm,        getter || noop,        noop,        computedWatcherOptions      )    &#125;    <span class="hljs-comment">// component-defined computed properties are already defined on the</span>    <span class="hljs-comment">// component prototype. We only need to define computed properties defined</span>    <span class="hljs-comment">// at instantiation here.</span>    <span class="hljs-keyword">if</span> (!(key <span class="hljs-keyword">in</span> vm)) &#123;      defineComputed(vm, key, userDef)    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (process.env.NODE_ENV !== <span class="hljs-string">&#x27;production&#x27;</span>) &#123;      <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> vm.$data) &#123;        warn(<span class="hljs-string">`The computed property &quot;<span class="hljs-subst">$&#123;key&#125;</span>&quot; is already defined in data.`</span>, vm)      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (vm.$options.props &amp;&amp; key <span class="hljs-keyword">in</span> vm.$options.props) &#123;        warn(<span class="hljs-string">`The computed property &quot;<span class="hljs-subst">$&#123;key&#125;</span>&quot; is already defined as a prop.`</span>, vm)      &#125;    &#125;  &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createComputedGetter</span> (<span class="hljs-params">key</span>) </span>&#123;  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">computedGetter</span> (<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">const</span> watcher = <span class="hljs-built_in">this</span>._computedWatchers &amp;&amp; <span class="hljs-built_in">this</span>._computedWatchers[key]    <span class="hljs-keyword">if</span> (watcher) &#123;      <span class="hljs-keyword">if</span> (watcher.dirty) &#123; <span class="hljs-comment">// 如果依赖的值没发生变化,就不会重新求值</span>        watcher.evaluate()      &#125;      <span class="hljs-keyword">if</span> (Dep.target) &#123;        watcher.depend()      &#125;      <span class="hljs-keyword">return</span> watcher.value    &#125;  &#125;&#125;</code></pre><h2 id="7-Watch中的deep-true-是如何实现的"><a href="#7-Watch中的deep-true-是如何实现的" class="headerlink" title="7.Watch中的deep:true 是如何实现的"></a>7.<code>Watch</code>中的<code>deep:true</code> 是如何实现的</h2><h3 id="理解-2"><a href="#理解-2" class="headerlink" title="理解:"></a>理解:</h3><ul><li>当用户指定了<code>watch</code>中的deep属性为<code>true</code>时，如果当前监控的值是数组类型。会对对象中的每一项进行求值，此时会将当前<code>watcher</code>存入到对应属性的依赖中，这样数组中对象发生变化时也会通知数据更新</li></ul><h2 id="原理-4"><a href="#原理-4" class="headerlink" title="原理:"></a>原理:</h2><pre><code class="hljs javascript">get () &#123;    pushTarget(<span class="hljs-built_in">this</span>) <span class="hljs-comment">// 先将当前依赖放到 Dep.target上</span>    <span class="hljs-keyword">let</span> value    <span class="hljs-keyword">const</span> vm = <span class="hljs-built_in">this</span>.vm    <span class="hljs-keyword">try</span> &#123;      value = <span class="hljs-built_in">this</span>.getter.call(vm, vm)    &#125; <span class="hljs-keyword">catch</span> (e) &#123;      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.user) &#123;        handleError(e, vm, <span class="hljs-string">`getter for watcher &quot;<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.expression&#125;</span>&quot;`</span>)      &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">throw</span> e      &#125;    &#125; <span class="hljs-keyword">finally</span> &#123;      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.deep) &#123; <span class="hljs-comment">// 如果需要深度监控</span>        traverse(value) <span class="hljs-comment">// 会对对象中的每一项取值,取值时会执行对应的get方法</span>      &#125;      popTarget()    &#125;    <span class="hljs-keyword">return</span> value&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_traverse</span> (<span class="hljs-params">val: any, seen: SimpleSet</span>) </span>&#123;  <span class="hljs-keyword">let</span> i, keys  <span class="hljs-keyword">const</span> isA = <span class="hljs-built_in">Array</span>.isArray(val)  <span class="hljs-keyword">if</span> ((!isA &amp;&amp; !isObject(val)) || <span class="hljs-built_in">Object</span>.isFrozen(val) || val <span class="hljs-keyword">instanceof</span> VNode) &#123;    <span class="hljs-keyword">return</span>  &#125;  <span class="hljs-keyword">if</span> (val.__ob__) &#123;    <span class="hljs-keyword">const</span> depId = val.__ob__.dep.id    <span class="hljs-keyword">if</span> (seen.has(depId)) &#123;      <span class="hljs-keyword">return</span>    &#125;    seen.add(depId)  &#125;  <span class="hljs-keyword">if</span> (isA) &#123;    i = val.length    <span class="hljs-keyword">while</span> (i--) _traverse(val[i], seen)  &#125; <span class="hljs-keyword">else</span> &#123;    keys = <span class="hljs-built_in">Object</span>.keys(val)    i = keys.length    <span class="hljs-keyword">while</span> (i--) _traverse(val[keys[i]], seen)  &#125;&#125;</code></pre><h2 id="8-Vue组件的生命周期"><a href="#8-Vue组件的生命周期" class="headerlink" title="8.Vue组件的生命周期"></a>8.<code>Vue</code>组件的生命周期</h2><h3 id="理解-3"><a href="#理解-3" class="headerlink" title="理解:"></a>理解:</h3><h4 id="要掌握每个生命周期什么时候被调用"><a href="#要掌握每个生命周期什么时候被调用" class="headerlink" title="要掌握每个生命周期什么时候被调用"></a>要掌握每个生命周期什么时候被调用</h4><ul><li><code>beforeCreate</code> 在实例初始化之后，数据观测(data observer) 之前被调用。</li><li><code>created</code> 实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。这里没有$el</li><li><code>beforeMount</code> 在挂载开始之前被调用：相关的 render 函数首次被调用。</li><li><code>mounted</code> el 被新创建的 <code>vm.$el</code> 替换，并挂载到实例上去之后调用该钩子。</li><li><code>beforeUpdate</code> 数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。</li><li><code>updated</code> 由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</li><li><code>beforeDestroy</code> 实例销毁之前调用。在这一步，实例仍然完全可用。</li><li><code>destroyed</code> <code>Vue</code> 实例销毁后调用。调用后，<code>Vue</code> 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。</li></ul><h4 id="要掌握每个生命周期内部可以做什么事"><a href="#要掌握每个生命周期内部可以做什么事" class="headerlink" title="要掌握每个生命周期内部可以做什么事"></a>要掌握每个生命周期内部可以做什么事</h4><ul><li><code>created</code> 实例已经创建完成，因为它是最早触发的原因可以进行一些数据，资源的请求。</li><li><code>mounted</code> 实例已经挂载完成，可以进行一些DOM操作</li><li><code>beforeUpdate</code> 可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</li><li><code>updated</code> 可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环。 该钩子在服务器端渲染期间不被调用。</li><li><code>destroyed</code> 可以执行一些优化操作,清空定时器，解除绑定事件</li></ul><p><img src="C:/Users/xxd/Desktop/%E7%BF%9F_%E6%95%B4%E7%90%86%E9%9D%A2%E8%AF%95/winner/note.assets/lifecycle.png"></p><h3 id="原理-5"><a href="#原理-5" class="headerlink" title="原理:"></a>原理:</h3><p><img src=""></p>]]></content>
    
    
    <categories>
      
      <category>知识点总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/09/16/hello-world/"/>
    <url>/2020/09/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vue基础</title>
    <link href="/2020/09/16/vue%E5%9F%BA%E7%A1%80/"/>
    <url>/2020/09/16/vue%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="vue基础"><a href="#vue基础" class="headerlink" title="vue基础"></a>vue基础</h1><h2 id="vue01"><a href="#vue01" class="headerlink" title="vue01"></a>vue01</h2><h3 id="快速学习一个框架的方法"><a href="#快速学习一个框架的方法" class="headerlink" title="快速学习一个框架的方法"></a>快速学习一个框架的方法</h3><p>封装js代码  框架实质</p><p>2遍</p><p>对着文档撸一遍</p><p>用项目提升自己的框架能力</p><p>从新看一遍文档，更深层次对框架有自己的理解</p><h3 id="体验vue"><a href="#体验vue" class="headerlink" title="体验vue"></a>体验vue</h3><pre><code class="hljs vim">var <span class="hljs-keyword">vm</span>=<span class="hljs-keyword">new</span> Vue(&#123;    <span class="hljs-keyword">e</span><span class="hljs-variable">l:</span><span class="hljs-string">&quot;#app&quot;</span>,    dat<span class="hljs-variable">a:</span>&#123;        ms<span class="hljs-variable">g:</span><span class="hljs-string">&quot;hello vue&quot;</span>    &#125;&#125;)</code></pre><h3 id="vue表达式"><a href="#vue表达式" class="headerlink" title="vue表达式"></a>vue表达式</h3><pre><code class="hljs groovy"><span class="hljs-attr">msg:</span><span class="hljs-string">&quot;hello world&quot;</span>,<span class="hljs-attr">htmlStr:</span><span class="hljs-string">&quot;&lt;p&gt;我是一个p标签&lt;/p&gt;&quot;</span>,<span class="hljs-attr">number:</span><span class="hljs-number">0</span>,<span class="hljs-attr">ok:</span><span class="hljs-literal">false</span>,<span class="hljs-attr">arrStr:</span><span class="hljs-string">&quot;a,b,c,d&quot;</span></code></pre><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-comment">&lt;!-- 插值表达式 --&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">msg</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><span class="xml"><span class="hljs-comment">&lt;!-- 标签能否按照原样输出 --&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">htmlStr</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><span class="xml"><span class="hljs-comment">&lt;!-- js运算表达式 --&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">number</span>+<span class="hljs-number">1</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><span class="xml"><span class="hljs-comment">&lt;!-- bol --&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">ok?&quot;yes&quot;:&quot;no&quot;</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><span class="xml"><span class="hljs-comment">&lt;!-- 字符串的方法 --&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">arrStr.split</span>(<span class="hljs-name">&quot;,&quot;</span>)&#125;&#125;</span></code></pre><h3 id="v-html和v-text"><a href="#v-html和v-text" class="headerlink" title="v-html和v-text"></a>v-html和v-text</h3><pre><code class="hljs xml">strHtml:&quot;<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>因为爱情<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>&quot;,xss:&quot;<span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&#x27;alert(1)&#x27;</span>&gt;</span>哇哈哈<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>&quot;</code></pre><p>view</p><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> v-html=<span class="hljs-string">&quot;strHtml&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;&lt;<span class="hljs-keyword">div</span> v-html=<span class="hljs-string">&quot;xss&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;</code></pre><p>v-text</p><pre><code class="hljs applescript">strHtml:<span class="hljs-string">&quot;&lt;p&gt;因为爱情&lt;/p&gt;&quot;</span>v-<span class="hljs-built_in">text</span>=<span class="hljs-string">&quot;strHtml&quot;</span></code></pre><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><pre><code class="hljs avrasm"><span class="hljs-symbol">src:</span><span class="hljs-string">&quot;./4.jpg&quot;</span>,<span class="hljs-symbol">alt:</span><span class="hljs-string">&quot;美女图片&quot;</span>,<span class="hljs-symbol">id:</span><span class="hljs-string">&quot;1&quot;</span></code></pre><pre><code class="hljs groovy">v-<span class="hljs-attr">bind:</span>src=<span class="hljs-string">&quot;src&quot;</span> v-<span class="hljs-attr">bind:</span>alt=<span class="hljs-string">&quot;alt&quot;</span> v-<span class="hljs-attr">bind:</span>id=<span class="hljs-string">&quot;id&quot;</span></code></pre><h3 id="v-style"><a href="#v-style" class="headerlink" title="v-style"></a>v-style</h3><pre><code class="hljs groovy"><span class="hljs-attr">isPink:</span><span class="hljs-literal">true</span>,<span class="hljs-attr">isFont:</span><span class="hljs-literal">true</span>,<span class="hljs-attr">color:</span><span class="hljs-string">&quot;pink&quot;</span>,<span class="hljs-attr">fontSize:</span><span class="hljs-string">&quot;font&quot;</span></code></pre><pre><code class="hljs csharp">v-bind:<span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;&#123;pink:isPink,font:isFont&#125;&quot;</span>v-bind:<span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;[color,fontSize]&quot;</span></code></pre><pre><code class="hljs css"><span class="hljs-selector-class">.pink</span>&#123;    <span class="hljs-attribute">color</span>: pink;&#125;<span class="hljs-selector-class">.font</span>&#123;    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;&#125;</code></pre><h3 id="v-bind-style"><a href="#v-bind-style" class="headerlink" title="v-bind:style"></a>v-bind:style</h3><pre><code class="hljs css"><span class="hljs-selector-tag">color</span><span class="hljs-selector-pseudo">:&quot;pink&quot;</span>,<span class="hljs-selector-tag">fontSize</span><span class="hljs-selector-pseudo">:20</span>,<span class="hljs-selector-tag">myColor</span>:&#123;<span class="hljs-attribute">color</span>:<span class="hljs-string">&quot;pink&quot;</span>&#125;,<span class="hljs-selector-tag">myFontSize</span>:&#123;<span class="hljs-attribute">fontSize</span>:<span class="hljs-string">&quot;20px&quot;</span>&#125;</code></pre><pre><code class="hljs groovy">v-<span class="hljs-attr">bind:</span>style=<span class="hljs-string">&quot;&#123;color:color,fontSize:fontSize+&#x27;px&#x27;&#125;&quot;</span>v-<span class="hljs-attr">bind:</span>style=<span class="hljs-string">&quot;[myColor,myFontSize]&quot;</span></code></pre><h3 id="v-bind缩写"><a href="#v-bind缩写" class="headerlink" title="v-bind缩写"></a>v-bind缩写</h3><pre><code class="hljs clojure"><span class="hljs-symbol">:src=</span><span class="hljs-string">&quot;src&quot;</span> <span class="hljs-symbol">:alt=</span><span class="hljs-string">&quot;alt&quot;</span></code></pre><h3 id="单向数据绑定"><a href="#单向数据绑定" class="headerlink" title="单向数据绑定"></a>单向数据绑定</h3><pre><code class="hljs handlebars"><span class="xml">msg:&quot;hello world&quot;      </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">msg</span>&#125;&#125;</span></code></pre><h3 id="v-model双向数据绑定"><a href="#v-model双向数据绑定" class="headerlink" title="v-model双向数据绑定"></a>v-model双向数据绑定</h3><pre><code class="hljs routeros">msg:<span class="hljs-string">&quot;hello world&quot;</span>       &lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attribute">v-model</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</code></pre><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">go</span>()&#123;</span><span class="hljs-function">     <span class="hljs-title">alert</span>(<span class="hljs-string">&quot;发生了什么&quot;</span>);</span><span class="hljs-function">&#125;</span></code></pre><pre><code class="hljs routeros">&lt;p v-on:<span class="hljs-attribute">click</span>=<span class="hljs-string">&quot;go&quot;</span>&gt;点我一下&lt;/p&gt; 缩写 &lt;p @<span class="hljs-attribute">click</span>=<span class="hljs-string">&quot;go&quot;</span>&gt;再点我一下&lt;/p&gt; 带默认事件的方法 &lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span> @click.<span class="hljs-attribute">prevent</span>=<span class="hljs-string">&quot;go&quot;</span>&gt;哈哈哈&lt;/a&gt;</code></pre><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><pre><code class="hljs avrasm"><span class="hljs-symbol">arr:</span>[<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>],<span class="hljs-symbol">obj:</span>&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;123&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span>,<span class="hljs-string">&quot;sex&quot;</span>:<span class="hljs-string">&quot;女&quot;</span>&#125;</code></pre><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><pre><code class="hljs ini"><span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;isShow&quot;</span></code></pre><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><pre><code class="hljs ini"><span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;isShow&quot;</span></code></pre><h3 id="单选框"><a href="#单选框" class="headerlink" title="单选框"></a>单选框</h3><pre><code class="hljs routeros">男: &lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;男&quot;</span> <span class="hljs-attribute">v-model</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;女: &lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;女&quot;</span> <span class="hljs-attribute">v-model</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;sex:<span class="hljs-string">&quot;男&quot;</span></code></pre><h3 id="下拉框"><a href="#下拉框" class="headerlink" title="下拉框"></a>下拉框</h3><pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">select</span> <span class="hljs-type">name</span>=&quot;&quot; id=&quot;&quot; v-model=&quot;selected&quot;&gt;&lt;<span class="hljs-keyword">option</span> <span class="hljs-keyword">value</span>=&quot;-1&quot;&gt;请选择您想呆的城市&lt;/<span class="hljs-keyword">option</span>&gt;&lt;<span class="hljs-keyword">option</span> <span class="hljs-keyword">value</span>=&quot;0&quot;&gt;北京&lt;/<span class="hljs-keyword">option</span>&gt;&lt;<span class="hljs-keyword">option</span> <span class="hljs-keyword">value</span>=&quot;1&quot;&gt;上海&lt;/<span class="hljs-keyword">option</span>&gt;&lt;<span class="hljs-keyword">option</span> <span class="hljs-keyword">value</span>=&quot;2&quot;&gt;深圳&lt;/<span class="hljs-keyword">option</span>&gt;&lt;/<span class="hljs-keyword">select</span>&gt;selected:<span class="hljs-number">-1</span></code></pre><h2 id="vue02"><a href="#vue02" class="headerlink" title="vue02"></a>vue02</h2><h3 id="全选反选"><a href="#全选反选" class="headerlink" title="全选反选"></a>全选反选</h3><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;checkAnti&quot;</span>&gt;</span>反选<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;checkAll&quot;</span>&gt;</span>全选<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;checkNone&quot;</span>&gt;</span>全不选<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> 喜好:</span><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in inputArr&quot;</span>&gt;</span></span><span class="xml">                </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">item.text</span>&#125;&#125;</span><span class="xml"> : <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;item.checked&quot;</span>&gt;</span></span><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;vue.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span></span><span class="xml">        new Vue(&#123;</span><span class="xml">            el: &quot;#app&quot;,</span><span class="xml">            data: &#123;</span><span class="xml">                inputArr: [&#123;</span><span class="xml">                        text: &#x27;足球&#x27;,</span><span class="xml">                        checked: true</span><span class="xml">                    &#125;,</span><span class="xml">                    &#123;</span><span class="xml">                        text: &#x27;篮球&#x27;,</span><span class="xml">                        checked: false</span><span class="xml">                    &#125;,</span><span class="xml">                    &#123;</span><span class="xml">                        text: &#x27;羽毛球&#x27;,</span><span class="xml">                        checked: false</span><span class="xml">                    &#125;,</span><span class="xml">                    &#123;</span><span class="xml">                        text: &#x27;游泳&#x27;,</span><span class="xml">                        checked: false</span><span class="xml">                    &#125;,</span><span class="xml">                ],</span><span class="xml">            &#125;,</span><span class="xml">            methods: &#123;</span><span class="xml">                checkNone() &#123;</span><span class="xml">                    this.inputArr.forEach(item =&gt; &#123;</span><span class="xml">                        item.checked = false;</span><span class="xml">                    &#125;);</span><span class="xml">                &#125;,</span><span class="xml">                checkAll() &#123;</span><span class="xml">                    this.inputArr.forEach(item =&gt; &#123;</span><span class="xml">                        item.checked = true;</span><span class="xml">                    &#125;);</span><span class="xml">                &#125;,</span><span class="xml">                checkAnti() &#123;</span><span class="xml">                    this.inputArr.forEach(item =&gt; &#123;</span><span class="xml">                        item.checked = !item.checked;</span><span class="xml">                    &#125;);</span><span class="xml">                &#125;</span><span class="xml">            &#125;</span><span class="xml">        &#125;)</span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></code></pre><h3 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h3><pre><code class="hljs routeros">methods:&#123;    doThis()&#123;     alert(<span class="hljs-string">&quot;我就是惊喜&quot;</span>);    &#125;&#125;&lt;button @<span class="hljs-attribute">click</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;点我有惊喜&lt;/button&gt;&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text&quot;</span> @<span class="hljs-attribute">keyup</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</code></pre><h3 id="阻止浏览器默认事件儿或者事件儿冒泡"><a href="#阻止浏览器默认事件儿或者事件儿冒泡" class="headerlink" title="阻止浏览器默认事件儿或者事件儿冒泡"></a>阻止浏览器默认事件儿或者事件儿冒泡</h3><pre><code class="hljs reasonml">methods:&#123; <span class="hljs-keyword">do</span><span class="hljs-constructor">This(<span class="hljs-params">ev</span>)</span>&#123;        ev.prevent<span class="hljs-constructor">Default()</span>;        console.log(<span class="hljs-string">&quot;我跳还是不跳&quot;</span>);    &#125;&#125;&lt;a href=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span> @click=<span class="hljs-string">&quot;doThis&quot;</span>&gt;跳到百度&lt;/a&gt;</code></pre><h3 id="事件参数"><a href="#事件参数" class="headerlink" title="事件参数"></a>事件参数</h3><pre><code class="hljs xml">methods:&#123;doThis(id,e)&#123;     e.preventDefault();    console.log(id)    &#125;&#125;<span class="hljs-comment">&lt;!-- 假如普通参数和事件对象放在一起的时候，记得要用$event 代表事件对象 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.souhu.com&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;doThis(1,$event)&quot;</span>&gt;</span>搜狐<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre><h3 id="私有过滤器"><a href="#私有过滤器" class="headerlink" title="私有过滤器"></a>私有过滤器</h3><pre><code class="hljs handlebars"><span class="xml"> //hello world反过来  app的私有过滤器</span><span class="xml">filters:&#123;//过滤器</span><span class="xml">     str3(st4r)&#123;</span><span class="xml">    return str.slice(0,3)</span><span class="xml">&#125;,</span><span class="xml">myReverse(val)&#123;</span><span class="xml">     return val.split(&quot;&quot;).reverse().join(&quot;&quot;);</span><span class="xml">    &#125;</span><span class="xml">&#125;</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><span class="xml">    </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">msg</span>|str3&#125;&#125;</span><span class="xml">    </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">msg</span>|myReverse&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app2&quot;</span>&gt;</span></span><span class="xml">    </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">vue</span>|myReverse&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></code></pre><h3 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h3><pre><code class="hljs processing">Vue.<span class="hljs-built_in">filter</span>(<span class="hljs-string">&quot;myReverse&quot;</span>,(val)=&gt;&#123;     <span class="hljs-keyword">return</span> val.<span class="hljs-built_in">split</span>(<span class="hljs-string">&quot;&quot;</span>).<span class="hljs-built_in">reverse</span>().<span class="hljs-built_in">join</span>(<span class="hljs-string">&quot;&quot;</span>);)</code></pre><h3 id="过滤器案例"><a href="#过滤器案例" class="headerlink" title="过滤器案例"></a>过滤器案例</h3><pre><code class="hljs javascript"> Vue.filter(<span class="hljs-string">&quot;myTime&quot;</span>,<span class="hljs-function">(<span class="hljs-params">val,conone,contwo</span>)=&gt;</span>&#123;<span class="hljs-comment">//获取年份</span><span class="hljs-keyword">let</span> y=val.getFullYear();<span class="hljs-keyword">let</span> m=val.getMonth()+<span class="hljs-number">1</span>;<span class="hljs-keyword">let</span> d=val.getDate();     <span class="hljs-comment">// 2019-- 3-- 8  模版字符串</span>     <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;y&#125;</span><span class="hljs-subst">$&#123;conone&#125;</span><span class="hljs-subst">$&#123;contwo&#125;</span><span class="hljs-subst">$&#123;m&#125;</span><span class="hljs-subst">$&#123;conone&#125;</span><span class="hljs-subst">$&#123;contwo&#125;</span><span class="hljs-subst">$&#123;d&#125;</span>`</span>;&#125;)<span class="hljs-keyword">var</span> vm=<span class="hljs-keyword">new</span> Vue(&#123;el:<span class="hljs-string">&quot;#app&quot;</span>, data:&#123;    msg:<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>() &#125;&#125;)&lt;!-- 函数调用 --&gt;&#123;&#123;msg|myTime(<span class="hljs-string">&quot;-&quot;</span>,<span class="hljs-string">&quot;-&quot;</span>)&#125;&#125;</code></pre><h3 id="自定义局部指令"><a href="#自定义局部指令" class="headerlink" title="自定义局部指令"></a>自定义局部指令</h3><pre><code class="hljs dust"><span class="xml">directives:</span><span class="hljs-template-variable">&#123;</span><span class="hljs-template-variable">&quot;myfocus&quot;:&#123;</span><span class="hljs-template-variable">     //追加 inserted </span><span class="hljs-template-variable">    inserted:function(el)&#123;</span><span class="hljs-template-variable">         el.focus()</span><span class="hljs-template-variable">     &#125;</span><span class="xml">    &#125; </span><span class="xml"> &#125;</span><span class="xml"> <span class="hljs-comment">&lt;!-- 添加指令:v-自定义指令名词 --&gt;</span></span><span class="xml"> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;id1&quot;</span> <span class="hljs-attr">v-myfocus</span>/&gt;</span></span></code></pre><h3 id="自定义全局指令"><a href="#自定义全局指令" class="headerlink" title="自定义全局指令"></a>自定义全局指令</h3><pre><code class="hljs javascript">Vue.directive(<span class="hljs-string">&quot;myfocus&quot;</span>,&#123; <span class="hljs-string">&quot;inserted&quot;</span>:<span class="hljs-function">(<span class="hljs-params">el</span>)=&gt;</span>&#123;    el.focus();  &#125;&#125;)&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;&lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-myfocus&gt;&lt;/div&gt;&lt;div id=<span class="hljs-string">&quot;app2&quot;</span>&gt;&lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-myfocus&gt;&lt;/div&gt;</code></pre><h3 id="自定义指令的问题"><a href="#自定义指令的问题" class="headerlink" title="自定义指令的问题"></a>自定义指令的问题</h3><pre><code class="hljs vim">Vue.directive(<span class="hljs-string">&#x27;myfocus&#x27;</span>,&#123;    <span class="hljs-string">&quot;inserted&quot;</span>:<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(el)</span>&#123;</span>        <span class="hljs-keyword">el</span>.focus()  //focus属性绑定了最后一个     <span class="hljs-keyword">el</span>.style.background=<span class="hljs-string">&quot;pink&quot;</span>       &#125;&#125;)var <span class="hljs-keyword">vm</span>=<span class="hljs-keyword">new</span> Vue(&#123;    <span class="hljs-keyword">e</span><span class="hljs-variable">l:</span><span class="hljs-string">&quot;#app&quot;</span>,    method<span class="hljs-variable">s:</span>&#123;        <span class="hljs-string">&quot;aa&quot;</span>:<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span>&#123;</span>     &#125;    &#125;,    directive<span class="hljs-variable">s:</span>&#123;         <span class="hljs-string">&quot;myfocuss&quot;</span>:&#123;         inserted:<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(el)</span>&#123;</span>             <span class="hljs-keyword">el</span>.focus()         &#125;      &#125;    &#125;&#125;)&lt;<span class="hljs-built_in">input</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text&quot;</span> v-myfocus&gt;&lt;<span class="hljs-built_in">input</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text&quot;</span> v-myfocus&gt;&lt;<span class="hljs-built_in">input</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text&quot;</span> v-myfocus&gt;&lt;<span class="hljs-built_in">input</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text&quot;</span> v-myfocus&gt;&lt;<span class="hljs-built_in">input</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text&quot;</span> v-myfocus&gt;&lt;<span class="hljs-built_in">input</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text&quot;</span> v-myfocuss&gt;</code></pre><h3 id="购物车案例"><a href="#购物车案例" class="headerlink" title="购物车案例"></a>购物车案例</h3><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span></span><span class="xml">        \#shop&#123;</span><span class="xml">            width: 500px;</span><span class="xml">            margin: 40px auto;</span><span class="xml">            text-align: center;</span><span class="xml">        &#125;</span><span class="xml">        table&#123;</span><span class="xml">            border-collapse: collapse;</span><span class="xml">            width: 500px;</span><span class="xml">            margin: 40px auto;</span><span class="xml">        &#125;</span><span class="xml">        th,td&#123;</span><span class="xml">            padding: 6px 0;</span><span class="xml">            text-align: center;</span><span class="xml">        &#125;</span><span class="xml">        span&#123;</span><span class="xml">            cursor: pointer;</span><span class="xml">        &#125;</span><span class="xml">        span:hover&#123;</span><span class="xml">            color: red;</span><span class="xml">        &#125;</span><span class="xml">        input&#123;</span><span class="xml">            width: 30px;</span><span class="xml">            border: none;</span><span class="xml">            text-align: center;</span><span class="xml">        &#125;</span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span></span><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span></span><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span></span><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><span class="xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>商品名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><span class="xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>单价<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><span class="xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><span class="xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><span class="xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span></span><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span></span><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">v-for</span> = <span class="hljs-string">&quot;i of arr.entries()&quot;</span>&gt;</span></span><span class="xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">i[1].name</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><span class="xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">i[1].price</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><span class="xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add(i[0])&quot;</span>&gt;</span>购买<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><span class="xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><span class="xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span></span><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;shop&quot;</span>&gt;</span></span><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>购物车<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span> </span><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span></span><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><span class="xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>购买商品<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><span class="xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>数量<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><span class="xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>价格<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><span class="xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><span class="xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span></span><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span></span><span class="xml">                    <span class="hljs-comment">&lt;!-- [0,&#123;na...&#125;] --&gt;</span></span><span class="xml">                        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">v-for</span> = <span class="hljs-string">&quot;i of shopArr.entries()&quot;</span>&gt;</span></span><span class="xml">                            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">v-text</span>= <span class="hljs-string">&quot;i[1].name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><span class="xml">                            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span> = <span class="hljs-string">&quot;readnum(i[0])&quot;</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-text</span>= <span class="hljs-string">&quot;i[1].count&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span> = <span class="hljs-string">&quot;addnum(i[0])&quot;</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><span class="xml">                           <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">v-text</span>= <span class="hljs-string">&quot;i[1].count*i[1].price&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><span class="xml">                        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><span class="xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span></span><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>总价格：<span class="hljs-tag">&lt;<span class="hljs-name">strong</span> <span class="hljs-attr">v-text</span> = <span class="hljs-string">&quot;zzj&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><span class="xml">    var vm = new Vue(&#123;</span><span class="xml">        el:&quot;#app&quot;,</span><span class="xml">        data:&#123;</span><span class="xml">            //购买</span><span class="xml">            arr:[&#123;name:&quot;白菜&quot;,price:10&#125;,&#123;name:&quot;芹菜&quot;,price:20&#125;,&#123;name:&quot;香菜&quot;,price:30&#125;],</span><span class="xml">            //购物车</span><span class="xml">            shopArr:[],</span><span class="xml">            //总计</span><span class="xml">            zzj:0,</span><span class="xml">        &#125;,</span><span class="xml">        methods:&#123;</span><span class="xml">             add(i)&#123;</span><span class="xml">                 //计数</span><span class="xml">                let num = 0;</span><span class="xml">                for(var j = 0;j<span class="hljs-tag">&lt;<span class="hljs-name">this.shopArr.length;j++)&#123;</span></span></span><span class="xml">                    if(this.shopArr[j].name == this.arr[i].name)&#123;</span><span class="xml">                        num++;</span><span class="xml">                        this.shopArr[j].count++;</span><span class="xml">                    &#125;</span><span class="xml">                &#125;</span><span class="xml">                if(num == 0)&#123;</span><span class="xml">                    this.arr[i].count = 1;</span><span class="xml">                    this.shopArr.push(this.arr[i]);</span><span class="xml">                &#125; </span><span class="xml">                this.zj()</span><span class="xml">            &#125;,</span><span class="xml">            zj()&#123;</span><span class="xml">                var shopNum = 0;</span><span class="xml">                for(var j = 0;j<span class="hljs-tag">&lt;<span class="hljs-name">this.shopArr.length;j++)&#123;</span></span></span><span class="xml">                    shopNum += this.shopArr[j].count * this.shopArr[j].price</span><span class="xml">                &#125;</span><span class="xml">                this.zzj = shopNum;</span><span class="xml">            &#125;,</span><span class="xml">            addnum(i)&#123;</span><span class="xml">                this.shopArr[i].count++;</span><span class="xml">                this.zj()</span><span class="xml">            &#125;,</span><span class="xml">            readnum(i)&#123;</span><span class="xml">                this.shopArr[i].count--;</span><span class="xml">                if(this.shopArr[i].count == 0)&#123;</span><span class="xml">                    this.shopArr.splice(i,1)</span><span class="xml">                &#125;</span><span class="xml">                this.zj()</span><span class="xml">            &#125;</span><span class="xml">        &#125;</span><span class="xml">    &#125;)</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></code></pre><h2 id="vue03"><a href="#vue03" class="headerlink" title="vue03"></a>vue03</h2><h3 id="初识组件儿"><a href="#初识组件儿" class="headerlink" title="初识组件儿"></a>初识组件儿</h3><pre><code class="hljs applescript">Vue.component(<span class="hljs-string">&quot;mycom&quot;</span>,&#123;​        template:`            &lt;<span class="hljs-keyword">div</span>&gt;我是一个组件&lt;/<span class="hljs-keyword">div</span>&gt;​            &#123;&#123;<span class="hljs-built_in">name</span>&#125;&#125;​        `,​        data()&#123;​           <span class="hljs-literal">return</span> &#123;​               <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;哇哈哈&quot;</span>​           &#125; ​        &#125;​    &#125;)</code></pre><h3 id="局部组件儿"><a href="#局部组件儿" class="headerlink" title="局部组件儿"></a>局部组件儿</h3><pre><code class="hljs dts">var mycom=&#123;<span class="hljs-symbol">template:</span>`    <span class="hljs-params">&lt;div&gt;</span>我是一个组件<span class="hljs-params">&lt;/div&gt;</span> &#125;<span class="hljs-symbol"> el:</span><span class="hljs-string">&quot;#app&quot;</span>,<span class="hljs-symbol"> data:</span>&#123;&#125;, <span class="hljs-comment">//局部组件</span><span class="hljs-symbol"> components:</span>&#123; mycom &#125;</code></pre><h3 id="template"><a href="#template" class="headerlink" title="template"></a>template</h3><pre><code class="hljs vim">var <span class="hljs-keyword">vm</span>=<span class="hljs-keyword">new</span> Vue(&#123;​        <span class="hljs-keyword">e</span><span class="hljs-variable">l:</span><span class="hljs-string">&quot;#app&quot;</span>,​        template:`<span class="hljs-symbol">&lt;div&gt;</span>我是模版字符串&lt;/div&gt;`,​        dat<span class="hljs-variable">a:</span>&#123;​            ms<span class="hljs-variable">g:</span><span class="hljs-string">&quot;hello world&quot;</span>​        &#125;​    &#125;)</code></pre><h3 id="全局组件儿分离"><a href="#全局组件儿分离" class="headerlink" title="全局组件儿分离"></a>全局组件儿分离</h3><pre><code class="hljs dust"><span class="xml">Vue.component(&quot;mycom&quot;,</span><span class="hljs-template-variable">&#123;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​        template:&quot;#show&quot;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​    &#125;</span><span class="xml">)</span><span class="xml">​    var vm=new Vue(</span><span class="hljs-template-variable">&#123;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​        el:&quot;#app&quot;,</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​        data:&#123;&#125;</span><span class="xml">​    &#125;)</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">mycom</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mycom</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"><span class="hljs-comment">&lt;!-- 这里注意:type属性不是script 变成了template --&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/template&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>哇哈哈<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><span class="xml">获取全局组件的view层写法</span><span class="xml">注意事项:</span><span class="xml">全局组件:template:#show==&gt;dom层放在了body中</span><span class="xml">script标签，一定要有id属性，跟你全局中定义的是一样的</span><span class="xml">你所有的dom必须包裹在class为show的div中，不然会报错</span></code></pre><h3 id="局部组件儿分离"><a href="#局部组件儿分离" class="headerlink" title="局部组件儿分离"></a>局部组件儿分离</h3><pre><code class="hljs dust"><span class="xml"> var mycom=</span><span class="hljs-template-variable">&#123;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​        template:&quot;#show&quot;,</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​        data()&#123;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​            return &#123;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​                msg:&quot;hello world&quot;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​            &#125;</span><span class="xml">​        &#125;</span><span class="xml">​    &#125;</span><span class="xml">​    var vm=new Vue(</span><span class="hljs-template-variable">&#123;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​        el:&#x27;#app&#x27;,</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​        data:&#123;&#125;</span><span class="xml">,</span><span class="xml">​        components:</span><span class="hljs-template-variable">&#123;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​            mycom</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​        &#125;</span><span class="xml">​    &#125;)</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">mycom</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mycom</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"><span class="hljs-comment">&lt;!-- 局部组件的视图层view --&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>哇哈哈<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span></code></pre><h3 id="动态绑定组件"><a href="#动态绑定组件" class="headerlink" title="动态绑定组件:"></a>动态绑定组件:</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,i) in arrBtns&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;fn(i)&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123;active:n===i&#125;&quot;</span>&gt;</span>                    &#123;&#123;item&#125;&#125;                <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;component&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;myCom&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre><pre><code class="hljs js"><span class="hljs-keyword">var</span> Kky1=&#123;                data()&#123;                    <span class="hljs-keyword">return</span> &#123;                        str1:<span class="hljs-string">&quot;这是甲的故事&quot;</span>                    &#125;                &#125;,                template:<span class="hljs-string">`</span><span class="hljs-string">                    &lt;div class=&quot;kky1&quot;&gt;</span><span class="hljs-string">                        甲组件&lt;br /&gt;</span><span class="hljs-string">                        &lt;input type=&quot;text&quot; v-model=&quot;str1&quot; /&gt;</span><span class="hljs-string">                        &lt;br /&gt;</span><span class="hljs-string">                        str1===&gt;&#123;&#123;str1&#125;&#125;</span><span class="hljs-string">                    &lt;/div&gt;</span><span class="hljs-string">                `</span>            &#125;            <span class="hljs-keyword">var</span> Kky2=&#123;                data()&#123;                    <span class="hljs-keyword">return</span> &#123;                        str2:<span class="hljs-string">&quot;这是乙的故事&quot;</span>                    &#125;                &#125;,                template:<span class="hljs-string">`</span><span class="hljs-string">                    &lt;div class=&quot;kky2&quot;&gt;</span><span class="hljs-string">                        乙组件&lt;br /&gt;</span><span class="hljs-string">                        &lt;input type=&quot;text&quot; v-model=&quot;str2&quot; /&gt;</span><span class="hljs-string">                        &lt;br /&gt;</span><span class="hljs-string">                        str2===&gt;&#123;&#123;str2&#125;&#125;</span><span class="hljs-string">                    &lt;/div&gt;</span><span class="hljs-string">                `</span>            &#125;            <span class="hljs-keyword">var</span> Kky3=&#123;                data()&#123;                    <span class="hljs-keyword">return</span> &#123;                        str3:<span class="hljs-string">&quot;这是丙的故事&quot;</span>                    &#125;                &#125;,                template:<span class="hljs-string">`</span><span class="hljs-string">                    &lt;div class=&quot;kky3&quot;&gt;</span><span class="hljs-string">                        丙组件&lt;br /&gt;</span><span class="hljs-string">                        &lt;input type=&quot;text&quot; v-model=&quot;str3&quot; /&gt;</span><span class="hljs-string">                        &lt;br /&gt;</span><span class="hljs-string">                        str3==&gt;&#123;&#123;str3&#125;&#125;</span><span class="hljs-string">                    &lt;/div&gt;</span><span class="hljs-string">                `</span>            &#125;            <span class="hljs-keyword">var</span> Kky4=&#123;                data()&#123;                    <span class="hljs-keyword">return</span> &#123;                        str4:<span class="hljs-string">&quot;这是丁的故事&quot;</span>                    &#125;                &#125;,                template:<span class="hljs-string">`</span><span class="hljs-string">                    &lt;div class=&quot;kky4&quot;&gt;</span><span class="hljs-string">                        丁组件&lt;br /&gt;</span><span class="hljs-string">                        &lt;input type=&quot;text&quot; v-model=&quot;str4&quot; /&gt;</span><span class="hljs-string">                        &lt;br /&gt;</span><span class="hljs-string">                        str4===&gt;&#123;&#123;str4&#125;&#125;</span><span class="hljs-string">                    &lt;/div&gt;</span><span class="hljs-string">                `</span>            &#125;            <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> Vue(&#123;                el:<span class="hljs-string">&quot;#app&quot;</span>,                data:&#123;                    arrBtns:[<span class="hljs-string">&quot;甲&quot;</span>,<span class="hljs-string">&quot;乙&quot;</span>,<span class="hljs-string">&quot;丙&quot;</span>,<span class="hljs-string">&quot;丁&quot;</span>],                    comArr:[<span class="hljs-string">&quot;Kky1&quot;</span>,<span class="hljs-string">&quot;Kky2&quot;</span>,<span class="hljs-string">&quot;Kky3&quot;</span>,<span class="hljs-string">&quot;Kky4&quot;</span>],                    n:<span class="hljs-number">0</span>,                    myCom:<span class="hljs-string">&quot;Kky1&quot;</span>                &#125;,                methods:&#123;                    fn(i)&#123;                        <span class="hljs-built_in">this</span>.n=i;                        <span class="hljs-built_in">this</span>.myCom=<span class="hljs-built_in">this</span>.comArr[i];                    &#125;                &#125;,                components:&#123;                    Kky1,                    Kky2,                    Kky3,                    Kky4                &#125;,            &#125;)</code></pre><h3 id="内置的组件"><a href="#内置的组件" class="headerlink" title="内置的组件:"></a>内置的组件:</h3><h3 id="缓存组件-keep-alive"><a href="#缓存组件-keep-alive" class="headerlink" title="缓存组件:keep-alive"></a>缓存组件:keep-alive</h3><p>keep-alive包含的会缓存输入的数据,</p><p>没有包含的不会缓存,</p><p>include=”ak,ck”,是指ak和ck会缓存,而其他的不会缓存,</p><p>exclude=”bk,dk”,代表着取反的意思.</p><p>两个生命周期:在使用过keep-alive之后才生效:</p><p>activated()该组件被激活时生效,</p><p>deactivated()该组件被移除是生效</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;component myBorder&quot;</span>&gt;</span>    无keep-alive缓存<span class="hljs-tag">&lt;<span class="hljs-name">br</span>  /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;myCom&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;component myBorder&quot;</span>&gt;</span>    keep-alive缓存<span class="hljs-tag">&lt;<span class="hljs-name">br</span>  /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;myCom&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;component myBorder&quot;</span>&gt;</span>    通过include  指定缓存组件 <span class="hljs-tag">&lt;<span class="hljs-name">br</span>  /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span> <span class="hljs-attr">include</span>=<span class="hljs-string">&quot;ak,ck&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;myCom&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;component myBorder&quot;</span>&gt;</span>    通过exclude  指定不缓存 组件<span class="hljs-tag">&lt;<span class="hljs-name">br</span>  /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span> <span class="hljs-attr">exclude</span>=<span class="hljs-string">&quot;bk,dk&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;myCom&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre><pre><code class="hljs js"><span class="hljs-keyword">var</span> Kky1=&#123;                name:<span class="hljs-string">&quot;ak&quot;</span>,                data()&#123;                    <span class="hljs-keyword">return</span> &#123;                        str1:<span class="hljs-string">&quot;这是甲的故事&quot;</span>                    &#125;                &#125;,                template:<span class="hljs-string">`</span><span class="hljs-string">                    &lt;div class=&quot;kky1&quot;&gt;</span><span class="hljs-string">                        甲组件&lt;br /&gt;</span><span class="hljs-string">                        &lt;input type=&quot;text&quot; v-model=&quot;str1&quot; /&gt;</span><span class="hljs-string">                        &lt;br /&gt;</span><span class="hljs-string">                        str1===&gt;&#123;&#123;str1&#125;&#125;</span><span class="hljs-string">                    &lt;/div&gt;</span><span class="hljs-string">                `</span>,                activated()&#123;                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;kky1 该组件被激活&quot;</span>);                &#125;,                deactivated()&#123;                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;kky1 该组件被移除&quot;</span>);                &#125;            &#125;            <span class="hljs-keyword">var</span> Kky2=&#123;                name:<span class="hljs-string">&quot;bk&quot;</span>,                data()&#123;                    <span class="hljs-keyword">return</span> &#123;                        str2:<span class="hljs-string">&quot;这是乙的故事&quot;</span>                    &#125;                &#125;,                template:<span class="hljs-string">`</span><span class="hljs-string">                    &lt;div class=&quot;kky2&quot;&gt;</span><span class="hljs-string">                        乙组件&lt;br /&gt;</span><span class="hljs-string">                        &lt;input type=&quot;text&quot; v-model=&quot;str2&quot; /&gt;</span><span class="hljs-string">                        &lt;br /&gt;</span><span class="hljs-string">                        str2===&gt;&#123;&#123;str2&#125;&#125;</span><span class="hljs-string">                    &lt;/div&gt;</span><span class="hljs-string">                `</span>,                activated()&#123;                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;kky2 该组件被激活&quot;</span>);                &#125;,                deactivated()&#123;                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;kky2 该组件被移除&quot;</span>);                &#125;            &#125;            <span class="hljs-keyword">var</span> Kky3=&#123;                name:<span class="hljs-string">&quot;ck&quot;</span>,                data()&#123;                    <span class="hljs-keyword">return</span> &#123;                        str3:<span class="hljs-string">&quot;这是丙的故事&quot;</span>                    &#125;                &#125;,                template:<span class="hljs-string">`</span><span class="hljs-string">                    &lt;div class=&quot;kky3&quot;&gt;</span><span class="hljs-string">                        丙组件&lt;br /&gt;</span><span class="hljs-string">                        &lt;input type=&quot;text&quot; v-model=&quot;str3&quot; /&gt;</span><span class="hljs-string">                        &lt;br /&gt;</span><span class="hljs-string">                        str3==&gt;&#123;&#123;str3&#125;&#125;</span><span class="hljs-string">                    &lt;/div&gt;</span><span class="hljs-string">                `</span>,                activated()&#123;                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;kky3 该组件被激活&quot;</span>);                &#125;,                deactivated()&#123;                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;kky3 该组件被移除&quot;</span>);                &#125;            &#125;            <span class="hljs-keyword">var</span> Kky4=&#123;                name:<span class="hljs-string">&quot;dk&quot;</span>,                data()&#123;                    <span class="hljs-keyword">return</span> &#123;                        str4:<span class="hljs-string">&quot;这是丁的故事&quot;</span>                    &#125;                &#125;,                template:<span class="hljs-string">`</span><span class="hljs-string">                    &lt;div class=&quot;kky4&quot;&gt;</span><span class="hljs-string">                        丁组件&lt;br /&gt;</span><span class="hljs-string">                        &lt;input type=&quot;text&quot; v-model=&quot;str4&quot; /&gt;</span><span class="hljs-string">                        &lt;br /&gt;</span><span class="hljs-string">                        str4===&gt;&#123;&#123;str4&#125;&#125;</span><span class="hljs-string">                    &lt;/div&gt;</span><span class="hljs-string">                `</span>,                activated()&#123;                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;kky4 该组件被激活&quot;</span>);                &#125;,                deactivated()&#123;                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;kky4 该组件被移除&quot;</span>);                &#125;            &#125;            <span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> Vue(&#123;                el:<span class="hljs-string">&quot;#app&quot;</span>,                data:&#123;                    arrBtns:[<span class="hljs-string">&quot;甲&quot;</span>,<span class="hljs-string">&quot;乙&quot;</span>,<span class="hljs-string">&quot;丙&quot;</span>,<span class="hljs-string">&quot;丁&quot;</span>],                    comArr:[<span class="hljs-string">&quot;Kky1&quot;</span>,<span class="hljs-string">&quot;Kky2&quot;</span>,<span class="hljs-string">&quot;Kky3&quot;</span>,<span class="hljs-string">&quot;Kky4&quot;</span>],                    n:<span class="hljs-number">0</span>,                    myCom:<span class="hljs-string">&quot;Kky1&quot;</span>                &#125;,                methods:&#123;                    fn(i)&#123;                        <span class="hljs-built_in">this</span>.n=i;                        <span class="hljs-built_in">this</span>.myCom=<span class="hljs-built_in">this</span>.comArr[i];                    &#125;                &#125;,                components:&#123;                    Kky1,                    Kky2,                    Kky3,                    Kky4                &#125;,                computed:&#123;                &#125;,            &#125;);</code></pre><h3 id="组件儿传值"><a href="#组件儿传值" class="headerlink" title="组件儿传值"></a>组件儿传值</h3><pre><code class="hljs handlebars"><span class="xml">Vue.component(&quot;mycom&quot;,&#123;</span><span class="xml">​        template:&#x27;#show&#x27;,</span><span class="xml">​        data()&#123;</span><span class="xml">​            return &#123;</span><span class="xml">​                msg1:&quot;world&quot;</span><span class="xml">​            &#125;</span><span class="xml">​        &#125;,</span><span class="xml">​        props:[&quot;abc&quot;]</span><span class="xml">​    &#125;)</span><span class="xml">​    //父传子</span><span class="xml">​    //组件之间的传值 通讯  数据的传递</span><span class="xml">​    var vm=new Vue(&#123;</span><span class="xml">​        el:&quot;#app&quot;,</span><span class="xml">​        data:&#123;</span><span class="xml">​            msg0:&quot;hello&quot;</span><span class="xml">​        &#125;</span><span class="xml">​    &#125;)</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">mycom</span> <span class="hljs-attr">v-bind:abc</span>=<span class="hljs-string">&quot;msg0&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mycom</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"><span class="hljs-comment">&lt;!-- 分离的全局组件 --&gt;</span></span><span class="xml"><span class="hljs-comment">&lt;!-- 子组件的view层 --&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/template&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">abc</span>&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">msg1</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></code></pre><h3 id="父传子案例"><a href="#父传子案例" class="headerlink" title="父传子案例"></a>父传子案例</h3><pre><code class="hljs handlebars"><span class="xml">Vue.component(&quot;mycom&quot;,&#123;</span><span class="xml">​        template:&quot;#show&quot;,</span><span class="xml">​        data()&#123;</span><span class="xml">​            return &#123;</span><span class="xml">​                msg3:&quot;三大&quot;</span><span class="xml">​            &#125;</span><span class="xml">​        &#125;,</span><span class="xml">​        props:[&quot;msg0&quot;,&quot;msg1&quot;]</span><span class="xml">​    &#125;)</span><span class="xml">​    //局部组件</span><span class="xml">​    var mycom1=&#123;</span><span class="xml">​        template:&quot;#entire&quot;,</span><span class="xml">​        data()&#123;</span><span class="xml">​            return &#123;</span><span class="xml">​                msg4:&quot;吃饭&quot;,</span><span class="xml">​                msg5:&quot;睡觉&quot;</span><span class="xml">​            &#125;</span><span class="xml">​        &#125;,</span><span class="xml">​        props:[&quot;msg2&quot;]</span><span class="xml">​    &#125;</span><span class="xml">​    var vm=new Vue(&#123;</span><span class="xml">​        el:&quot;#app&quot;,</span><span class="xml">​        data:&#123;</span><span class="xml">​            msg0:&quot;车萍&quot;,</span><span class="xml">​            msg1:&quot;爱好&quot;,</span><span class="xml">​            msg2:&quot;打豆豆&quot;</span><span class="xml">​        &#125;,</span><span class="xml">​        components:&#123;</span><span class="xml">​            mycom1</span><span class="xml">​        &#125;</span><span class="xml">​    &#125;)</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">mycom</span> <span class="hljs-attr">:msg0</span>=<span class="hljs-string">&quot;msg0&quot;</span> <span class="hljs-attr">:msg1</span>=<span class="hljs-string">&quot;msg1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mycom</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">mycom1</span> <span class="hljs-attr">:msg2</span>=<span class="hljs-string">&quot;msg2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mycom1</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"><span class="hljs-comment">&lt;!-- 全局视图 --&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/template&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">msg0</span>&#125;&#125;</span><span class="xml"> </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">msg3</span>&#125;&#125;</span><span class="xml"> </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">msg1</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><span class="xml"><span class="hljs-comment">&lt;!-- 局部试图 --&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;entire&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;entire&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">msg4</span>&#125;&#125;</span><span class="xml"> </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">msg5</span>&#125;&#125;</span><span class="xml"> </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">msg2</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span></code></pre><h3 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h3><pre><code class="hljs handlebars"><span class="xml">var mycom=&#123;</span><span class="xml">​        template:&quot;#show&quot;,</span><span class="xml">​        data()&#123;</span><span class="xml">​            return &#123;</span><span class="xml">​                cf:&quot;吃饭&quot;,</span><span class="xml">​                sj:&quot;睡觉&quot;</span><span class="xml">​                //子组件中的数据</span><span class="xml">​            &#125;</span><span class="xml">​        &#125;,</span><span class="xml">​        //追加一个业务，用于传值</span><span class="xml">​        methods:&#123;</span><span class="xml">​            add(cf,sj)&#123;</span><span class="xml">​                //第一个参数 自定义的方法业务myevent 你要往父组件中传的值</span><span class="xml">​                this.$emit(&quot;myevent&quot;,cf,sj)//如果多个值，需要逗号隔开</span><span class="xml">​            &#125;</span><span class="xml">​        &#125;</span><span class="xml">​    &#125;</span><span class="xml">​    //全局组件</span><span class="xml">​    Vue.component(&quot;mycom1&quot;,&#123;</span><span class="xml">​        template:&quot;#qj&quot;,</span><span class="xml">​        data()&#123;</span><span class="xml">​            return &#123;</span><span class="xml">​                sd:&quot;三大&quot;</span><span class="xml">​            &#125;</span><span class="xml">​        &#125;,</span><span class="xml">​        methods:&#123;</span><span class="xml">​            fs(sd)&#123;</span><span class="xml">​                //自定义方法  发送三大</span><span class="xml">​                this.$emit(&quot;fssd&quot;,sd)</span><span class="xml">​            &#125;</span><span class="xml">​        &#125;</span><span class="xml">​    &#125;)</span><span class="xml">​    //定义vue实例</span><span class="xml">​    var vm=new Vue(&#123;</span><span class="xml">​        el:&quot;#app&quot;,</span><span class="xml">​        data:&#123;</span><span class="xml">​            cf:&quot;&quot;,</span><span class="xml">​            sj:&quot;&quot;,</span><span class="xml">​            cp:&quot;车萍&quot;,</span><span class="xml">​            ah:&quot;爱好&quot;,</span><span class="xml">​            dd:&quot;打豆豆&quot;,</span><span class="xml">​            sd:&quot;&quot;</span><span class="xml">​        &#125;,</span><span class="xml">​        components:&#123;</span><span class="xml">​            mycom</span><span class="xml">​        &#125;,</span><span class="xml">​        //子组件中有业务,并且有传值,我们要接收一下</span><span class="xml">​        methods:&#123;</span><span class="xml">​            //接收业务 要把方法和你传过来的值都接收一下</span><span class="xml">​            fn(m,n)&#123;</span><span class="xml">​                this.cf = m;</span><span class="xml">​                this.sj = n;</span><span class="xml">​            &#125;,</span><span class="xml">​            //接收三大</span><span class="xml">​            fnn(s)&#123;</span><span class="xml">​                this.sd = s;</span><span class="xml">​            &#125;</span><span class="xml">​        &#125;</span><span class="xml">​    &#125;)</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">cp</span>&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">sd</span>&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">ah</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">cf</span>&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">sj</span>&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">dd</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">mycom</span> <span class="hljs-attr">v-on:myevent</span>=<span class="hljs-string">&quot;fn&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mycom</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">mycom1</span> <span class="hljs-attr">v-on:fssd</span>=<span class="hljs-string">&quot;fnn&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mycom1</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>   </span><span class="xml"><span class="hljs-comment">&lt;!-- 局部试图层 --&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-comment">&lt;!-- 调用方法 --&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">add</span>(<span class="hljs-name">cf</span>,sj)&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span> </span><span class="xml"><span class="hljs-comment">&lt;!-- 全局视图层 --&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/template&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;qj&quot;</span> &gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;qj&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">fs</span>(<span class="hljs-name">sd</span>)&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></code></pre><h2 id="vue04"><a href="#vue04" class="headerlink" title="vue04"></a>vue04</h2><h3 id="基础路由"><a href="#基础路由" class="headerlink" title="基础路由"></a>基础路由</h3><pre><code class="hljs javascript"><span class="hljs-comment">// 定义我们的路由组件</span>​    <span class="hljs-keyword">var</span> movie=&#123;​        template:<span class="hljs-string">&quot;&lt;div&gt;我是电影界面&lt;/div&gt;&quot;</span>​    &#125;​    <span class="hljs-keyword">var</span> music=&#123;​        template:<span class="hljs-string">&quot;&lt;div&gt;我是音乐界面&lt;/div&gt;&quot;</span>​    &#125;​    <span class="hljs-comment">//定义路由，每个路由映射响应的组件</span>​    <span class="hljs-keyword">var</span> routes=[​        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&quot;/movie&quot;</span>,<span class="hljs-attr">component</span>:movie&#125;,​        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&quot;/music&quot;</span>,<span class="hljs-attr">component</span>:music&#125;​        ​    ]​    <span class="hljs-comment">//创建路由实例，然后传入我们的routes配置</span>​    <span class="hljs-keyword">var</span> router=<span class="hljs-keyword">new</span> VueRouter(&#123;​        <span class="hljs-comment">// routes:routes</span>​        routes​    &#125;)​    <span class="hljs-comment">//创建挂载 根实例</span>​    <span class="hljs-keyword">var</span> vm=<span class="hljs-keyword">new</span> Vue(&#123;​        el:<span class="hljs-string">&quot;#app&quot;</span>,​        data:&#123;&#125;,​        router​    &#125;)&lt;!-- 第一步 --&gt;&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;&lt;!-- 使用router-link来导航 --&gt;&lt;!-- <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span> --&gt;&lt;!-- 面试路由第一个问题原理 --&gt;&lt;router-link to=<span class="hljs-string">&quot;/movie&quot;</span>&gt;电影&lt;/router-link&gt;&lt;router-link to=<span class="hljs-string">&quot;/music&quot;</span>&gt;音乐&lt;/router-link&gt;&lt;!-- 进来第二步,设置路由出口 --&gt;&lt;!-- 讲我们路由匹配的组件渲染到页面中 --&gt;&lt;router-view&gt;&lt;/router-view&gt;&lt;/div&gt;</code></pre><h3 id="配合组件儿写路由"><a href="#配合组件儿写路由" class="headerlink" title="配合组件儿写路由"></a>配合组件儿写路由</h3><pre><code class="hljs dust"><span class="xml">// 定义你的组件  vue特点 组件化开发</span><span class="xml">​    var home=</span><span class="hljs-template-variable">&#123;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​        template:&quot;#home&quot;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​    &#125;</span><span class="xml">​    var movie=</span><span class="hljs-template-variable">&#123;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​        template:&quot;#movie&quot;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​    &#125;</span><span class="xml">​    var music=</span><span class="hljs-template-variable">&#123;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​        template:&quot;#music&quot;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​    &#125;</span><span class="xml">​    var we=</span><span class="hljs-template-variable">&#123;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​        template:&quot;#we&quot;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​    &#125;</span><span class="xml">​    //定义路由</span><span class="xml">​    var routes=[</span><span class="xml">​        </span><span class="hljs-template-variable">&#123;path:&quot;/home&quot;,component:home&#125;</span><span class="xml">,</span><span class="xml">​        </span><span class="hljs-template-variable">&#123;path:&quot;/movie&quot;,component:movie&#125;</span><span class="xml">,</span><span class="xml">​        </span><span class="hljs-template-variable">&#123;path:&quot;/music&quot;,component:music&#125;</span><span class="xml">,</span><span class="xml">​        </span><span class="hljs-template-variable">&#123;path:&quot;/we&quot;,component:we&#125;</span><span class="xml">,</span><span class="xml">​        </span><span class="hljs-template-variable">&#123;path:&quot;*&quot;,redirect:&quot;/home&quot;&#125;</span><span class="xml">//设置路由初始界面</span><span class="xml">​    ]</span><span class="xml">​    //实例话你的路由</span><span class="xml">​    var router=new VueRouter(</span><span class="hljs-template-variable">&#123;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​        routes</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​    &#125;</span><span class="xml">)</span><span class="xml">​    //挂载在根实例上</span><span class="xml">​    var vm=new Vue(</span><span class="hljs-template-variable">&#123;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​        el:&quot;#app&quot;,</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​        data:&#123;&#125;</span><span class="xml">,</span><span class="xml">​        router</span><span class="xml">​    &#125;)</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-comment">&lt;!--   to关键字跳转 --&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/movie&quot;</span>&gt;</span>电影<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/music&quot;</span>&gt;</span>音乐<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/we&quot;</span>&gt;</span>我们<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><span class="xml"><span class="hljs-comment">&lt;!-- router-view 渲染页面 --&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span> </span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"><span class="hljs-comment">&lt;!-- 局部组件我们怎么获取 --&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;home&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;home&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是home页面<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span> </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;movie&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;movie&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是movie页面<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;music&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;music&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是music页面<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;we&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;we&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是we页面<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span></code></pre><h3 id="二级路由"><a href="#二级路由" class="headerlink" title="二级路由"></a>二级路由</h3><pre><code class="hljs javascript"><span class="hljs-comment">// 定义组件</span>​    <span class="hljs-keyword">var</span> home=&#123;​        template:<span class="hljs-string">&quot;#home&quot;</span>​    &#125;​    <span class="hljs-keyword">var</span> movie=&#123;​        template:<span class="hljs-string">&quot;#movie&quot;</span>​    &#125;​    <span class="hljs-keyword">var</span> music=&#123;​        template:<span class="hljs-string">&quot;#music&quot;</span>​    &#125;​    <span class="hljs-keyword">var</span> we=&#123;​        template:<span class="hljs-string">&quot;#we&quot;</span>​    &#125;​    <span class="hljs-comment">// 写两个子组件</span>​    <span class="hljs-keyword">var</span> classic=&#123;​        template:<span class="hljs-string">&quot;#classic&quot;</span>​    &#125;​    <span class="hljs-keyword">var</span> popular=&#123;​        template:<span class="hljs-string">&quot;#popular&quot;</span>​    &#125;​    <span class="hljs-comment">//设置路由</span>​    <span class="hljs-keyword">var</span> routes=[​        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&quot;/home&quot;</span>,<span class="hljs-attr">component</span>:home&#125;,​        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&quot;/movie&quot;</span>,<span class="hljs-attr">component</span>:movie&#125;,​        &#123;​            path:<span class="hljs-string">&quot;/music&quot;</span>,<span class="hljs-attr">component</span>:music,​            <span class="hljs-comment">//设置二级路由</span>​            children:[​                &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&quot;/classic&quot;</span>,<span class="hljs-attr">component</span>:classic&#125;,​                &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&quot;/popular&quot;</span>,<span class="hljs-attr">component</span>:popular&#125;,​                &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&quot;*&quot;</span>,<span class="hljs-attr">redirect</span>:<span class="hljs-string">&quot;/music&quot;</span>&#125;​            ]​        &#125;,​        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&quot;/we&quot;</span>,<span class="hljs-attr">component</span>:we&#125;,​        <span class="hljs-comment">//redirect 重定向 ／home  fn to -from watch</span>​        <span class="hljs-comment">//设置页面初始化路由</span>​        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&quot;*&quot;</span>,<span class="hljs-attr">redirect</span>:<span class="hljs-string">&quot;/home&quot;</span>&#125;​    ]​    <span class="hljs-keyword">var</span> router=<span class="hljs-keyword">new</span> VueRouter(&#123;​        routes​    &#125;)​    <span class="hljs-keyword">var</span> vm=<span class="hljs-keyword">new</span> Vue(&#123;​        el:<span class="hljs-string">&quot;#app&quot;</span>,​        data:&#123;&#125;,​        router​    &#125;)&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;&lt;router-link to=<span class="hljs-string">&quot;/home&quot;</span>&gt;首页&lt;/router-link&gt;&lt;router-link to=<span class="hljs-string">&quot;/movie&quot;</span>&gt;电影&lt;/router-link&gt;&lt;router-link to=<span class="hljs-string">&quot;/music&quot;</span>&gt;音乐&lt;/router-link&gt;&lt;router-link to=<span class="hljs-string">&quot;/we&quot;</span>&gt;关于我们&lt;/router-link&gt;&lt;router-view&gt;&lt;/router-view&gt;&lt;/div&gt;&lt;!-- 设置组件的内容 --&gt;&lt;template id=<span class="hljs-string">&quot;home&quot;</span>&gt;&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;home&quot;</span>&gt;home页面&lt;/div&gt;&lt;/template&gt;&lt;template id=<span class="hljs-string">&quot;movie&quot;</span>&gt;&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;movie&quot;</span>&gt;movie页面&lt;/div&gt;&lt;/template&gt;&lt;template id=<span class="hljs-string">&quot;music&quot;</span>&gt;&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;music&quot;</span>&gt;music页面&lt;router-link to=<span class="hljs-string">&quot;/classic&quot;</span>&gt;古典&lt;/router-link&gt;&lt;router-link to=<span class="hljs-string">&quot;/popular&quot;</span>&gt;流行&lt;/router-link&gt;&lt;router-view&gt;&lt;/router-view&gt;&lt;/div&gt;&lt;/template&gt;&lt;template id=<span class="hljs-string">&quot;we&quot;</span>&gt;&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;we&quot;</span>&gt;关于我们页面&lt;/div&gt;&lt;/template&gt;&lt;template id=<span class="hljs-string">&quot;classic&quot;</span>&gt;&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;classic&quot;</span>&gt;古典&lt;/div&gt;&lt;/template&gt;&lt;template id=<span class="hljs-string">&quot;popular&quot;</span>&gt;&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;popular&quot;</span>&gt;流行&lt;/div&gt;&lt;/template&gt;</code></pre><h3 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h3><pre><code class="hljs xquery"> // <span class="hljs-string">&quot;/&quot;</span>  为了方便下午的传值 带入我们命名路由的知识点​    var movie=&#123;​        template:<span class="hljs-string">&quot;#movie&quot;</span>​    &#125;​    var music=&#123;​        template:<span class="hljs-string">&quot;#music&quot;</span>​    &#125;​    var routes=[​        <span class="hljs-built_in">&#123;path</span>:<span class="hljs-string">&quot;/movie&quot;</span>,component:movie&#125;,​        <span class="hljs-built_in">&#123;path</span>:<span class="hljs-string">&quot;/music&quot;</span><span class="hljs-built_in">,name</span>:<span class="hljs-string">&quot;music&quot;</span>,component:music&#125;,​    ]​    var router=new VueRouter(&#123;​        routes​    &#125;)​    var vm=new Vue(&#123;​        el:<span class="hljs-string">&quot;#app&quot;</span>,​        data:&#123;&#125;,​        router​    &#125;)<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-comment">&lt;!-- 普通路由的写法 --&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/movie&quot;</span>&gt;</span>电影<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><span class="xml"><span class="hljs-comment">&lt;!-- 命名路由的方法 --&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123;name:&#x27;music&#x27;&#125;&quot;</span>&gt;</span>音乐<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><span class="xml"><span class="hljs-comment">&lt;!-- 渲染 --&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;movie&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;movie&quot;</span>&gt;</span></span><span class="xml">大人物</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;music&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;music&quot;</span>&gt;</span></span><span class="xml">清风</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span></code></pre><h3 id="模拟美团"><a href="#模拟美团" class="headerlink" title="模拟美团"></a>模拟美团</h3><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span></span><span class="xml">​    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;vue-router.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><span class="xml">​       <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><span class="xml">​    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml">​    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;search&quot;</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><span class="xml">​            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;search&quot;</span>&gt;</span></span><span class="xml">​            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><span class="xml">​                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in searchData&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span></span><span class="xml">​                    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;value in item.city&quot;</span>&gt;</span></span><span class="xml">​                        </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">value</span>&#125;&#125;</span><span class="xml">​                    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><span class="xml">​                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="xml">​            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><span class="xml">​        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml">​    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><span class="xml">​    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span> </span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><span class="xml">​            <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/search&quot;</span>&gt;</span></span><span class="xml">​                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;search&quot;</span>&gt;</span></span><span class="xml">​            <span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><span class="xml">​            <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/shan&quot;</span>&gt;</span>山东<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><span class="xml">​            <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/henan&quot;</span>&gt;</span>河南<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><span class="xml">​            <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><span class="xml">​        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml">​    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><span class="xml">​    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;shan&quot;</span> &gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;shan&quot;</span>&gt;</span></span><span class="xml">​            山东</span><span class="xml">​        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml">​    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><span class="xml">​    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;henan&quot;</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;henan&quot;</span>&gt;</span></span><span class="xml">​            河南</span><span class="xml">​        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml">​    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><span class="xml">​    //两个组件</span><span class="xml">​    let shandong=&#123;</span><span class="xml">​        template:&quot;#shan&quot;,</span><span class="xml">​        data()&#123;</span><span class="xml">​            return &#123;</span><span class="xml">​                bol:false</span><span class="xml">​            &#125;</span><span class="xml">​        &#125;</span><span class="xml">​    &#125;</span><span class="xml">​    let henan=&#123;</span><span class="xml">​        template:&quot;#henan&quot;</span><span class="xml">​    &#125;</span><span class="xml">​    let index = &#123;</span><span class="xml">​        template:&quot;#index&quot;,</span><span class="xml">​    &#125;</span><span class="xml">​    let search = &#123;</span><span class="xml">​        template:&quot;#search&quot;,</span><span class="xml">​        data()&#123;</span><span class="xml">​            return &#123;</span><span class="xml">​                search:&quot;&quot;,</span><span class="xml">​                cityArr:[&#123;</span><span class="xml">​                    sheng:&quot;山东&quot;,</span><span class="xml">​                    city:[&quot;济南&quot;,&quot;青岛&quot;,&quot;潍坊&quot;]</span><span class="xml">​                &#125;,&#123;</span><span class="xml">​                    sheng:&quot;河南&quot;,</span><span class="xml">​                    city:[&quot;安阳&quot;,&quot;郑州&quot;]</span><span class="xml">​                &#125;]</span><span class="xml">​            &#125;   </span><span class="xml">​        &#125;,</span><span class="xml">​        computed:&#123;</span><span class="xml">​            searchData()&#123;</span><span class="xml">​                if(this.search)&#123;</span><span class="xml">​                    let resultArr = this.cityArr.filter(item=&gt;&#123;</span><span class="xml">​                        console.log(this.search)</span><span class="xml">​                        console.log(item.sheng.indexOf(this.search))</span><span class="xml">​                        if(item.sheng.indexOf(this.search)&gt;=0)&#123;</span><span class="xml">​                            return true;</span><span class="xml">​                        &#125;else&#123;</span><span class="xml">​                            return false;</span><span class="xml">​                        &#125;</span><span class="xml">​                    &#125;)</span><span class="xml">​                    console.log(resultArr)</span><span class="xml">​                    return resultArr</span><span class="xml">​                &#125;else&#123;</span><span class="xml">​                    return [];</span><span class="xml">​                &#125;</span><span class="xml">​                </span><span class="xml">​            &#125;</span><span class="xml">​        &#125;</span><span class="xml">​    &#125;</span><span class="xml">​    let routes=[</span><span class="xml">​        &#123;</span><span class="xml">​            path:&quot;/&quot;,</span><span class="xml">​            component:index,</span><span class="xml">​            children:[&#123;path:&#x27;/shan&#x27;,component:shandong&#125;,</span><span class="xml">​                &#123;path:&#x27;/henan&#x27;,component:henan&#125;]</span><span class="xml">​        &#125;,</span><span class="xml">​        &#123;</span><span class="xml">​            path:&quot;/search&quot;,</span><span class="xml">​            component:search</span><span class="xml">​        &#125;</span><span class="xml">​    ]</span><span class="xml">​    var router=new VueRouter(&#123;</span><span class="xml">​        routes    </span><span class="xml">​    &#125;)</span><span class="xml">​    var vm=new Vue(&#123;</span><span class="xml">​        el:&quot;#app&quot;,</span><span class="xml">​        router</span><span class="xml">​    &#125;)</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></code></pre><h2 id="vue05"><a href="#vue05" class="headerlink" title="vue05"></a>vue05</h2><h3 id="path路由传值"><a href="#path路由传值" class="headerlink" title="path路由传值"></a>path路由传值</h3><pre><code class="hljs handlebars"><span class="xml">// 传值，要传的是变量</span><span class="xml">​    //定义一个组件</span><span class="xml">​    let user=&#123;</span><span class="xml">​        template:&quot;#user&quot;</span><span class="xml">​    &#125;</span><span class="xml">​    //定义一个路由</span><span class="xml">​    let routes=[</span><span class="xml">​        // 在设置路由的时候  要传的值加在／:的后面</span><span class="xml">​        &#123;path:&quot;/user/:userName&quot;,component:user&#125;</span><span class="xml">​    ]</span><span class="xml">​    //new路由</span><span class="xml">​    let router=new VueRouter(&#123;</span><span class="xml">​        routes</span><span class="xml">​    &#125;)</span><span class="xml">​    //挂载实例</span><span class="xml">​    let vm=new Vue(&#123;</span><span class="xml">​        el:&quot;#app&quot;,</span><span class="xml">​        data:&#123;</span><span class="xml">​            obj:&#123;</span><span class="xml">​                userName:&quot;shao&quot;</span><span class="xml">​            &#125;</span><span class="xml">​            </span><span class="xml">​        &#125;,</span><span class="xml">​        router,</span><span class="xml">​        methods:&#123;</span><span class="xml">​            fn()&#123;</span><span class="xml">​                // 跳转页面的存储对象==》locastorage</span><span class="xml">​                console.log(this.$route);</span><span class="xml">​            &#125;</span><span class="xml">​        &#125;</span><span class="xml">​    &#125;)</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-comment">&lt;!-- path路由跳转的时候 命名路由    path+路由名称+传的数据 aa--&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123;path:&#x27;/user/aa&#x27;&#125;&quot;</span>&gt;</span>aa<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123;path:&#x27;/user/bb&#x27;&#125;&quot;</span>&gt;</span>bb<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><span class="xml"><span class="hljs-comment">&lt;!-- 字符串拼接 --&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123;path:&#x27;/user/&#x27;+userName&#125;&quot;</span>&gt;</span>cc<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><span class="xml"><span class="hljs-comment">&lt;!-- 按钮 --&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;fn&quot;</span>&gt;</span>点击进入控制台<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><span class="xml"><span class="hljs-comment">&lt;!-- 渲染 --&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"><span class="hljs-comment">&lt;!-- 组件 --&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-comment">&lt;!-- 我是user界面 --&gt;</span></span><span class="xml"><span class="hljs-comment">&lt;!-- aa --&gt;</span></span><span class="xml"><span class="hljs-comment">&lt;!-- 接收到数据，显示在组件中  localstorage.set    localstorage.get --&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">$route.params.userName</span>&#125;&#125;</span><span class="xml"><span class="hljs-comment">&lt;!-- </span></span><span class="hljs-template-variable">&#123;&#123;&#125;&#125;</span><span class="xml"><span class="hljs-comment"> --&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span></code></pre><h3 id="query传值"><a href="#query传值" class="headerlink" title="query传值"></a>query传值</h3><pre><code class="hljs dust"><span class="xml">let user=</span><span class="hljs-template-variable">&#123;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​        template:&quot;#user&quot;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​    &#125;</span><span class="xml">​    //根据需求画路由，决定多少组件，组件化开发</span><span class="xml">​    let routes=[</span><span class="xml">​        </span><span class="hljs-template-variable">&#123;path:&quot;/user/:userName&quot;,component:user&#125;</span><span class="xml">​    ]</span><span class="xml">​    let router=new VueRouter(</span><span class="hljs-template-variable">&#123;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​        routes</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​    &#125;</span><span class="xml">)</span><span class="xml">​    let vm=new Vue(</span><span class="hljs-template-variable">&#123;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​        el:&quot;#app&quot;,</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​        data:&#123;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​        &#125;</span><span class="xml">,</span><span class="xml">​        router,</span><span class="xml">​        methods:</span><span class="hljs-template-variable">&#123;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​            fn()&#123;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​                console.log(this.$route)</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​            &#125;</span><span class="xml">​        &#125;</span><span class="xml">​    &#125;)</span><span class="xml">​    // query传值会将你传的值显示在地址栏儿上，类似与我们的ajax中的get传输方式</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;path:&#x27;/user/aa&#x27;,query:&#123;name:&#x27;shao&#x27;,age:28&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&#125;&quot;</span>&gt;</span>aa<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;path:&#x27;/user/bb&#x27;,query:&#123;name:&#x27;che&#x27;,age:18&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&#125;&quot;</span>&gt;</span>bb<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;path:&#x27;/user/cc&#x27;,query:&#123;name:&#x27;hui&#x27;,age:16&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&#125;&quot;</span>&gt;</span>cc<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;fn&quot;</span>&gt;</span>点我进入控制台<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"><span class="hljs-comment">&lt;!-- 组件 --&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;$route.params&#125;</span><span class="xml">&#125;</span><span class="xml"><span class="hljs-comment">&lt;!-- query可以和path连着用，接下来要讲的params传值方式不可以配合path --&gt;</span></span><span class="hljs-template-variable">&#123;&#123;$route.query&#125;</span><span class="xml">&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span></code></pre><h3 id="params传值"><a href="#params传值" class="headerlink" title="params传值"></a>params传值</h3><pre><code class="hljs dust"><span class="xml">//根据路由画模版</span><span class="xml">​    let user=</span><span class="hljs-template-variable">&#123;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​        template:&quot;#user&quot;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​    &#125;</span><span class="xml">​    // 定义路由</span><span class="xml">​    let routes=[</span><span class="xml">​        </span><span class="hljs-template-variable">&#123;path:&quot;/user&quot;,name:&quot;user&quot;,component:user&#125;</span><span class="xml">​    ]</span><span class="xml">​    //new 路由实例</span><span class="xml">​    let router=new VueRouter(</span><span class="hljs-template-variable">&#123;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​        routes</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​    &#125;</span><span class="xml">)  </span><span class="xml">​    //挂在实栗</span><span class="xml">​    let vm=new Vue(</span><span class="hljs-template-variable">&#123;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​        el:&quot;#app&quot;,</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​        data:&#123;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​            userName:&quot;shao&quot;,</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​            age:28</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​        &#125;</span><span class="xml">,</span><span class="xml">​        router,</span><span class="xml">​        methods:</span><span class="hljs-template-variable">&#123;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​            fn()&#123;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​                console.log(this.$route)</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​            &#125;</span><span class="xml">​        &#125;</span><span class="xml">​    &#125;)</span><span class="xml">​        // params传值注意的点</span><span class="xml">​        // +命名路由name配合使用</span><span class="xml">​        // 不能和path配合使用(容易出现问题)</span><span class="xml">​        // 刷新时数据被清空</span><span class="xml">​        //meta用来拦截路由的 </span><span class="xml"> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><span class="xml"> <span class="hljs-comment">&lt;!-- params传值不能配合我们的path  它是和name命名路由一起用 --&gt;</span></span><span class="xml"> <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;name:&#x27;user&#x27;,params:&#123;name:userName,age:age&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&#125;&quot;</span>&gt;</span>用户<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><span class="xml"> <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;fn&quot;</span>&gt;</span>点我进入控制台<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><span class="xml"> <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><span class="xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"> <span class="hljs-comment">&lt;!-- 模版 --&gt;</span></span><span class="xml"> <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span></span><span class="xml"> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span></span><span class="xml"> </span><span class="hljs-template-variable">&#123;&#123;$route.params&#125;</span><span class="xml">&#125;</span><span class="xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span></code></pre><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><pre><code class="hljs dust"><span class="xml">//动态路由</span><span class="xml">​    //定义四个组件</span><span class="xml">​    // let aa=</span><span class="hljs-template-variable">&#123;tempplate:&quot;#aa&quot;&#125;</span><span class="xml">​    // let bb=</span><span class="hljs-template-variable">&#123;tempplate:&quot;#bb&quot;&#125;</span><span class="xml">​    // let cc=</span><span class="hljs-template-variable">&#123;tempplate:&quot;#cc&quot;&#125;</span><span class="xml">​    // let dd=</span><span class="hljs-template-variable">&#123;tempplate:&quot;#dd&quot;&#125;</span><span class="xml">​    let user=</span><span class="hljs-template-variable">&#123;template:&quot;#user&quot;&#125;</span><span class="xml">​    //定义路由</span><span class="xml">​    // let routes=[</span><span class="xml">​    //     </span><span class="hljs-template-variable">&#123;path:&quot;/aa&quot;,component:aa&#125;</span><span class="xml">,</span><span class="xml">​    //     </span><span class="hljs-template-variable">&#123;path:&quot;/bb&quot;,component:bb&#125;</span><span class="xml">,</span><span class="xml">​    //     </span><span class="hljs-template-variable">&#123;path:&quot;/cc&quot;,component:cc&#125;</span><span class="xml">,</span><span class="xml">​    //     </span><span class="hljs-template-variable">&#123;path:&quot;/dd&quot;,component:dd&#125;</span><span class="xml">​    // ]</span><span class="xml">​    //path:&quot;/user/:user&quot;</span><span class="xml">​    let routes=[</span><span class="hljs-template-variable">&#123;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​        path:&quot;/user/:userName/age/:age&quot;,</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​        component:user</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​    &#125;</span><span class="xml">]</span><span class="xml">​    let router=new VueRouter(</span><span class="hljs-template-variable">&#123;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​        routes</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​    &#125;</span><span class="xml">)</span><span class="xml">​    let vm=new Vue(</span><span class="hljs-template-variable">&#123;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​        el:&quot;#app&quot;,</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​        data:&#123;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​            </span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​        &#125;</span><span class="xml">,</span><span class="xml">​        router</span><span class="xml">​    &#125;)</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;path:&#x27;/user/aa/age/20&#x27;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>aa<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><span class="xml"><span class="hljs-comment">&lt;!-- &lt;router-link :to=&quot;</span></span><span class="hljs-template-variable">&#123;path:&#x27;/user/bb&#x27;&#125;</span><span class="xml"><span class="hljs-comment">&quot;&gt;bb&lt;/router-link&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;path:&#x27;/user/cc&#x27;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>cc<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;path:&#x27;/user/dd&#x27;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>dd<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span> --&gt;</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"><span class="hljs-comment">&lt;!-- 四个组件 --&gt;</span></span><span class="xml"><span class="hljs-comment">&lt;!-- 一个组件 --&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span></span><span class="xml">我是</span><span class="hljs-template-variable">&#123;&#123;$route.params.userName&#125;</span><span class="xml">&#125;页面</span><span class="xml">我</span><span class="hljs-template-variable">&#123;&#123;$route.params.age&#125;</span><span class="xml">&#125;岁了</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span></code></pre><h3 id="点击进入详情页面案例"><a href="#点击进入详情页面案例" class="headerlink" title="点击进入详情页面案例"></a>点击进入详情页面案例</h3><pre><code class="hljs dust"><span class="xml">//根据路由写组件</span><span class="xml">​    let index=</span><span class="hljs-template-variable">&#123;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​        template:&quot;#index&quot;,</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​        // 数据</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​        data()&#123;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​            return &#123;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​                goods:[</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​                    &#123;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​                        // 给唯一的标识</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​                        id:1,</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​                        name:&quot;黄瓜&quot;,</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​                        price:24</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​                    &#125;</span><span class="xml">,</span><span class="xml">​                    </span><span class="hljs-template-variable">&#123;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​                        id:2,</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​                        name:&quot;西瓜&quot;,</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​                        price:25</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​                    &#125;</span><span class="xml">,</span><span class="xml">​                    </span><span class="hljs-template-variable">&#123;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​                        id:3,</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​                        name:&quot;冬瓜&quot;,</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​                        price:26</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​                    &#125;</span><span class="xml">​                ]</span><span class="xml">​            &#125;</span><span class="xml">​        &#125;</span><span class="xml">​    &#125;</span><span class="xml">​    //详情组件</span><span class="xml">​    let details=</span><span class="hljs-template-variable">&#123;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​        template:&quot;#details&quot;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​    &#125;</span><span class="xml">​    //先去画路由</span><span class="xml">​    let routes=[</span><span class="xml">​        //主页路由</span><span class="xml">​        </span><span class="hljs-template-variable">&#123;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​            path:&quot;/&quot;,//根目录下</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​            component:index</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​        &#125;</span><span class="xml">,</span><span class="xml">​        //详情路由</span><span class="xml">​        </span><span class="hljs-template-variable">&#123;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​            path:&quot;/details/:name/price/:price&quot;,</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​            component:details</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​        &#125;</span><span class="xml">​    ]</span><span class="xml">​    //创建我们的router实例</span><span class="xml">​    let router=new VueRouter(</span><span class="hljs-template-variable">&#123;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​        routes</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​    &#125;</span><span class="xml">)</span><span class="xml">​    //挂在我们的vue实例上</span><span class="xml">​    let vm=new Vue(</span><span class="hljs-template-variable">&#123;</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​        el:&quot;#app&quot;,</span><span class="hljs-template-variable"></span><span class="hljs-template-variable">​        data:&#123;&#125;</span><span class="xml">,</span><span class="xml">​        router</span><span class="xml">​    &#125;)</span><span class="xml"><span class="hljs-comment">&lt;!-- view层中写路由 --&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-comment">&lt;!-- &lt;router-link to=&quot;/&quot;&gt;&lt;/router-link&gt; --&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"><span class="hljs-comment">&lt;!-- 首页的内容，在组件中 --&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-comment">&lt;!-- 将数据渲染出来 --&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(items,index) in goods&quot;</span>&gt;</span> </span><span class="xml"><span class="hljs-comment">&lt;!--路由文件的跳转  --&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;path:&#x27;/details/&#x27;+items.name+&#x27;/price/&#x27;+items.price&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;items&#125;</span><span class="xml">&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span> </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><span class="xml"><span class="hljs-comment">&lt;!-- detail组件 --&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;details&quot;</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;details&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;$route.params&#125;</span><span class="xml">&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span></code></pre><h3 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h3><pre><code class="hljs awk"> let vm=new Vue(&#123;​        el:<span class="hljs-string">&quot;#app&quot;</span>,​        data:&#123;​            xing:<span class="hljs-string">&quot;&quot;</span>,​            ming:<span class="hljs-string">&quot;&quot;</span>,​            fullName:<span class="hljs-string">&quot;&quot;</span>​        &#125;,​        <span class="hljs-regexp">//</span>概念​        <span class="hljs-regexp">//</span> 检测数据,一般为普通的字符串，number ，bol​        <span class="hljs-regexp">//</span>假如想要监听对象和数组 ​        <span class="hljs-regexp">//</span>双层对象​        <span class="hljs-regexp">//</span> &#123;​        <span class="hljs-regexp">//</span>     obj:&#123;​        <span class="hljs-regexp">//</span>         obj:&#123;​        <span class="hljs-regexp">//</span>         &#125;​        <span class="hljs-regexp">//</span>     &#125;​        <span class="hljs-regexp">//</span> &#125;​        <span class="hljs-regexp">//</span>深度监听  深度响应​        <span class="hljs-regexp">//</span>添加侦听​        watch:&#123;​            <span class="hljs-regexp">//</span>当你的姓改变的时候，整体的姓名也要改变​            xing()&#123;​                this.fullName=this.xing+this.ming​            &#125;​        &#125;​    &#125;)&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;姓: &lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-model=<span class="hljs-string">&quot;xing&quot;</span>&gt;&lt;br/&gt;名: &lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-model=<span class="hljs-string">&quot;ming&quot;</span>&gt;&lt;br/&gt;&#123;&#123;fullName&#125;&#125;&lt;/div&gt;</code></pre><h3 id="深度响应"><a href="#深度响应" class="headerlink" title="深度响应"></a>深度响应</h3><pre><code class="hljs javascript"><span class="hljs-comment">//创建一个实例子</span>​    <span class="hljs-keyword">let</span> vm=<span class="hljs-keyword">new</span> Vue(&#123;​        el:<span class="hljs-string">&quot;#app&quot;</span>,​        data:&#123;​            obj:&#123;​                name:<span class="hljs-string">&quot;shao&quot;</span>​            &#125;​        &#125;,​        <span class="hljs-comment">//设置监听</span>​        watch:&#123;​            obj:&#123;​                <span class="hljs-comment">// 设置一个监听方法</span>​                <span class="hljs-comment">// v1 指代 更新之前的数据 &lt;==&gt; v2指代的更新之后的数据 两者指向同一数据对象 </span>​                handler(v1,v2)&#123;​                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;哈哈哈&quot;</span>)​                    <span class="hljs-built_in">console</span>.log(v1,v2)​                &#125;,​                <span class="hljs-comment">// 深度监听 deep属性</span>​                deep:<span class="hljs-literal">true</span>​            &#125;​        &#125;​    &#125;)&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;&lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-model=<span class="hljs-string">&quot;obj.name&quot;</span>&gt;&lt;/div&gt;</code></pre><h1 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h1><h2 id="native方法"><a href="#native方法" class="headerlink" title="native方法:"></a>native方法:</h2><p>将原生事件绑定到组件上</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">kky</span> @<span class="hljs-attr">click.native</span> = <span class="hljs-string">&quot;fn&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">kky</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre><pre><code class="hljs js"><span class="hljs-keyword">var</span> kky = &#123;    template:<span class="hljs-string">`</span><span class="hljs-string">    &lt;div class=&quot;kky&quot;&gt;点我试试&lt;/div&gt;</span><span class="hljs-string">    `</span>&#125;</code></pre><p>此时不用在组件内部写点击事件的方法,直接可以用click方法</p><h2 id="promise函数"><a href="#promise函数" class="headerlink" title="promise函数"></a>promise函数</h2><p>新的解决异步编程 方案</p><p>​        异步传统解决方案是回调函数</p><p>Promise有三个状态 有三种状:</p><p>​    pending(进行中),</p><p>​    fulfilled(已成功)</p><p>​    和rejected(已失败)</p><p>对应函数resolve  成功时的回调,rejected失败时的回调</p><p>格式:</p><pre><code class="hljs js"><span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>)=&gt;</span>&#123;    <span class="hljs-keyword">if</span>(条件)&#123;        resolve (成功时回调)    &#125;<span class="hljs-keyword">else</span>&#123;        reject(失败时回调)    &#125;&#125;)</code></pre><p>then </p><p>​    至少需要一个函数,成功时调用的函数对应resolve,</p><p>​    若有第二个函数对应reject函数,通常建议使用catch处理recject</p><p>​    catch 对应reject函数</p><p>​    finally 无论resove,还是reject,执行之后最后执行</p><p>​    </p><p>​    有三个异步函数分别为myajax1 ,myajax2,myajax3</p><p>​    all 三个都成功时,返回数据[数据1,数据2,数据3], 看谁最后成功,谁跑的慢(都需要成功)</p><p>​    </p><p>​    race 只要有一个成功,就返回数据,看谁最先成功 看谁跑的快(只要第一个成功,就不再执行后面的),第一个失败了,也不再执行</p><p>​    </p><pre><code class="hljs js"><span class="hljs-comment">//三次调用异步,但无法控制异步顺序</span>            <span class="hljs-comment">// myAjax(url1).then(res1=&gt;&#123;</span>            <span class="hljs-comment">//     console.log(&quot;res1:&quot;,res1);</span>            <span class="hljs-comment">// &#125;).catch(err1=&gt;&#123;</span>            <span class="hljs-comment">//     console.log(&quot;err1:&quot;,err1);</span>            <span class="hljs-comment">// &#125;)</span>            <span class="hljs-comment">// myAjax(url2).then(res2=&gt;&#123;</span>            <span class="hljs-comment">//     console.log(&quot;res2:&quot;,res2);</span>            <span class="hljs-comment">// &#125;).catch(err1=&gt;&#123;</span>            <span class="hljs-comment">//     console.log(&quot;err2:&quot;,err2);</span>            <span class="hljs-comment">// &#125;)</span>            <span class="hljs-comment">// myAjax(url3).then(res3=&gt;&#123;</span>            <span class="hljs-comment">//     console.log(&quot;res3:&quot;,res3);</span>            <span class="hljs-comment">// &#125;).catch(err3=&gt;&#123;</span>            <span class="hljs-comment">//     console.log(&quot;err3:&quot;,err3);</span>            <span class="hljs-comment">// &#125;)</span>            <span class="hljs-comment">//按照需要的顺序,调用三次异步</span>            myAjax(url2).then(<span class="hljs-function"><span class="hljs-params">res2</span>=&gt;</span>&#123;                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;res2:&quot;</span>,res2);                <span class="hljs-keyword">return</span> myAjax(url3);            &#125;).then(<span class="hljs-function"><span class="hljs-params">res3</span>=&gt;</span>&#123;                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;res3:&quot;</span>,res3);                <span class="hljs-keyword">return</span> myAjax(url1);            &#125;).then(<span class="hljs-function"><span class="hljs-params">res1</span>=&gt;</span>&#123;                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;res1:&quot;</span>,res1);            &#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;err:&quot;</span>,err);            &#125;)</code></pre><h2 id="async-await函数"><a href="#async-await函数" class="headerlink" title="async   await函数"></a>async   await函数</h2><p>async await</p><p>​    使得异步操作变得更加方便 必须和promise连用</p><p>​    </p><p>​    格式</p><p>​    async 规定这是个async 函数 fn</p><p>​    await 必须放在一个通过promise写的异步函数</p><p>​    最后调用fn</p><p>​    fn().then().catch().finally();</p><p>​    </p><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p>​      四种:</p><p>/*</p><p>​      redirect:”地址”(String)</p><p>​      redirect:{ptah:”/地址”},对象</p><p>​      redirect:{name:”路由名称”},对象</p><p>​      redirect:to=&gt;{</p><p>​        //逻辑操作</p><p>​        return 新地址(字符串)</p><p>​      }</p><p>​       */</p><h2 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h2><pre><code class="hljs js">router.beforeEach(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>)=&gt;</span> &#123;  <span class="hljs-comment">//console.log(&quot;00000000000000000to:&quot;,to,&quot;form:&quot;,from,&quot;是否需要登录:&quot;,to.meta.isLogin);</span>  <span class="hljs-comment">//to.meta.isLogin//只能判断单个路由是否需要登录</span>  <span class="hljs-comment">//to.matched.some(route=&gt;route.meta.isLogin) //判断当前路由以及父路由是否需要登录</span>  <span class="hljs-built_in">document</span>.title=to.meta.title;<span class="hljs-comment">//地址栏的标题</span>  <span class="hljs-keyword">if</span>(to.matched.some(<span class="hljs-function"><span class="hljs-params">route</span>=&gt;</span>route.meta.isLogin))&#123;    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">localStorage</span>.token)&#123;<span class="hljs-comment">//是否登录</span>      next();    &#125;<span class="hljs-keyword">else</span>&#123;      Message(&#123;        message:<span class="hljs-string">&quot;请先登录,即将前往登录页面&quot;</span>,        center:<span class="hljs-literal">true</span>,        duration:<span class="hljs-number">1500</span>      &#125;);      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;        next(&#123;          path:<span class="hljs-string">&quot;/login&quot;</span>,          query:&#123;<span class="hljs-attr">redirect</span>:to.fullPath&#125;<span class="hljs-comment">//登录后将回到登录之前的路由</span>        &#125;)      &#125;)    &#125;  &#125;<span class="hljs-keyword">else</span>&#123;    next();  &#125;&#125;)</code></pre>]]></content>
    
    
    <categories>
      
      <category>知识点总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
